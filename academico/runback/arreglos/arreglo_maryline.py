import os
import sys
import io
import xlsxwriter
import xlwt
import openpyxl
import xlwt
from xlwt import *
from django.http import HttpResponse
from xlwt import *

# SITE_ROOT = os.path.dirname(os.path.realpath(__file__))


YOUR_PATH = os.path.dirname(os.path.realpath(__file__))
# print(f"YOUR_PATH: {YOUR_PATH}")
SITE_ROOT = os.path.dirname(os.path.dirname(YOUR_PATH))
SITE_ROOT = os.path.join(SITE_ROOT, '')
# print(f"SITE_ROOT: {SITE_ROOT}")
your_djangoproject_home = os.path.split(SITE_ROOT)[0]
# print(f"your_djangoproject_home: {your_djangoproject_home}")
sys.path.append(your_djangoproject_home)

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
application = get_wsgi_application()

from django.http import HttpResponse
from settings import MEDIA_ROOT, BASE_DIR
from xlwt import easyxf, XFStyle
from sga.adm_criteriosactividadesdocente import asistencia_tutoria
from inno.models import *
from sga.models import *
from sagest.models import *
from balcon.models import *
from inno.funciones import *
import threading
from Moodle_Funciones import crearhtmlphpmoodle
# congreso turismo
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id=18).exclude(tipoparticipacion_id__in =[135,136]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#         if inscrito.existerubrocurso():
#             if inscrito.pagorubrocurso():
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso,'elabora_persona': elabora_persona ,'inscrito': inscrito, 'fecha': fecha, 'qrname2':qrname2}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                                        {
#                                                            'sistema': u'SGA - UNEMI',
#                                                            'inscrito': inscrito
#                                                        },
#                                                        correo, [], [rutapdf],
#                                                        cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito,inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                      print("No tiene correo %s +++++  " % (inscrito))
#         else:
#             congreso = inscrito.congreso
#             qrname = 'qr_certificado_%s' % inscrito.id
#             folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#             # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#             rutapdf = folder + '/' + qrname + '.pdf'
#             rutaimg = folder + '/' + qrname + '.png'
#             if os.path.isfile(rutaimg):
#                 os.remove(rutaimg)
#             if os.path.isfile(rutapdf):
#                 os.remove(rutapdf)
#
#             url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#             imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#             qrname2 = 'qr' + qrname
#
#             # print(url)
#             # print(imageqr)
#             data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha, 'qrname2': qrname2}
#             valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                 'congreso/certificado_pdf.html',
#                 {'pagesize': 'A4',
#                  "data": data
#                  }, qrname + '.pdf'
#             )
#             print(rutapdf)
#             if valida:
#                 os.remove(rutaimg)
#                 inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                 inscrito.emailnotificado = True
#                 inscrito.fecha_emailnotifica = datetime.now().date()
#                 inscrito.persona_emailnotifica = elabora_persona
#                 inscrito.save()
#             else:
#                 print('Error')
#
#             asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#             correo = inscrito.participante.emailpersonal()
#             # correo = []
#             correo.append('mleong2@unemi.edu.ec')
#             correo.append('investigacion.dip@unemi.edu.ec')
#             correo.append('lmontesp@unemi.edu.ec')
#             if inscrito.participante.email:
#                 send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                {
#                                    'sistema': u'SGA - UNEMI',
#                                    'inscrito': inscrito
#                                },
#                                correo, [], [rutapdf],
#                                cuenta=CUENTAS_CORREOS[0][1])
#                 print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                 time.sleep(2)
#             else:
#                 print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)



#congreso pscicolog√≠a
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 17).exclude(tipoparticipacion_id__in =[120,121,116,118,140]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#         if inscrito.existerubrocurso():
#             if inscrito.pagorubrocurso():
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 # correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#         else:
#             congreso = inscrito.congreso
#             qrname = 'qr_certificado_%s' % inscrito.id
#             folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#             # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#             rutapdf = folder + '/' + qrname + '.pdf'
#             rutaimg = folder + '/' + qrname + '.png'
#             if os.path.isfile(rutaimg):
#                 os.remove(rutaimg)
#             if os.path.isfile(rutapdf):
#                 os.remove(rutapdf)
#
#             url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#             imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#             qrname2 = 'qr' + qrname
#
#             # print(url)
#             # print(imageqr)
#             data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                     'qrname': qrname}
#             valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                 'congreso/certificado_pdf.html',
#                 {'pagesize': 'A4',
#                  "data": data
#                  }, qrname + '.pdf'
#             )
#             print(rutapdf)
#             if valida:
#                 os.remove(rutaimg)
#                 inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                 inscrito.emailnotificado = True
#                 inscrito.fecha_emailnotifica = datetime.now().date()
#                 inscrito.persona_emailnotifica = elabora_persona
#                 inscrito.save()
#             else:
#                 print('Error')
#
#             asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#             correo = inscrito.participante.emailpersonal()
#             # correo = []
#             correo.append('mleong2@unemi.edu.ec')
#             correo.append('investigacion.dip@unemi.edu.ec')
#             correo.append('lmontesp@unemi.edu.ec')
#             # correo.append('mleong2@unemi.edu.ec')
#             if inscrito.participante.email:
#                 send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                {
#                                    'sistema': u'SGA - UNEMI',
#                                    'inscrito': inscrito
#                                },
#                                correo, [], [rutapdf],
#                                cuenta=CUENTAS_CORREOS[0][1])
#                 print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                 time.sleep(2)
#             else:
#                 print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)


# # congreso turismo emailnotificado
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id=18).exclude(tipoparticipacion_id__in =[135,136]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#
#             if inscrito.pagorubrocurso() and inscrito.emailnotificado == False:
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso,'elabora_persona': elabora_persona ,'inscrito': inscrito, 'fecha': fecha, 'qrname2':qrname2}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                                        {
#                                                            'sistema': u'SGA - UNEMI',
#                                                            'inscrito': inscrito
#                                                        },
#                                                        correo, [], [rutapdf],
#                                                        cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito,inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                      print("No tiene correo %s +++++  " % (inscrito))
#
#
# except Exception as ex:
#     print(ex)
#
#
#
#
#
# # congreso administraci√≥n emailnotificado
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 13).exclude(tipoparticipacion_id__in =[88,89,85,86,142])
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#                "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#
#         if inscrito.pagorubrocurso() and inscrito.emailnotificado == False:
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)
#
#
# # congreso psicolog√≠a emailnotificado
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 17).exclude(tipoparticipacion_id__in =[120,121,116,118,140]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#
#         if inscrito.pagorubrocurso() and inscrito.emailnotificado == False:
#             congreso = inscrito.congreso
#             qrname = 'qr_certificado_%s' % inscrito.id
#             folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'certificadoscongresoinscrito'))
#             # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#             rutapdf = folder + '/' + qrname + '.pdf'
#             rutaimg = folder + '/' + qrname + '.png'
#             if os.path.isfile(rutaimg):
#                 os.remove(rutaimg)
#             if os.path.isfile(rutapdf):
#                 os.remove(rutapdf)
#
#             url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#             imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#             qrname2 = 'qr' + qrname
#             # print(url)
#             # print(imageqr)
#             data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                     'qrname': qrname}
#             valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                 'congreso/certificado_pdf.html',
#                 {'pagesize': 'A4',
#                  "data": data
#                  }, qrname + '.pdf'
#             )
#             print(rutapdf)
#             if valida:
#                 os.remove(rutaimg)
#                 inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                 inscrito.emailnotificado = True
#                 inscrito.fecha_emailnotifica = datetime.now().date()
#                 inscrito.persona_emailnotifica = elabora_persona
#                 inscrito.save()
#             else:
#                 print('Error')
#
#             asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#             correo = inscrito.participante.emailpersonal()
#             # correo=[]
#             correo.append('mleong2@unemi.edu.ec')
#             # correo.append('mleong2@unemi.edu.ec')
#             correo.append('investigacion.dip@unemi.edu.ec')
#             correo.append('lmontesp@unemi.edu.ec')
#             if inscrito.participante.email:
#                 send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                {
#                                    'sistema': u'SGA - UNEMI',
#                                    'inscrito': inscrito
#                                },
#                                correo, [], [rutapdf],
#                                cuenta=CUENTAS_CORREOS[0][1])
#                 print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                 time.sleep(2)
#             else:
#                 print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)
#
#
#
# # congreso contabilidad emailnotificado
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 12).exclude(tipoparticipacion_id__in =[48,49,46,47,141]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#
#         if inscrito.pagorubrocurso() and inscrito.emailnotificado == False:
#             congreso = inscrito.congreso
#             qrname = 'qr_certificado_%s' % inscrito.id
#             folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'certificadoscongresoinscrito'))
#             # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#             rutapdf = folder + '/' + qrname + '.pdf'
#             rutaimg = folder + '/' + qrname + '.png'
#             if os.path.isfile(rutaimg):
#                 os.remove(rutaimg)
#             if os.path.isfile(rutapdf):
#                 os.remove(rutapdf)
#
#             url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#             imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#             qrname2 = 'qr' + qrname
#             # print(url)
#             # print(imageqr)
#             data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                     'qrname': qrname}
#             valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                 'congreso/certificado_pdf.html',
#                 {'pagesize': 'A4',
#                  "data": data
#                  }, qrname + '.pdf'
#             )
#             print(rutapdf)
#             if valida:
#                 os.remove(rutaimg)
#                 inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                 inscrito.emailnotificado = True
#                 inscrito.fecha_emailnotifica = datetime.now().date()
#                 inscrito.persona_emailnotifica = elabora_persona
#                 inscrito.save()
#             else:
#                 print('Error')
#
#             asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#             correo = inscrito.participante.emailpersonal()
#             # correo=[]
#             correo.append('mleong2@unemi.edu.ec')
#             correo.append('investigacion.dip@unemi.edu.ec')
#             correo.append('lmontesp@unemi.edu.ec')
#             if inscrito.participante.email:
#                 send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                {
#                                    'sistema': u'SGA - UNEMI',
#                                    'inscrito': inscrito
#                                },
#                                correo, [], [rutapdf],
#                                cuenta=CUENTAS_CORREOS[0][1])
#                 print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                 time.sleep(2)
#             else:
#                 print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)




#
# # congreso econom√≠a emailnotificado
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 11).exclude(tipoparticipacion_id__in =[128,129,126,127,143]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#
#             if inscrito.pagorubrocurso() and inscrito.emailnotificado == False:
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)
#
#
# # congreso comunicaci√≥n emailnotificado
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id=14).exclude(tipoparticipacion_id__in=[70, 72, 64, 68, 144]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#     for inscrito in inscritos:
#             if inscrito.pagorubrocurso() and inscrito.emailnotificado == False:
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)
#
#
# # congreso trabajo social emailnotificado
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 15).exclude(tipoparticipacion_id__in =[102,104,100,101,145]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#
#             if inscrito.pagorubrocurso() and inscrito.emailnotificado == False:
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)
#
#
# # congreso derecho emailnotificado
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 16).exclude(tipoparticipacion_id__in =[106,107,103,105,146]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#
#             if inscrito.pagorubrocurso() and inscrito.emailnotificado == False:
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 # correo.append('mleong2@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)


#
# # congreso fisioterapia emailnotificado
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 5).exclude(tipoparticipacion_id__in =[30, 31, 28, 29]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#
#             if inscrito.pagorubrocurso() and inscrito.emailnotificado == False:
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 # correo.append('mleong2@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#
#
# except Exception as ex:
#     print(ex)
#
#
#
# # # congreso enfermer√≠a emailnotificado
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 7).exclude(tipoparticipacion_id__in =[50, 51, 52, 53]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#
#             if inscrito.pagorubrocurso() and inscrito.emailnotificado == False:
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 # correo.append('mleong2@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#
#
# except Exception as ex:
#     print(ex)
# #
#
#
# # # congreso salud p√∫blica emailnotificado
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 8).exclude(tipoparticipacion_id__in =[73, 74, 75, 76]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#             if inscrito.pagorubrocurso() and inscrito.emailnotificado == False:
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 # correo.append('mleong2@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#
#
# except Exception as ex:
#     print(ex)
#
#
#
#
#
# # congreso nutricion emailnotificado
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 9).exclude(tipoparticipacion_id__in =[84, 87, 78, 81]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#             if inscrito.pagorubrocurso() and inscrito.emailnotificado == False:
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, '../../media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 # correo.append('mleong2@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#
#
# except Exception as ex:
#     print(ex)



#
#
#
# congreso contabilidad
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 12).exclude(tipoparticipacion_id__in =[48,49,46,47,141]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#         if inscrito.existerubrocurso():
#             if inscrito.pagorubrocurso():
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#         else:
#             congreso = inscrito.congreso
#             qrname = 'qr_certificado_%s' % inscrito.id
#             folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#             # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#             rutapdf = folder + '/' + qrname + '.pdf'
#             rutaimg = folder + '/' + qrname + '.png'
#             if os.path.isfile(rutaimg):
#                 os.remove(rutaimg)
#             if os.path.isfile(rutapdf):
#                 os.remove(rutapdf)
#
#             url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#             imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#             qrname2 = 'qr' + qrname
#
#             # print(url)
#             # print(imageqr)
#             data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                     'qrname': qrname}
#             valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                 'congreso/certificado_pdf.html',
#                 {'pagesize': 'A4',
#                  "data": data
#                  }, qrname + '.pdf'
#             )
#             print(rutapdf)
#             if valida:
#                 os.remove(rutaimg)
#                 inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                 inscrito.emailnotificado = True
#                 inscrito.fecha_emailnotifica = datetime.now().date()
#                 inscrito.persona_emailnotifica = elabora_persona
#                 inscrito.save()
#             else:
#                 print('Error')
#
#             asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#             correo = inscrito.participante.emailpersonal()
#             # correo = []
#             correo.append('mleong2@unemi.edu.ec')
#             correo.append('investigacion.dip@unemi.edu.ec')
#             correo.append('lmontesp@unemi.edu.ec')
#             if inscrito.participante.email:
#                 send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                {
#                                    'sistema': u'SGA - UNEMI',
#                                    'inscrito': inscrito
#                                },
#                                correo, [], [rutapdf],
#                                cuenta=CUENTAS_CORREOS[0][1])
#                 print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                 time.sleep(2)
#             else:
#                 print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)

# congreso administraci√≥n
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 13).exclude(tipoparticipacion_id__in =[88,89,85,86,142])
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#                "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#         if inscrito.existerubrocurso():
#             if inscrito.pagorubrocurso():
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#         else:
#             congreso = inscrito.congreso
#             qrname = 'qr_certificado_%s' % inscrito.id
#             folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#             # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#             rutapdf = folder + '/' + qrname + '.pdf'
#             rutaimg = folder + '/' + qrname + '.png'
#             if os.path.isfile(rutaimg):
#                 os.remove(rutaimg)
#             if os.path.isfile(rutapdf):
#                 os.remove(rutapdf)
#
#             url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#             imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#             qrname2 = 'qr' + qrname
#
#             # print(url)
#             # print(imageqr)
#             data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                     'qrname': qrname}
#             valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                 'congreso/certificado_pdf.html',
#                 {'pagesize': 'A4',
#                  "data": data
#                  }, qrname + '.pdf'
#             )
#             print(rutapdf)
#             if valida:
#                 os.remove(rutaimg)
#                 inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                 inscrito.emailnotificado = True
#                 inscrito.fecha_emailnotifica = datetime.now().date()
#                 inscrito.persona_emailnotifica = elabora_persona
#                 inscrito.save()
#             else:
#                 print('Error')
#
#             asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#             correo = inscrito.participante.emailpersonal()
#             # correo = []
#             correo.append('mleong2@unemi.edu.ec')
#             correo.append('investigacion.dip@unemi.edu.ec')
#             correo.append('lmontesp@unemi.edu.ec')
#             if inscrito.participante.email:
#                 send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                {
#                                    'sistema': u'SGA - UNEMI',
#                                    'inscrito': inscrito
#                                },
#                                correo, [], [rutapdf],
#                                cuenta=CUENTAS_CORREOS[0][1])
#                 print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                 time.sleep(2)
#             else:
#                 print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)
#
# #
#
# # congreso econom√≠a
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 11).exclude(tipoparticipacion_id__in =[128,129,126,127,143]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#         if inscrito.existerubrocurso():
#             if inscrito.pagorubrocurso():
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#         else:
#             congreso = inscrito.congreso
#             qrname = 'qr_certificado_%s' % inscrito.id
#             folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#             # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#             rutapdf = folder + '/' + qrname + '.pdf'
#             rutaimg = folder + '/' + qrname + '.png'
#             if os.path.isfile(rutaimg):
#                 os.remove(rutaimg)
#             if os.path.isfile(rutapdf):
#                 os.remove(rutapdf)
#
#             url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#             imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#             qrname2 = 'qr' + qrname
#
#             # print(url)
#             # print(imageqr)
#             data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                     'qrname': qrname}
#             valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                 'congreso/certificado_pdf.html',
#                 {'pagesize': 'A4',
#                  "data": data
#                  }, qrname + '.pdf'
#             )
#             print(rutapdf)
#             if valida:
#                 os.remove(rutaimg)
#                 inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                 inscrito.emailnotificado = True
#                 inscrito.fecha_emailnotifica = datetime.now().date()
#                 inscrito.persona_emailnotifica = elabora_persona
#                 inscrito.save()
#             else:
#                 print('Error')
#
#             asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#             correo = inscrito.participante.emailpersonal()
#             # correo = []
#             correo.append('mleong2@unemi.edu.ec')
#             correo.append('investigacion.dip@unemi.edu.ec')
#             correo.append('lmontesp@unemi.edu.ec')
#             if inscrito.participante.email:
#                 send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                {
#                                    'sistema': u'SGA - UNEMI',
#                                    'inscrito': inscrito
#                                },
#                                correo, [], [rutapdf],
#                                cuenta=CUENTAS_CORREOS[0][1])
#                 print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                 time.sleep(2)
#             else:
#                 print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)
#
# # congreso comunicaci√≥n
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id=14).exclude(tipoparticipacion_id__in=[70, 72, 64, 68, 144]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#     for inscrito in inscritos:
#         if inscrito.existerubrocurso():
#             if inscrito.pagorubrocurso():
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#         else:
#             congreso = inscrito.congreso
#             qrname = 'qr_certificado_%s' % inscrito.id
#             folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#             # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#             rutapdf = folder + '/' + qrname + '.pdf'
#             rutaimg = folder + '/' + qrname + '.png'
#             if os.path.isfile(rutaimg):
#                 os.remove(rutaimg)
#             if os.path.isfile(rutapdf):
#                 os.remove(rutapdf)
#
#             url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#             imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#             qrname2 = 'qr' + qrname
#
#             # print(url)
#             # print(imageqr)
#             data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                     'qrname': qrname}
#             valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                 'congreso/certificado_pdf.html',
#                 {'pagesize': 'A4',
#                  "data": data
#                  }, qrname + '.pdf'
#             )
#             print(rutapdf)
#             if valida:
#                 os.remove(rutaimg)
#                 inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                 inscrito.emailnotificado = True
#                 inscrito.fecha_emailnotifica = datetime.now().date()
#                 inscrito.persona_emailnotifica = elabora_persona
#                 inscrito.save()
#             else:
#                 print('Error')
#
#             asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#             correo = inscrito.participante.emailpersonal()
#             # correo = []
#             correo.append('mleong2@unemi.edu.ec')
#             correo.append('investigacion.dip@unemi.edu.ec')
#             correo.append('lmontesp@unemi.edu.ec')
#             if inscrito.participante.email:
#                 send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                {
#                                    'sistema': u'SGA - UNEMI',
#                                    'inscrito': inscrito
#                                },
#                                correo, [], [rutapdf],
#                                cuenta=CUENTAS_CORREOS[0][1])
#                 print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                 time.sleep(2)
#             else:
#                 print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)
#
# # congreso trabajo social
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 15).exclude(tipoparticipacion_id__in =[102,104,100,101,145]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#         if inscrito.existerubrocurso():
#             if inscrito.pagorubrocurso():
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#         else:
#             congreso = inscrito.congreso
#             qrname = 'qr_certificado_%s' % inscrito.id
#             folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#             # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#             rutapdf = folder + '/' + qrname + '.pdf'
#             rutaimg = folder + '/' + qrname + '.png'
#             if os.path.isfile(rutaimg):
#                 os.remove(rutaimg)
#             if os.path.isfile(rutapdf):
#                 os.remove(rutapdf)
#
#             url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#             imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#             qrname2 = 'qr' + qrname
#
#             # print(url)
#             # print(imageqr)
#             data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                     'qrname': qrname}
#             valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                 'congreso/certificado_pdf.html',
#                 {'pagesize': 'A4',
#                  "data": data
#                  }, qrname + '.pdf'
#             )
#             print(rutapdf)
#             if valida:
#                 os.remove(rutaimg)
#                 inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                 inscrito.emailnotificado = True
#                 inscrito.fecha_emailnotifica = datetime.now().date()
#                 inscrito.persona_emailnotifica = elabora_persona
#                 inscrito.save()
#             else:
#                 print('Error')
#
#             asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#             correo = inscrito.participante.emailpersonal()
#             # correo = []
#             correo.append('mleong2@unemi.edu.ec')
#             correo.append('investigacion.dip@unemi.edu.ec')
#             correo.append('lmontesp@unemi.edu.ec')
#             if inscrito.participante.email:
#                 send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                {
#                                    'sistema': u'SGA - UNEMI',
#                                    'inscrito': inscrito
#                                },
#                                correo, [], [rutapdf],
#                                cuenta=CUENTAS_CORREOS[0][1])
#                 print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                 time.sleep(2)
#             else:
#                 print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)
#
# # congreso derecho
# try:
#     inscritos = InscritoCongreso.objects.filter(pk=3956, status=True, congreso_id= 16).exclude(tipoparticipacion_id__in =[106,107,103,105,146]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#         if inscrito.existerubrocurso():
#             if inscrito.pagorubrocurso():
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     # inscrito.emailnotificado = True
#                     # inscrito.fecha_emailnotifica = datetime.now().date()
#                     # inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 # correo = inscrito.participante.emailpersonal()
#                 correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 # correo.append('investigacion.dip@unemi.edu.ec')
#                 # correo.append('lmontesp@unemi.edu.ec')
#                 # correo.append('mleong2@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#         else:
#             congreso = inscrito.congreso
#             qrname = 'qr_certificado_%s' % inscrito.id
#             folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#             # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#             rutapdf = folder + '/' + qrname + '.pdf'
#             rutaimg = folder + '/' + qrname + '.png'
#             if os.path.isfile(rutaimg):
#                 os.remove(rutaimg)
#             if os.path.isfile(rutapdf):
#                 os.remove(rutapdf)
#
#             url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#             imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#             qrname2 = 'qr' + qrname
#
#             # print(url)
#             # print(imageqr)
#             data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                     'qrname': qrname}
#             valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                 'congreso/certificado_pdf.html',
#                 {'pagesize': 'A4',
#                  "data": data
#                  }, qrname + '.pdf'
#             )
#             print(rutapdf)
#             if valida:
#                 os.remove(rutaimg)
#                 inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                 # inscrito.emailnotificado = True
#                 # inscrito.fecha_emailnotifica = datetime.now().date()
#                 # inscrito.persona_emailnotifica = elabora_persona
#                 inscrito.save()
#             else:
#                 print('Error')
#
#             asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#             # correo = inscrito.participante.emailpersonal()
#             correo = []
#             correo.append('mleong2@unemi.edu.ec')
#             # correo.append('investigacion.dip@unemi.edu.ec')
#             # correo.append('lmontesp@unemi.edu.ec')
#             # correo.append('mleong2@unemi.edu.ec')
#             if inscrito.participante.email:
#                 send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                {
#                                    'sistema': u'SGA - UNEMI',
#                                    'inscrito': inscrito
#                                },
#                                correo, [], [rutapdf],
#                                cuenta=CUENTAS_CORREOS[0][1])
#                 print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                 time.sleep(2)
#             else:
#                 print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)


#
# # congreso fisioterapia
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 5).exclude(tipoparticipacion_id__in =[30, 31, 28, 29]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#         if inscrito.existerubrocurso():
#             if inscrito.pagorubrocurso():
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 # correo.append('mleong2@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#         else:
#             congreso = inscrito.congreso
#             qrname = 'qr_certificado_%s' % inscrito.id
#             folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#             # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#             rutapdf = folder + '/' + qrname + '.pdf'
#             rutaimg = folder + '/' + qrname + '.png'
#             if os.path.isfile(rutaimg):
#                 os.remove(rutaimg)
#             if os.path.isfile(rutapdf):
#                 os.remove(rutapdf)
#
#             url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#             imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#             qrname2 = 'qr' + qrname
#
#             # print(url)
#             # print(imageqr)
#             data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                     'qrname': qrname}
#             valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                 'congreso/certificado_pdf.html',
#                 {'pagesize': 'A4',
#                  "data": data
#                  }, qrname + '.pdf'
#             )
#             print(rutapdf)
#             if valida:
#                 os.remove(rutaimg)
#                 inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                 inscrito.emailnotificado = True
#                 inscrito.fecha_emailnotifica = datetime.now().date()
#                 inscrito.persona_emailnotifica = elabora_persona
#                 inscrito.save()
#             else:
#                 print('Error')
#
#             asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#             correo = inscrito.participante.emailpersonal()
#             # correo = []
#             correo.append('mleong2@unemi.edu.ec')
#             correo.append('investigacion.dip@unemi.edu.ec')
#             correo.append('lmontesp@unemi.edu.ec')
#             # correo.append('mleong2@unemi.edu.ec')
#             if inscrito.participante.email:
#                 send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                {
#                                    'sistema': u'SGA - UNEMI',
#                                    'inscrito': inscrito
#                                },
#                                correo, [], [rutapdf],
#                                cuenta=CUENTAS_CORREOS[0][1])
#                 print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                 time.sleep(2)
#             else:
#                 print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)

#
# # # # congreso enfermer√≠a
# try:
#     inscritos = InscritoCongreso.objects.filter(pk=7032, status=True, congreso_id= 7).exclude(tipoparticipacion_id__in =[50, 51, 52, 53]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#         if inscrito.existerubrocurso():
#             if inscrito.pagorubrocurso():
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 # correo.append('mleong2@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#         else:
#             congreso = inscrito.congreso
#             qrname = 'qr_certificado_%s' % inscrito.id
#             folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#             # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#             rutapdf = folder + '/' + qrname + '.pdf'
#             rutaimg = folder + '/' + qrname + '.png'
#             if os.path.isfile(rutaimg):
#                 os.remove(rutaimg)
#             if os.path.isfile(rutapdf):
#                 os.remove(rutapdf)
#
#             url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#             imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#             qrname2 = 'qr' + qrname
#
#             # print(url)
#             # print(imageqr)
#             data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                     'qrname': qrname}
#             valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                 'congreso/certificado_pdf.html',
#                 {'pagesize': 'A4',
#                  "data": data
#                  }, qrname + '.pdf'
#             )
#             print(rutapdf)
#             if valida:
#                 os.remove(rutaimg)
#                 inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                 inscrito.emailnotificado = True
#                 inscrito.fecha_emailnotifica = datetime.now().date()
#                 inscrito.persona_emailnotifica = elabora_persona
#                 inscrito.save()
#             else:
#                 print('Error')
#
#             asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#             correo = inscrito.participante.emailpersonal()
#             # correo = []
#             correo.append('mleong2@unemi.edu.ec')
#             correo.append('investigacion.dip@unemi.edu.ec')
#             correo.append('lmontesp@unemi.edu.ec')
#             # correo.append('mleong2@unemi.edu.ec')
#             if inscrito.participante.email:
#                 send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                {
#                                    'sistema': u'SGA - UNEMI',
#                                    'inscrito': inscrito
#                                },
#                                correo, [], [rutapdf],
#                                cuenta=CUENTAS_CORREOS[0][1])
#                 print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                 time.sleep(2)
#             else:
#                 print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)
# #
# #
#
#
# # # congreso salud p√∫blica
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 8).exclude(tipoparticipacion_id__in =[73, 74, 75, 76]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#         if inscrito.existerubrocurso():
#             if inscrito.pagorubrocurso():
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 # correo.append('mleong2@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#         else:
#             congreso = inscrito.congreso
#             qrname = 'qr_certificado_%s' % inscrito.id
#             folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#             # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#             rutapdf = folder + '/' + qrname + '.pdf'
#             rutaimg = folder + '/' + qrname + '.png'
#             if os.path.isfile(rutaimg):
#                 os.remove(rutaimg)
#             if os.path.isfile(rutapdf):
#                 os.remove(rutapdf)
#
#             url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#             imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#             qrname2 = 'qr' + qrname
#
#             # print(url)
#             # print(imageqr)
#             data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                     'qrname': qrname}
#             valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                 'congreso/certificado_pdf.html',
#                 {'pagesize': 'A4',
#                  "data": data
#                  }, qrname + '.pdf'
#             )
#             print(rutapdf)
#             if valida:
#                 os.remove(rutaimg)
#                 inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                 inscrito.emailnotificado = True
#                 inscrito.fecha_emailnotifica = datetime.now().date()
#                 inscrito.persona_emailnotifica = elabora_persona
#                 inscrito.save()
#             else:
#                 print('Error')
#
#             asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#             correo = inscrito.participante.emailpersonal()
#             # correo = []
#             correo.append('mleong2@unemi.edu.ec')
#             correo.append('investigacion.dip@unemi.edu.ec')
#             correo.append('lmontesp@unemi.edu.ec')
#             # correo.append('mleong2@unemi.edu.ec')
#             if inscrito.participante.email:
#                 send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                {
#                                    'sistema': u'SGA - UNEMI',
#                                    'inscrito': inscrito
#                                },
#                                correo, [], [rutapdf],
#                                cuenta=CUENTAS_CORREOS[0][1])
#                 print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                 time.sleep(2)
#             else:
#                 print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)
#
#
#
# # congreso nutricion
# try:
#     inscritos = InscritoCongreso.objects.filter(pk= 4829, status=True, congreso_id= 9).exclude(tipoparticipacion_id__in =[84, 87, 78, 81]).distinct()
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#            "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#         if inscrito.existerubrocurso():
#             if inscrito.pagorubrocurso():
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 correo.append('investigacion.dip@unemi.edu.ec')
#                 correo.append('lmontesp@unemi.edu.ec')
#                 # correo.append('mleong2@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#         else:
#             congreso = inscrito.congreso
#             qrname = 'qr_certificado_%s' % inscrito.id
#             folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#             # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#             rutapdf = folder + '/' + qrname + '.pdf'
#             rutaimg = folder + '/' + qrname + '.png'
#             if os.path.isfile(rutaimg):
#                 os.remove(rutaimg)
#             if os.path.isfile(rutapdf):
#                 os.remove(rutapdf)
#
#             url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#             imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#             qrname2 = 'qr' + qrname
#
#             # print(url)
#             # print(imageqr)
#             data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                     'qrname': qrname}
#             valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                 'congreso/certificado_pdf.html',
#                 {'pagesize': 'A4',
#                  "data": data
#                  }, qrname + '.pdf'
#             )
#             print(rutapdf)
#             if valida:
#                 os.remove(rutaimg)
#                 inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                 inscrito.emailnotificado = True
#                 inscrito.fecha_emailnotifica = datetime.now().date()
#                 inscrito.persona_emailnotifica = elabora_persona
#                 inscrito.save()
#             else:
#                 print('Error')
#
#             asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#             correo = inscrito.participante.emailpersonal()
#             # correo = []
#             correo.append('mleong2@unemi.edu.ec')
#             correo.append('investigacion.dip@unemi.edu.ec')
#             correo.append('lmontesp@unemi.edu.ec')
#             # correo.append('mleong2@unemi.edu.ec')
#             if inscrito.participante.email:
#                 send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                {
#                                    'sistema': u'SGA - UNEMI',
#                                    'inscrito': inscrito
#                                },
#                                correo, [], [rutapdf],
#                                cuenta=CUENTAS_CORREOS[0][1])
#                 print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                 time.sleep(2)
#             else:
#                 print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)





# CONGRESOS ANTERIORES FACULTAD DE CIENCIAS SOCIALES, EDUCACI√ìN COMERCIAL Y DERECHO
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 4).exclude(tipoparticipacion_id__in =[15,17,16,20])
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#                "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#
#         if inscrito.pagorubrocurso() :
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 # correo.append('investigacion.dip@unemi.edu.ec')
#                 # correo.append('lmontesp@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)

#
# # CONGRESOS ANTERIORES  CONGRESO INTERNACIONAL DE SALUD Y NUTRICI√ìN 2019
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 1).exclude(tipoparticipacion_id__in =[13,8])
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#                "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#
#         if inscrito.pagorubrocurso() :
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 # correo.append('investigacion.dip@unemi.edu.ec')
#                 # correo.append('lmontesp@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#
#
#
#
# except Exception as ex:
#     print(ex)
#


#
#

# CONGRESOS ANTERIORES  IX JORNADAS ACAD√âMICAS & CONGRESO DE CIENCIAS DE LA INGENIER√çA
# try:
#     inscritos = InscritoCongreso.objects.filter(status=True, congreso_id= 2).exclude(tipoparticipacion_id__in =[3,4,1])
#     elabora_persona = Persona.objects.get(pk=29898)
#     mes = ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre",
#                "noviembre", "diciembre"]
#     fecha = u"Milagro, %s de %s del %s" % (datetime.now().day, str(mes[datetime.now().month - 1]), datetime.now().year)
#
#     for inscrito in inscritos:
#
#         if inscrito.pagorubrocurso() :
#                 congreso = inscrito.congreso
#                 qrname = 'qr_certificado_%s' % inscrito.id
#                 folder = os.path.join(os.path.join(SITE_STORAGE, 'media', 'certificadoscongresoinscrito'))
#                 # folder = os.path.join(SITE_STORAGE, 'media', 'qrcode', 'evaluaciondocente')
#                 rutapdf = folder + '/' + qrname + '.pdf'
#                 rutaimg = folder + '/' + qrname + '.png'
#                 if os.path.isfile(rutaimg):
#                     os.remove(rutaimg)
#                 if os.path.isfile(rutapdf):
#                     os.remove(rutapdf)
#
#                 url = pyqrcode.create('https://sga.unemi.edu.ec/media/certificadoscongresoinscrito/' + qrname + '.pdf')
#                 imageqr = url.png(folder + '/' + qrname + '.png', 16, '#000000')
#                 qrname2 = 'qr' + qrname
#                 # print(url)
#                 # print(imageqr)
#                 data = {'congreso': congreso, 'elabora_persona': elabora_persona, 'inscrito': inscrito, 'fecha': fecha,
#                         'qrname': qrname}
#                 valida = conviert_html_to_pdfsaveqrcertificadoscongresoinscrito(
#                     'congreso/certificado_pdf.html',
#                     {'pagesize': 'A4',
#                      "data": data
#                      }, qrname + '.pdf'
#                 )
#                 print(rutapdf)
#                 if valida:
#                     os.remove(rutaimg)
#                     inscrito.rutapdf = '/certificadoscongresoinscrito/' + qrname + '.pdf'
#                     inscrito.emailnotificado = True
#                     inscrito.fecha_emailnotifica = datetime.now().date()
#                     inscrito.persona_emailnotifica = elabora_persona
#                     inscrito.save()
#                 else:
#                     print('Error')
#
#                 asunto = u"CERTIFICADO - " + inscrito.congreso.nombre
#                 correo = inscrito.participante.emailpersonal()
#                 # correo=[]
#                 correo.append('mleong2@unemi.edu.ec')
#                 # correo.append('investigacion.dip@unemi.edu.ec')
#                 # correo.append('lmontesp@unemi.edu.ec')
#                 if inscrito.participante.email:
#                     send_html_mail(asunto, "emails/notificar_certificado_congreso.html",
#                                    {
#                                        'sistema': u'SGA - UNEMI',
#                                        'inscrito': inscrito
#                                    },
#                                    correo, [], [rutapdf],
#                                    cuenta=CUENTAS_CORREOS[0][1])
#                     print("Correo enviado %s +++++ %s " % (inscrito, inscrito.participante.email))
#                     time.sleep(2)
#                 else:
#                     print("No tiene correo %s +++++  " % (inscrito))
#
# except Exception as ex:
#     print(ex)

#cambio de estado de video magistral  de estado "revision crai" a "ingresado"
# try:
#     videos = VideoMagistralSilaboSemanal.objects.filter(status=True, silabosemanal__silabo__materia__nivel__periodo = 126, estado_id=5)
#     for video in videos:
#         video.estado_id = 1
#         if video.presentacion_video :
#             video.presentacion_validado = False
#         video.save()
#
# except Exception as ex:
#     print('error: %s' % ex)


#masivo persona PPL
# try:
#     personas = Persona.objects.filter(status=True, ppl=False)
#     for persona in personas:
#         if HistorialPersonaPPL.objects.filter(status=True, persona=persona, fechasalida__isnull=True).exists():
#             persona.ppl=True
#             persona.save()
#             print(persona.id)
#
# except Exception as ex:
#     print('error: %s' % ex)


# def calculo_modelo_evaluativo(ma):
# 	P = ma.campo('P')
# 	N1 = ma.campo('N1')
# 	N2 = ma.campo('N2')
# 	P.valor=N1.valor + N2.valor
# 	P.save()
# 	ma.notafinal = null_to_decimal(P.valor, 0)
# 	if N2.valor > 0:
# 		if not ma.sinasistencia:
# 			if ma.asistenciafinal < 70:
# 				N2.valor = 0
# 				N2.save()
# 				P.valor=N1.valor + N2.valor
# 				P.save()
# 				ma.notafinal = null_to_decimal(P.valor, 0)
# 	ma.save()
#
# materiaasignada = MateriaAsignada.objects.get(pk=2154305)
# calculo_modelo_evaluativo(materiaasignada)

# try:
# 	materiaasignada = MateriaAsignada.objects.get(pk=1861037)
# 	guardo_nota = False
# 	for notasmooc in materiaasignada.materia.notas_de_moodle(materiaasignada.matricula.inscripcion.persona):
# 		campo = materiaasignada.campo(notasmooc[1].upper())
# 		if Decimal(notasmooc[0]) >= 70 and materiaasignada.notafinal <= 0:
# 			if type(notasmooc[0]) is Decimal:
# 				if null_to_decimal(campo.valor) != float(notasmooc[0]):
# 					actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
# 					auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
# 													calificacion=notasmooc[0])
# 					auditorianotas.save()
# 			else:
# 				if null_to_decimal(campo.valor) != float(0):
# 					actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
# 					auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
# 					auditorianotas.save()
# 			guardo_nota = True
# 			print(u"Importa nota %s" % materiaasignada)
# 	if guardo_nota:
# 		d = locals()
# 		exec(materiaasignada.materia.modeloevaluativo.logicamodelo, globals(), d)
# 		d['calculo_modelo_evaluativo'](materiaasignada)
# 		materiaasignada.cierre_materia_asignada()
#
#
#
#
# except Exception as ex:
#     print('error: %s' % ex)
#
# periodoanterior = Periodo.objects.get(status=True, clasificacion=3, id=158 )
# pr = Periodo.objects.get(status=True, clasificacion=3, fin__lt=periodoanterior.fin).order_by('-inicio')[1]
# # perant = periodoanterior.proximosperiodos()
#
# print("fin")

#CPA1
# with transaction.atomic():
# #     #CPA
#     try:
#         archivo_ = 'IC_CPA'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 141
#         nivel = 757 #757
#         materia = 60316   #60316
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 print(str(rowx))
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = False
#                         #matriculaultniv = inscripcion.esta_matriculado_ultimo_nivel()
#
#                         if inscripcion.aprobo_asta_penultimo_malla():
#                             if inscripcion.aprobo_ultimo_nivel_malla():
#                                 matultinv= True
#                             else:
#                                 minivel = NivelMalla.objects.filter(status=True, asignaturamalla__malla__inscripcionmalla__inscripcion=inscripcion).order_by('-orden')[0]
#                                 idasignaturaoptativas = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, ejeformativo_id=4, malla__inscripcionmalla__inscripcion=inscripcion, nivelmalla__orden__lte=minivel.orden)
#                                 # # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, nivelmalla__orden__lte=minivel.orden)
#                                 # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, asignatura__id__in=idasignaturaoptativas)
#                                 idasigrecord = inscripcion.recordacademico_set.values_list('asignatura__id', flat=False).filter(status=True, aprobada=True).exclude(asignatura__id__in=idasignaturaoptativas)
#                                 # if idasigrecord.count()+self.cantidad_asig_optativas_aprobadas() >= self.cantidad_asig_aprobar_ultimo_malla():
#                                 #     return True
#                                 # else:
#                                 asigultimo = AsignaturaMalla.objects.values_list('id', flat=False).filter(status=True, malla__inscripcionmalla__inscripcion=inscripcion, opcional=False).exclude(asignatura__id__in=idasigrecord)
#                                 xyz = [num for num in [1, 2, 3] if num != inscripcion.itinerario]  # exclusi√≥n de itinerario
#                                 asigultimo = asigultimo.exclude(itinerario__in=xyz)
#                                 asigultimo = asigultimo.exclude(validarequisitograduacion=True, nivelmalla_id=8)
#                                 cant_asiginscrito = len(MateriaAsignada.objects.values('id').filter(status=True, retiramateria=False, matricula__inscripcion=inscripcion, materia__asignaturamalla__id__in=asigultimo))
#                                 if cant_asiginscrito + inscripcion.cantidad_asig_optativas_aprobadas(minivel.orden) >= len(asigultimo):
#                                     matultinv= True
#                         else:
#                             matultinv = False
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#
#
#     except Exception as ex:
#         transaction.set_rollback(True)
#         print('error: %s' % ex)
#
#     print("fin CPA")

#CPA2
# with transaction.atomic():
#     #CPA
#     try:
#         archivo_ = 'IC_CPA_2'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 141
#         nivel = 757 #757
#         materia = 60316   #60316
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 print(str(rowx))
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = False
#                         #matriculaultniv = inscripcion.esta_matriculado_ultimo_nivel()
#
#                         if inscripcion.aprobo_asta_penultimo_malla():
#                             if inscripcion.aprobo_ultimo_nivel_malla():
#                                 matultinv= True
#                             else:
#                                 minivel = NivelMalla.objects.filter(status=True, asignaturamalla__malla__inscripcionmalla__inscripcion=inscripcion).order_by('-orden')[0]
#                                 idasignaturaoptativas = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, ejeformativo_id=4, malla__inscripcionmalla__inscripcion=inscripcion, nivelmalla__orden__lte=minivel.orden)
#                                 # # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, nivelmalla__orden__lte=minivel.orden)
#                                 # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, asignatura__id__in=idasignaturaoptativas)
#                                 idasigrecord = inscripcion.recordacademico_set.values_list('asignatura__id', flat=False).filter(status=True, aprobada=True).exclude(asignatura__id__in=idasignaturaoptativas)
#                                 # if idasigrecord.count()+self.cantidad_asig_optativas_aprobadas() >= self.cantidad_asig_aprobar_ultimo_malla():
#                                 #     return True
#                                 # else:
#                                 asigultimo = AsignaturaMalla.objects.values_list('id', flat=False).filter(status=True, malla__inscripcionmalla__inscripcion=inscripcion, opcional=False).exclude(asignatura__id__in=idasigrecord)
#                                 xyz = [num for num in [1, 2, 3] if num != inscripcion.itinerario]  # exclusi√≥n de itinerario
#                                 asigultimo = asigultimo.exclude(itinerario__in=xyz)
#                                 asigultimo = asigultimo.exclude(validarequisitograduacion=True, nivelmalla_id=8)
#                                 cant_asiginscrito = len(MateriaAsignada.objects.values('id').filter(status=True, retiramateria=False, matricula__inscripcion=inscripcion, materia__asignaturamalla__id__in=asigultimo))
#                                 if cant_asiginscrito + inscripcion.cantidad_asig_optativas_aprobadas(minivel.orden) >= len(asigultimo):
#                                     matultinv= True
#                         else:
#                             matultinv = False
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#
#
#     except Exception as ex:
#         transaction.set_rollback(True)
#         print('error: %s' % ex)
#
#     print("fin CPA_2")


#psicologia2
# with transaction.atomic():
#     try:
#         archivo_ = 'IC_PSICOLOGIA_2'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 137
#         nivel = 753
#         materia = 59765
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 print(str(rowx))
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = False
#                         #matriculaultniv = inscripcion.esta_matriculado_ultimo_nivel()
#
#                         if inscripcion.aprobo_asta_penultimo_malla():
#                             if inscripcion.aprobo_ultimo_nivel_malla():
#                                 matultinv= True
#                             else:
#                                 minivel = NivelMalla.objects.filter(status=True, asignaturamalla__malla__inscripcionmalla__inscripcion=inscripcion).order_by('-orden')[0]
#                                 idasignaturaoptativas = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, ejeformativo_id=4, malla__inscripcionmalla__inscripcion=inscripcion, nivelmalla__orden__lte=minivel.orden)
#                                 # # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, nivelmalla__orden__lte=minivel.orden)
#                                 # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, asignatura__id__in=idasignaturaoptativas)
#                                 idasigrecord = inscripcion.recordacademico_set.values_list('asignatura__id', flat=False).filter(status=True, aprobada=True).exclude(asignatura__id__in=idasignaturaoptativas)
#                                 # if idasigrecord.count()+self.cantidad_asig_optativas_aprobadas() >= self.cantidad_asig_aprobar_ultimo_malla():
#                                 #     return True
#                                 # else:
#                                 asigultimo = AsignaturaMalla.objects.values_list('id', flat=False).filter(status=True, malla__inscripcionmalla__inscripcion=inscripcion, opcional=False).exclude(asignatura__id__in=idasigrecord)
#                                 xyz = [num for num in [1, 2, 3] if num != inscripcion.itinerario]  # exclusi√≥n de itinerario
#                                 asigultimo = asigultimo.exclude(itinerario__in=xyz)
#                                 asigultimo = asigultimo.exclude(validarequisitograduacion=True, nivelmalla_id=8)
#                                 cant_asiginscrito = len(MateriaAsignada.objects.values('id').filter(status=True, retiramateria=False, matricula__inscripcion=inscripcion, materia__asignaturamalla__id__in=asigultimo))
#                                 if cant_asiginscrito + inscripcion.cantidad_asig_optativas_aprobadas(minivel.orden) >= len(asigultimo):
#                                     matultinv= True
#                         else:
#                             matultinv = False
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#                 else:
#                     print('no existe persona: %s' % cedula_)
#
#
#
#     except Exception as ex:
#         # transaction.set_rollback(True)
#         print('error: %s' % ex)
#         # print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
#
#     print("fin psicologia2")


#psicologia
# with transaction.atomic():
#     try:
#         archivo_ = 'IC_PSICOLOGIA'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 137
#         nivel = 753
#         materia = 59765
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 print(str(rowx))
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = False
#                         #matriculaultniv = inscripcion.esta_matriculado_ultimo_nivel()
#
#                         if inscripcion.aprobo_asta_penultimo_malla():
#                             if inscripcion.aprobo_ultimo_nivel_malla():
#                                 matultinv= True
#                             else:
#                                 minivel = NivelMalla.objects.filter(status=True, asignaturamalla__malla__inscripcionmalla__inscripcion=inscripcion).order_by('-orden')[0]
#                                 idasignaturaoptativas = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, ejeformativo_id=4, malla__inscripcionmalla__inscripcion=inscripcion, nivelmalla__orden__lte=minivel.orden)
#                                 # # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, nivelmalla__orden__lte=minivel.orden)
#                                 # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, asignatura__id__in=idasignaturaoptativas)
#                                 idasigrecord = inscripcion.recordacademico_set.values_list('asignatura__id', flat=False).filter(status=True, aprobada=True).exclude(asignatura__id__in=idasignaturaoptativas)
#                                 # if idasigrecord.count()+self.cantidad_asig_optativas_aprobadas() >= self.cantidad_asig_aprobar_ultimo_malla():
#                                 #     return True
#                                 # else:
#                                 asigultimo = AsignaturaMalla.objects.values_list('id', flat=False).filter(status=True, malla__inscripcionmalla__inscripcion=inscripcion, opcional=False).exclude(asignatura__id__in=idasigrecord)
#                                 xyz = [num for num in [1, 2, 3] if num != inscripcion.itinerario]  # exclusi√≥n de itinerario
#                                 asigultimo = asigultimo.exclude(itinerario__in=xyz)
#                                 asigultimo = asigultimo.exclude(validarequisitograduacion=True, nivelmalla_id=8)
#                                 cant_asiginscrito = len(MateriaAsignada.objects.values('id').filter(status=True, retiramateria=False, matricula__inscripcion=inscripcion, materia__asignaturamalla__id__in=asigultimo))
#                                 if cant_asiginscrito + inscripcion.cantidad_asig_optativas_aprobadas(minivel.orden) >= len(asigultimo):
#                                     matultinv= True
#                         else:
#                             matultinv = False
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#                 else:
#                     print('no existe persona: %s' % cedula_)
#
#
#
#     except Exception as ex:
#         transaction.set_rollback(True)
#         print('error: %s' % ex)
#         print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
#
#     print("fin psicologia")

#comunicacion
# with transaction.atomic():
#     try:
#         archivo_ = 'IC_COMUNICACION'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 143
#         nivel = 753
#         materia = 60289
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 print(str(rowx))
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = False
#                         #matriculaultniv = inscripcion.esta_matriculado_ultimo_nivel()
#
#                         if inscripcion.aprobo_asta_penultimo_malla():
#                             if inscripcion.aprobo_ultimo_nivel_malla():
#                                 matultinv= True
#                             else:
#                                 minivel = NivelMalla.objects.filter(status=True, asignaturamalla__malla__inscripcionmalla__inscripcion=inscripcion).order_by('-orden')[0]
#                                 idasignaturaoptativas = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, ejeformativo_id=4, malla__inscripcionmalla__inscripcion=inscripcion, nivelmalla__orden__lte=minivel.orden)
#                                 # # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, nivelmalla__orden__lte=minivel.orden)
#                                 # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, asignatura__id__in=idasignaturaoptativas)
#                                 idasigrecord = inscripcion.recordacademico_set.values_list('asignatura__id', flat=False).filter(status=True, aprobada=True).exclude(asignatura__id__in=idasignaturaoptativas)
#                                 # if idasigrecord.count()+self.cantidad_asig_optativas_aprobadas() >= self.cantidad_asig_aprobar_ultimo_malla():
#                                 #     return True
#                                 # else:
#                                 asigultimo = AsignaturaMalla.objects.values_list('id', flat=False).filter(status=True, malla__inscripcionmalla__inscripcion=inscripcion, opcional=False).exclude(asignatura__id__in=idasigrecord)
#                                 xyz = [num for num in [1, 2, 3] if num != inscripcion.itinerario]  # exclusi√≥n de itinerario
#                                 asigultimo = asigultimo.exclude(itinerario__in=xyz)
#                                 asigultimo = asigultimo.exclude(validarequisitograduacion=True, nivelmalla_id=8)
#                                 cant_asiginscrito = len(MateriaAsignada.objects.values('id').filter(status=True, retiramateria=False, matricula__inscripcion=inscripcion, materia__asignaturamalla__id__in=asigultimo))
#                                 if cant_asiginscrito + inscripcion.cantidad_asig_optativas_aprobadas(minivel.orden) >= len(asigultimo):
#                                     matultinv= True
#                         else:
#                             matultinv = False
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#                 else:
#                     print('no existe persona: %s' % cedula_)
#
#
#     except Exception as ex:
#         transaction.set_rollback(True)
#         print('error: %s' % ex)
#         print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
#
#     print("fin comunicacion")

#comunicacion2
# with transaction.atomic():
#     try:
#         archivo_ = 'IC_COM_2'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 143
#         nivel = 753
#         materia = 60289
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 print(str(rowx))
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = False
#                         #matriculaultniv = inscripcion.esta_matriculado_ultimo_nivel()
#
#                         if inscripcion.aprobo_asta_penultimo_malla():
#                             if inscripcion.aprobo_ultimo_nivel_malla():
#                                 matultinv= True
#                             else:
#                                 minivel = NivelMalla.objects.filter(status=True, asignaturamalla__malla__inscripcionmalla__inscripcion=inscripcion).order_by('-orden')[0]
#                                 idasignaturaoptativas = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, ejeformativo_id=4, malla__inscripcionmalla__inscripcion=inscripcion, nivelmalla__orden__lte=minivel.orden)
#                                 # # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, nivelmalla__orden__lte=minivel.orden)
#                                 # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, asignatura__id__in=idasignaturaoptativas)
#                                 idasigrecord = inscripcion.recordacademico_set.values_list('asignatura__id', flat=False).filter(status=True, aprobada=True).exclude(asignatura__id__in=idasignaturaoptativas)
#                                 # if idasigrecord.count()+self.cantidad_asig_optativas_aprobadas() >= self.cantidad_asig_aprobar_ultimo_malla():
#                                 #     return True
#                                 # else:
#                                 asigultimo = AsignaturaMalla.objects.values_list('id', flat=False).filter(status=True, malla__inscripcionmalla__inscripcion=inscripcion, opcional=False).exclude(asignatura__id__in=idasigrecord)
#                                 xyz = [num for num in [1, 2, 3] if num != inscripcion.itinerario]  # exclusi√≥n de itinerario
#                                 asigultimo = asigultimo.exclude(itinerario__in=xyz)
#                                 asigultimo = asigultimo.exclude(validarequisitograduacion=True, nivelmalla_id=8)
#                                 cant_asiginscrito = len(MateriaAsignada.objects.values('id').filter(status=True, retiramateria=False, matricula__inscripcion=inscripcion, materia__asignaturamalla__id__in=asigultimo))
#                                 if cant_asiginscrito + inscripcion.cantidad_asig_optativas_aprobadas(minivel.orden) >= len(asigultimo):
#                                     matultinv= True
#                         else:
#                             matultinv = False
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#                 else:
#                     print('no existe persona: %s' % cedula_)
#
#
#     except Exception as ex:
#         transaction.set_rollback(True)
#         print('error: %s' % ex)
#         print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
#
#     print("fin comunicacion2")


#admin empresa
# with transaction.atomic():
#     try:
#         archivo_ = 'IC_ADMINISTRACION'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 140
#         nivel = 756
#         materia = 60315
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 print(str(rowx))
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = False
#                         #matriculaultniv = inscripcion.esta_matriculado_ultimo_nivel()
#
#                         if inscripcion.aprobo_asta_penultimo_malla():
#                             if inscripcion.aprobo_ultimo_nivel_malla():
#                                 matultinv= True
#                             else:
#                                 minivel = NivelMalla.objects.filter(status=True, asignaturamalla__malla__inscripcionmalla__inscripcion=inscripcion).order_by('-orden')[0]
#                                 idasignaturaoptativas = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, ejeformativo_id=4, malla__inscripcionmalla__inscripcion=inscripcion, nivelmalla__orden__lte=minivel.orden)
#                                 # # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, nivelmalla__orden__lte=minivel.orden)
#                                 # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, asignatura__id__in=idasignaturaoptativas)
#                                 idasigrecord = inscripcion.recordacademico_set.values_list('asignatura__id', flat=False).filter(status=True, aprobada=True).exclude(asignatura__id__in=idasignaturaoptativas)
#                                 # if idasigrecord.count()+self.cantidad_asig_optativas_aprobadas() >= self.cantidad_asig_aprobar_ultimo_malla():
#                                 #     return True
#                                 # else:
#                                 asigultimo = AsignaturaMalla.objects.values_list('id', flat=False).filter(status=True, malla__inscripcionmalla__inscripcion=inscripcion, opcional=False).exclude(asignatura__id__in=idasigrecord)
#                                 xyz = [num for num in [1, 2, 3] if num != inscripcion.itinerario]  # exclusi√≥n de itinerario
#                                 asigultimo = asigultimo.exclude(itinerario__in=xyz)
#                                 asigultimo = asigultimo.exclude(validarequisitograduacion=True, nivelmalla_id=8)
#                                 cant_asiginscrito = len(MateriaAsignada.objects.values('id').filter(status=True, retiramateria=False, matricula__inscripcion=inscripcion, materia__asignaturamalla__id__in=asigultimo))
#                                 if cant_asiginscrito + inscripcion.cantidad_asig_optativas_aprobadas(minivel.orden) >= len(asigultimo):
#                                     matultinv= True
#                         else:
#                             matultinv = False
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#                     else:
#                         print('no existe persona: %s' % cedula_)
#
#
#     except Exception as ex:
#         transaction.set_rollback(True)
#         print('error: %s' % ex)
#         print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
#
#     print("fin AD EMPRESA")


#admin TRABAJO SOCIAL
# with transaction.atomic():
#     try:
#         archivo_ = 'IC_TSOCIAL'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 160
#         nivel = 755
#         materia = 59984
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 print(str(rowx))
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = False
#                         #matriculaultniv = inscripcion.esta_matriculado_ultimo_nivel()
#
#                         if inscripcion.aprobo_asta_penultimo_malla():
#                             if inscripcion.aprobo_ultimo_nivel_malla():
#                                 matultinv= True
#                             else:
#                                 minivel = NivelMalla.objects.filter(status=True, asignaturamalla__malla__inscripcionmalla__inscripcion=inscripcion).order_by('-orden')[0]
#                                 idasignaturaoptativas = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, ejeformativo_id=4, malla__inscripcionmalla__inscripcion=inscripcion, nivelmalla__orden__lte=minivel.orden)
#                                 # # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, nivelmalla__orden__lte=minivel.orden)
#                                 # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, asignatura__id__in=idasignaturaoptativas)
#                                 idasigrecord = inscripcion.recordacademico_set.values_list('asignatura__id', flat=False).filter(status=True, aprobada=True).exclude(asignatura__id__in=idasignaturaoptativas)
#                                 # if idasigrecord.count()+self.cantidad_asig_optativas_aprobadas() >= self.cantidad_asig_aprobar_ultimo_malla():
#                                 #     return True
#                                 # else:
#                                 asigultimo = AsignaturaMalla.objects.values_list('id', flat=False).filter(status=True, malla__inscripcionmalla__inscripcion=inscripcion, opcional=False).exclude(asignatura__id__in=idasigrecord)
#                                 xyz = [num for num in [1, 2, 3] if num != inscripcion.itinerario]  # exclusi√≥n de itinerario
#                                 asigultimo = asigultimo.exclude(itinerario__in=xyz)
#                                 asigultimo = asigultimo.exclude(validarequisitograduacion=True, nivelmalla_id=8)
#                                 cant_asiginscrito = len(MateriaAsignada.objects.values('id').filter(status=True, retiramateria=False, matricula__inscripcion=inscripcion, materia__asignaturamalla__id__in=asigultimo))
#                                 if cant_asiginscrito + inscripcion.cantidad_asig_optativas_aprobadas(minivel.orden) >= len(asigultimo):
#                                     matultinv= True
#                         else:
#                             matultinv = False
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#                     else:
#                         print('no existe persona: %s' % cedula_)
#
#
#     except Exception as ex:
#         transaction.set_rollback(True)
#         print('error: %s' % ex)
#         print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
#
#     print("fin TRABAJO SOCIAL")


# TRABAJO SOCIAL DOS
# with transaction.atomic():
#     try:
#         archivo_ = 'TRABAJO_SOCIAL_ALCANCE'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 160
#         nivel = 755
#         materia = 59984
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 print(str(rowx))
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = False
#                         #matriculaultniv = inscripcion.esta_matriculado_ultimo_nivel()
#
#                         if inscripcion.aprobo_asta_penultimo_malla():
#                             if inscripcion.aprobo_ultimo_nivel_malla():
#                                 matultinv= True
#                             else:
#                                 minivel = NivelMalla.objects.filter(status=True, asignaturamalla__malla__inscripcionmalla__inscripcion=inscripcion).order_by('-orden')[0]
#                                 idasignaturaoptativas = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, ejeformativo_id=4, malla__inscripcionmalla__inscripcion=inscripcion, nivelmalla__orden__lte=minivel.orden)
#                                 # # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, nivelmalla__orden__lte=minivel.orden)
#                                 # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, asignatura__id__in=idasignaturaoptativas)
#                                 idasigrecord = inscripcion.recordacademico_set.values_list('asignatura__id', flat=False).filter(status=True, aprobada=True).exclude(asignatura__id__in=idasignaturaoptativas)
#                                 # if idasigrecord.count()+self.cantidad_asig_optativas_aprobadas() >= self.cantidad_asig_aprobar_ultimo_malla():
#                                 #     return True
#                                 # else:
#                                 asigultimo = AsignaturaMalla.objects.values_list('id', flat=False).filter(status=True, malla__inscripcionmalla__inscripcion=inscripcion, opcional=False).exclude(asignatura__id__in=idasigrecord)
#                                 xyz = [num for num in [1, 2, 3] if num != inscripcion.itinerario]  # exclusi√≥n de itinerario
#                                 asigultimo = asigultimo.exclude(itinerario__in=xyz)
#                                 asigultimo = asigultimo.exclude(validarequisitograduacion=True, nivelmalla_id=8)
#                                 cant_asiginscrito = len(MateriaAsignada.objects.values('id').filter(status=True, retiramateria=False, matricula__inscripcion=inscripcion, materia__asignaturamalla__id__in=asigultimo))
#                                 if cant_asiginscrito + inscripcion.cantidad_asig_optativas_aprobadas(minivel.orden) >= len(asigultimo):
#                                     matultinv= True
#                         else:
#                             matultinv = False
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#                     else:
#                         print('no existe persona: %s' % cedula_)
#
#
#     except Exception as ex:
#         # transaction.set_rollback(True)
#         print('error: %s' % ex)
#         print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
#
#     print("fin TRABAJO SOCIAL ALCANCE")


# admin ECONOMIA2
# with transaction.atomic():
#     try:
#         archivo_ = 'IC_ECONOMIA_2'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 158
#         nivel = 758
#         materia = 60538
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 print(str(rowx))
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = False
#                         #matriculaultniv = inscripcion.esta_matriculado_ultimo_nivel()
#
#                         if inscripcion.aprobo_asta_penultimo_malla():
#                             if inscripcion.aprobo_ultimo_nivel_malla():
#                                 matultinv= True
#                             else:
#                                 minivel = NivelMalla.objects.filter(status=True, asignaturamalla__malla__inscripcionmalla__inscripcion=inscripcion).order_by('-orden')[0]
#                                 idasignaturaoptativas = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, ejeformativo_id=4, malla__inscripcionmalla__inscripcion=inscripcion, nivelmalla__orden__lte=minivel.orden)
#                                 # # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, nivelmalla__orden__lte=minivel.orden)
#                                 # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, asignatura__id__in=idasignaturaoptativas)
#                                 idasigrecord = inscripcion.recordacademico_set.values_list('asignatura__id', flat=False).filter(status=True, aprobada=True).exclude(asignatura__id__in=idasignaturaoptativas)
#                                 # if idasigrecord.count()+self.cantidad_asig_optativas_aprobadas() >= self.cantidad_asig_aprobar_ultimo_malla():
#                                 #     return True
#                                 # else:
#                                 asigultimo = AsignaturaMalla.objects.values_list('id', flat=False).filter(status=True, malla__inscripcionmalla__inscripcion=inscripcion, opcional=False).exclude(asignatura__id__in=idasigrecord)
#                                 xyz = [num for num in [1, 2, 3] if num != inscripcion.itinerario]  # exclusi√≥n de itinerario
#                                 asigultimo = asigultimo.exclude(itinerario__in=xyz)
#                                 asigultimo = asigultimo.exclude(validarequisitograduacion=True, nivelmalla_id=8)
#                                 cant_asiginscrito = len(MateriaAsignada.objects.values('id').filter(status=True, retiramateria=False, matricula__inscripcion=inscripcion, materia__asignaturamalla__id__in=asigultimo))
#                                 if cant_asiginscrito + inscripcion.cantidad_asig_optativas_aprobadas(minivel.orden) >= len(asigultimo):
#                                     matultinv= True
#                         else:
#                             matultinv = False
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#                     else:
#                         print('no existe persona: %s' % cedula_)
#
#
#     except Exception as ex:
#         transaction.set_rollback(True)
#         print('error: %s' % ex)
#         print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
#
#     print("fin ECONOMIA2")


#economia
# admin ECONOMIA
# with transaction.atomic():
#     try:
#         archivo_ = 'IC_ECONOMIA'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         # periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 158
#         nivel = 758
#         materia = 60538
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 print(str(rowx))
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = False
#                         # matriculaultniv = inscripcion.esta_matriculado_ultimo_nivel()
#
#                         if inscripcion.aprobo_asta_penultimo_malla():
#                             if inscripcion.aprobo_ultimo_nivel_malla():
#                                 matultinv = True
#                             else:
#                                 minivel = NivelMalla.objects.filter(status=True, asignaturamalla__malla__inscripcionmalla__inscripcion=inscripcion).order_by('-orden')[0]
#                                 idasignaturaoptativas = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, ejeformativo_id=4, malla__inscripcionmalla__inscripcion=inscripcion, nivelmalla__orden__lte=minivel.orden)
#                                 # # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, nivelmalla__orden__lte=minivel.orden)
#                                 # idasignatura = AsignaturaMalla.objects.values_list('asignatura__id', flat=False).filter(status=True, opcional=False, malla__inscripcionmalla__inscripcion=self, asignatura__id__in=idasignaturaoptativas)
#                                 idasigrecord = inscripcion.recordacademico_set.values_list('asignatura__id', flat=False).filter(status=True, aprobada=True).exclude(asignatura__id__in=idasignaturaoptativas)
#                                 # if idasigrecord.count()+self.cantidad_asig_optativas_aprobadas() >= self.cantidad_asig_aprobar_ultimo_malla():
#                                 #     return True
#                                 # else:
#                                 asigultimo = AsignaturaMalla.objects.values_list('id', flat=False).filter(status=True, malla__inscripcionmalla__inscripcion=inscripcion, opcional=False).exclude(asignatura__id__in=idasigrecord)
#                                 xyz = [num for num in [1, 2, 3] if num != inscripcion.itinerario]  # exclusi√≥n de itinerario
#                                 asigultimo = asigultimo.exclude(itinerario__in=xyz)
#                                 asigultimo = asigultimo.exclude(validarequisitograduacion=True, nivelmalla_id=8)
#                                 cant_asiginscrito = len(MateriaAsignada.objects.values('id').filter(status=True, retiramateria=False, matricula__inscripcion=inscripcion, materia__asignaturamalla__id__in=asigultimo))
#                                 if cant_asiginscrito + inscripcion.cantidad_asig_optativas_aprobadas(minivel.orden) >= len(asigultimo):
#                                     matultinv = True
#                         else:
#                             matultinv = False
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#                     else:
#                         print('no existe persona: %s' % cedula_)
#
#
#     except Exception as ex:
#         transaction.set_rollback(True)
#         print('error: %s' % ex)
#         print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
#
#     print("fin ECONOMIA")



#unidad de titulacion
#UT_COMUNICACION
# with transaction.atomic():
#     try:
#         archivo_ = 'UT_COMUNICACION'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 15
#         nivel = 754
#         materia = 59875
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 print(str(rowx))
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = estar_matriculado_todas_asignaturas_ultimo_periodo_academico(inscripcion.id)
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#                     else:
#                         print('no existe persona: %s' % cedula_)
#
#
#     except Exception as ex:
#         transaction.set_rollback(True)
#         print('error: %s' % ex)
#         print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
#
#     print("fin UT COMUNICACION")


#UT_CPA
# with transaction.atomic():
#     try:
#         archivo_ = 'UT_CPA'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 92
#         nivel = 754
#         materia = 60085
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 print(str(rowx))
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = estar_matriculado_todas_asignaturas_ultimo_periodo_academico(inscripcion.id)
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#                     else:
#                         print('no existe persona: %s' % cedula_)
#
#
#     except Exception as ex:
#         transaction.set_rollback(True)
#         print('error: %s' % ex)
#         print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
#
#     print("fin UT CPA")


#UT_COMERCIAL
# with transaction.atomic():
#     try:
#         archivo_ = 'UT_COMERCIAL'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 5
#         nivel = 754
#         materia = 59874
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 print(str(rowx))
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = estar_matriculado_todas_asignaturas_ultimo_periodo_academico(inscripcion.id)
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#                     else:
#                         print('no existe persona: %s' % cedula_)
#
#
#     except Exception as ex:
#         transaction.set_rollback(True)
#         print('error: %s' % ex)
#         print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
#
#     print("fin UT COMERCIAL")


#UT_COMERCIO
# with transaction.atomic():
#     try:
#         archivo_ = 'UT_COMERCIO'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 93
#         nivel = 754
#         materia = 59874
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 print(str(rowx))
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = estar_matriculado_todas_asignaturas_ultimo_periodo_academico(inscripcion.id)
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#                     else:
#                         print('no existe persona: %s' % cedula_)
#
#
#     except Exception as ex:
#         transaction.set_rollback(True)
#         print('error: %s' % ex)
#         print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
#
#     print("fin UT COMERCIO")


#UT_LIC_PSICOLOGIA
# with transaction.atomic():
#     try:
#         archivo_ = 'UT_LIC_PSICOLOGIA'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 137
#         nivel = 754
#         materia = 59876
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 print(str(rowx))
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = estar_matriculado_todas_asignaturas_ultimo_periodo_academico(inscripcion.id)
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#                     else:
#                         print('no existe persona: %s' % cedula_)
#
#
#     except Exception as ex:
#         transaction.set_rollback(True)
#         print('error: %s' % ex)
#         print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
#
#     print("fin UT LIC PSICOLOGIA")


#UT_PSICOLOGIA
# with transaction.atomic():
#     try:
#         archivo_ = 'UT_PSICOLOGIA'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 18
#         nivel = 754
#         materia = 59876
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 print(str(rowx))
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = estar_matriculado_todas_asignaturas_ultimo_periodo_academico(inscripcion.id)
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#                     else:
#                         print('no existe persona: %s' % cedula_)
#
#
#     except Exception as ex:
#         transaction.set_rollback(True)
#         print('error: %s' % ex)
#         print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
#
#     print("fin UT PSICOLOGIA")




#UT_PSICOLOGIA2
# with transaction.atomic():
#     try:
#         archivo_ = 'UT_PSICOLOGIA_2'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 137
#         nivel = 754
#         materia = 59876
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 print(str(rowx))
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = estar_matriculado_todas_asignaturas_ultimo_periodo_academico(inscripcion.id)
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#                     else:
#                         print('no existe persona: %s' % cedula_)
#
#
#     except Exception as ex:
#         transaction.set_rollback(True)
#         print('error: %s' % ex)
#         print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
#
#     print("fin UT PSICOLOGIA_2")




#UT_CPA_2
# with transaction.atomic():
#     try:
#         archivo_ = 'UT_CPA_2'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 92
#         nivel = 754
#         materia = 60085
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 print(str(rowx))
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = estar_matriculado_todas_asignaturas_ultimo_periodo_academico(inscripcion.id)
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#                     else:
#                         print('no existe persona: %s' % cedula_)
#
#
#     except Exception as ex:
#         # transaction.set_rollback(True)
#         print('error: %s' % ex)
#         print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
#
#     print("fin UT CPA_2")

#UT_COMUNICACION2
# with transaction.atomic():
#     try:
#         archivo_ = 'UT_COM_2'
#         url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
#         workbook = load_workbook(filename=url_archivo, read_only=False)
#         sheet = workbook[workbook.sheetnames[0]]
#         linea = 1
#         col_cedula = 2
#         totalmatriculados = 0
#         #periodo_actual = Periodo.objects.get(pk=126)
#         # periodo_matricular = Periodo.objects.get(pk=126)
#         totalleer = sheet.max_row - 1
#         leido = 0
#         carrera = 15
#         nivel = 754
#         materia = 59875
#
#         for rowx in range(2, sheet.max_row + 1):
#             if True:
#                 cedula_ = sheet.cell(row=rowx, column=col_cedula).value
#                 print(str(rowx))
#                 persona = Persona.objects.filter(cedula__icontains=cedula_, status=True, inscripcion__isnull=False).order_by('-id').first()
#                 if persona:
#                     inscripcion = Inscripcion.objects.filter(status=True, persona=persona, carrera=carrera).order_by('-id').first()
#                     if inscripcion:
#                         deuda = no_adeudar_institucion(inscripcion.id)
#                         vinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)
#                         practicas = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
#                         computacion = haber_aprobado_modulos_computacion(inscripcion.id)
#                         ingles = haber_aprobado_modulos_ingles(inscripcion.id)
#                         ficha = ficha_estudiantil_actualizada_completa(inscripcion.id)
#                         asMTignaturasaprobadas = asignaturas_aprobadas_primero_penultimo_nivel(inscripcion.id)
#                         matultinv = estar_matriculado_todas_asignaturas_ultimo_periodo_academico(inscripcion.id)
#
#
#                         if deuda and vinculacion and practicas and computacion and ingles and ficha and asignaturasaprobadas and matultinv:
#                             if not Matricula.objects.filter(status=True, inscripcion=inscripcion, nivel_id=nivel).exists():
#                                 matricula = Matricula(inscripcion=inscripcion,
#                                                       nivel_id=nivel,
#                                                       pago=False,
#                                                       iece=False,
#                                                       becado=False,
#                                                       porcientobeca=0,
#                                                       estado_matricula=2,
#                                                       fecha=datetime.now().date(),
#                                                       hora=datetime.now().time(),
#                                                       fechatope=fechatope(datetime.now().date()),
#                                                       termino=True,
#                                                       fechatermino=datetime.now()
#                                                       )
#                                 matricula.save()
#                                 matricula.confirmar_matricula()
#
#
#                                 materiaasignada = MateriaAsignada(matricula=matricula,
#                                                                   materia_id=materia,
#                                                                   notafinal=0,
#                                                                   asistenciafinal=0,
#                                                                   cerrado=False,
#                                                                   observaciones='',
#                                                                   estado_id=NOTA_ESTADO_EN_CURSO)
#                                 materiaasignada.save()
#                                 materiaasignada.asistencias()
#                                 materiaasignada.evaluacion()
#                                 materiaasignada.mis_planificaciones()
#                                 materiaasignada.save()
#                                 matricula.actualizar_horas_creditos()
#                     else:
#                         print('no existe persona: %s' % cedula_)
#
#
#     except Exception as ex:
#         transaction.set_rollback(True)
#         print('error: %s' % ex)
#         print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
#
#     print("fin UT COMUNICACION2")

# #
# materias = Materia.objects.filter(status=True, nivel__periodo_id=177, asignaturamalla__malla__carrera__coordinacion__id__in=[1, 2, 3, 4, 5])
# for materia in materias:
#     if materia.idcursomoodle > 0 :
#         try:
#             print("%s - %s" % (materia, materia.idcursomoodle))
#             materia.crear_actualizar_silabo_curso_virtual_segundo_nivel()
#
#         except Exception as ex:
#             print('Error al crear html %s ---- %s' % (ex, materia))


#
import concurrent.futures

def reasjute_horas_creditos_malla_modulos_ingles():

    print(SITE_STORAGE)
    with xlsxwriter.Workbook(f'{SITE_STORAGE}/media/migracion_modulos_ingles_2021_{random.randrange(1, 100)}.xlsx') as workbook:
        wk = workbook.add_worksheet(f"Hoja1")
        columns = [
            (u"ID_INSCRIPCION", 10),
            (u"APELLIDOS_NOMBRES", 100),
            (u"CEDULA", 80),
            (u"CARRERA", 80),
            (u"ID_MALLA", 80),
            (u"ID_RECORD", 10),
            (u"MODULO", 30),
            (u"CREDITOS_ANTERIOR", 10),
            (u"CREDITOS_ACTUAL", 10),
            (u"HORAS_ANTERIOR", 10),
            (u"HORAS_ACTUAL", 10),
        ]
        row_num = 1
        for col_num in range(len(columns)):
            wk.write(row_num, col_num, columns[col_num][0])
            wk.set_column(col_num, col_num, columns[col_num][1])
        row_num = 2
        wrap_format = workbook.add_format({'text_wrap': True})
        c = 0
        ids = [10, 21, 15, 147, 16, 148, 12, 232, 228, 233, 18, 17, 222, 225, 202, 226, 205, 8, 207, 6, 210, 201, 224, 356, 9, 204, 218, 206, 212, 114, 219, 113, 4, 5, 3, 7, 115, 199, 237, 208, 332, 231, 200, 11, 19, 14, 213, 258, 355, 173, 174, 13, 2, 172]
       # ids = [210]
      #2013 -2012  ids = [9, 10, 13, 2, 15, 19, 11, 7, 3, 14, 16, 115, 6, 12, 148, 147, 8, 4, 113, 18, 17, 114, 5, 21]
        # inscripcion_ids = [131795, 104493]
        # ids = [219]
        mallas = Malla.objects.filter(pk__in=ids)
        for malla in mallas:
            print(f"Malla: {malla.__str__()}")
            for inscripcionmalla in InscripcionMalla.objects.filter(malla=malla):
                inscripcion = inscripcionmalla.inscripcion
                # inscripcion = Inscripcion.objects.get(status=True, pk=74728)
                if not inscripcion.usado_graduados() or not inscripcion.egresado():
                    # print(f"Inscripcion: {inscripcion.__str__()}")
                    recordacademico = inscripcion.recordacademico_set.filter(modulomalla__isnull=False, aprobada=True, creditos=0)
                    # print(f"Total de record: {len(recordacademico)}")
                    for record in recordacademico:
                        if record.historicorecordacademico_set.filter(status=False, fecha=record.fecha).exists():
                            recordfalse = record.historicorecordacademico_set.filter(status=False, fecha=record.fecha)
                            recordfalse.delete()
                        print(f"Inscripcion: {inscripcion.__str__()}")
                        record.actualizar()
                        historico = record.mi_historico()
                        historico.creditos = record.modulomalla.creditos
                        historico.horas = record.modulomalla.horas
                        historico.validapromedio = False
                        historico.valida = True
                        historico.save()
                        creditos_anterior = record.creditos
                        creditos_actual = record.modulomalla.creditos
                        record.creditos = record.modulomalla.creditos
                        horas_anterior = record.horas
                        horas_actual = record.modulomalla.horas
                        record.horas = record.modulomalla.horas
                        record.validapromedio = False
                        record.valida = True
                        record.save()
                        # ID_INSCRIPCION
                        wk.write(row_num, 0, inscripcion.id)
                        # APELLIDOS_NOMBRES
                        wk.write(row_num, 1, inscripcion.persona.nombre_completo_inverso())
                        # CEDULA
                        wk.write(row_num, 2, inscripcion.persona.documento())
                        # CARRERA
                        wk.write(row_num, 3, inscripcion.carrera.__str__())
                        # ID_MALLA
                        wk.write(row_num, 4, malla.id)
                        # ID_RECORD
                        wk.write(row_num, 5, record.id)
                        # MODULO
                        wk.write(row_num, 6, record.modulomalla.asignatura.nombre)
                        # CREDITOS_ANTERIOR
                        wk.write(row_num, 7, creditos_anterior)
                        # CREDITOS_ACTUAL
                        wk.write(row_num, 8, creditos_actual)
                        # HORAS_ANTERIOR
                        wk.write(row_num, 9, horas_anterior)
                        # HORAS_ACTUAL
                        wk.write(row_num, 10, horas_actual)
                        row_num += 1
                    print(f"Final de Inscripcion: {inscripcion.__str__()}")
                    print(f"------------------------------------------------")
        print('------------------ FIN CREDITOS INGLES')

# reasjute_horas_creditos_malla_modulos_ingles()


#CERRAR MATERIAS ASIGNADAS Y MATERIAS
def cerrar_materias_admision():
    for materia in Materia.objects.filter(status=True, nivel__periodo_id=224, nivel__id__in=[1516,1517], pk__in=[74151 ,74147 ,74149]):
        for asig in materia.materiaasignada_set.filter(status=True, retiramateria=False, estado_id=3).order_by(
                'matricula__inscripcion__persona__apellido1', 'matricula__inscripcion__persona__apellido2',
                'matricula__inscripcion__persona__nombres'):
            asig.cierre_materia_asignada()
            print(asig)
        materia.cerrado = True
        materia.save()
        print(materia)
    print('fin')

def llenar_tabla_equivalencias():
    try:
        miarchivo = openpyxl.load_workbook("prueb 2.xlsx")
        lista = miarchivo.get_sheet_by_name('mallas admision')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 2:
                idasignaturamallaanterior = int(filas[6].value)
                idasignaturamallanueva=int(filas[0].value)
                if not TablaEquivalenciaAsignaturas.objects.filter(status=True,asignaturamalla_id=idasignaturamallaanterior).exists():
                    tablaeq=TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior,
                                                 asignaturamallasalto_id=idasignaturamallanueva)
                    tablaeq.save()
                    print(u"INSERTA EQUIVALENCIA %s"%tablaeq)
                else:
                    tablaeq=TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla_id=idasignaturamallaanterior)[0]
                    tablaeq.asignaturamallasalto_id=idasignaturamallanueva
                    tablaeq.save()
                    print(u"ACTUALIZA EQUIVALENCIA %s" % tablaeq)
                print(u"Fila %s"%a)
    except Exception as ex:
            print('error: %s' % ex)

# llenar_tabla_equivalencias()

@transaction.atomic()
def homologacion():
    try:
        response = HttpResponse(content_type="application/ms-excel")
        response['Content-Disposition'] = 'attachment; filename=reporte_homologacion_admision.xls'
        style0 = easyxf('font: name Times New Roman, color-index blue, bold off', num_format_str='#,##0.00')
        style_nb = easyxf('font: name Times New Roman, color-index blue, bold on', num_format_str='#,##0.00')
        style_sb = easyxf('font: name Times New Roman, color-index blue, bold on')
        title = easyxf('font: name Times New Roman, color-index blue, bold on , height 350; alignment: horiz centre')
        style1 = easyxf(num_format_str='D-MMM-YY')
        font_style = XFStyle()
        font_style.font.bold = True
        font_style2 = XFStyle()
        font_style2.font.bold = False
        wb = xlwt.Workbook()
        ws = wb.add_sheet('Sheetname')
        estilo = xlwt.easyxf('font: height 350, name Arial, colour_index black, bold on, italic on; align: wrap on, vert centre, horiz center;')
        ws.write_merge(0, 0, 0, 9, 'UNIVERSIDAD ESTATAL DE MILAGRO', estilo)
        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        nombre = "Lista" + datetime.now().strftime('%Y%m%d_%H%M%S') + ".xls"
        filename = os.path.join(output_folder, nombre)
        columns = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACI√ìN", 6000)
                   ]
        row_num = 3
        for col_num in range(len(columns)):
            ws.write(row_num, col_num, columns[col_num][0], font_style)
            ws.col(col_num).width = columns[col_num][1]
        row_num = 4

        idmatriculadosrepro=[]
        reprobadosadmision= Matricula.objects.filter(status=True, nivel__periodo_id=202, retiradomatricula=False, aprobado=False).order_by('inscripcion__persona__apellido1', 'inscripcion__persona__apellido2', 'inscripcion__persona__nombres')
        apruebahomologacion = False
        for reprobado in reprobadosadmision:
            matricular = True
            materiasasignadas= MateriaAsignada.objects.filter(status=True, estado=2, matricula=reprobado)
            for materiaasig in materiasasignadas:
                canthistoricorecord = HistoricoRecordAcademico.objects.filter(status=True, asignatura_id=materiaasig.materia.asignatura_id, aprobada=False, inscripcion=reprobado.inscripcion).count()
                if canthistoricorecord == 1 and matricular:
                    apruebahomologacion = True
                    # idmatriculadosrepro.append(reprobado.id)
                else:
                    apruebahomologacion = False
                    matricular = False
                    print('record reprobado', reprobado.inscripcion.persona.cedula)
            if apruebahomologacion and matricular:
                idmatriculadosrepro.append(reprobado.id)


        print(u"%s"%len(idmatriculadosrepro))
        cont=0
        for matricula in Matricula.objects.filter(status=True, pk__in=idmatriculadosrepro):
            cont += 1
            matricula.pasoayuda = True
            matricula.save()
            print(u"%s - %s" % (matricula, cont))
            inscripcion = matricula.inscripcion
            malla = matricula.inscripcion.mi_malla()
            # QUITAR
            if not malla.inicio.year == 2023:
                ws.write(row_num, 0, matricula.inscripcion.persona.identificacion())
                ws.write(row_num, 1, matricula.inscripcion.persona.nombre_completo())
                ws.write(row_num, 2, str(matricula.inscripcion.carrera))
                # FIN QUITAR
                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion).first()
                    mallaequivalente = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=malla).first()
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")
                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallaequivalente.asignaturamallasalto.malla.id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion,
                                               malla_id=mallaequivalente.asignaturamallasalto.malla.id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")
                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                            asignaturamalla__malla_id=malla).order_by(
                    'asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                           asignaturamalla_id=equivalencia.asignaturamalla_id,
                                                                           materiaregular__nivel__periodo_id=202).exclude(pk=3306798).first()
                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():
                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=recordantiguo.observaciones + " Homologaci√≥n con base a Memorando Nro. UNEMI-VICEACADFYG-2023-0155-MEM",
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)
                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[
                                0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = recordantiguo.observaciones + " con base a Memorando Nro. UNEMI-VICEACADFYG-2023-0155-MEM"
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()
                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(
                                recordacademico=recordnuevo)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                              recordacademicooriginal=recordantiguo)
                            if not respaldo:
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)
                        row_num += 1

                    else:
                        ws.write(row_num, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        row_num += 1
                time.sleep(3)
            else:
                print('malla 2023', matricula.inscripcion.persona.cedula)

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)

#
# homologacion()

# distributivos = ProfesorDistributivoHoras.objects.filter(status=True, periodo_id=177, coordinacion__id__in=[1, 2, 3 , 4, 5, 9])
# try:
#     for distributivo in distributivos:
#         detalle = distributivo.detalle_horas_docencia().filter(criteriodocenciaperiodo__criterio_id=118)
#         if detalle.values('id').exists():
#             detalle = distributivo.detalle_horas_docencia().get(criteriodocenciaperiodo__criterio_id=118)
#             detalle.criteriodocenciaperiodo_id= criterio nuevo
#
#             actividades = ActividadDetalleDistributivo.objects.filter(status=True, criterio=detalle )
#             for actividad in actividades:
#                 actividad.nombre = 'APOYO AL PROCESO DE ASIGNATURAS TRANSVERSALES'
#
#                 if str(actividad.desde) == '2023-05-01':
#                     actividad.desde ='2023-04-24'
#                     actividad.save()
#
#                     print('fecha de actividad distributivo actualizada', distributivo.profesor.persona.nombre_completo_minus(), actividad.nombre)
# except Exception as ex:
#     print(ex)


@transaction.atomic()
def enlaces_meet():
    try:
        miarchivo = openpyxl.load_workbook("docentes_enlaces_MEET.xlsx")
        lista = miarchivo.get_sheet_by_name('examenes_planificados')
        totallista = lista.rows
        a = 0
        for filas in totallista:
            a += 1
            if a > 1:
                ceduladocente = str(filas[1].value)
                if Profesor.objects.filter(status=True, persona__cedula=ceduladocente).exists():
                    docente = Profesor.objects.get(status=True, persona__cedula=ceduladocente)
                    docente.urlzoom = str(filas[7].value)
                    docente.save()
                    print('enlace actualizado', ceduladocente)
                else:
                    print('no se encontr√≥ docente', ceduladocente)

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)


# enlaces_meet()
# enlaces_meet()



def cerrar_materias_pregrado():
    for materia in Materia.objects.filter(status=True, nivel__periodo_id=153):
        for asig in materia.materiaasignada_set.filter(status=True, retiramateria=False, estado_id=3).order_by(
                'matricula__inscripcion__persona__apellido1', 'matricula__inscripcion__persona__apellido2',
                'matricula__inscripcion__persona__nombres'):
            asig.cierre_materia_asignada()
            print(asig)
        materia.cerrado = True
        materia.save()
        print(materia)
    print('fin')


# cerrar_materias_pregrado()


@transaction.atomic()
def desbloquear_matricula():
    try:
        cnmoodle = connections['moodle_db'].cursor()
        miarchivo = openpyxl.load_workbook("DESBLOQUEAR MATRICULA.xlsx")
        lista = miarchivo.get_sheet_by_name('LISTADO')
        totallista = lista.rows
        a = 0
        for filas in totallista:
            a += 1
            if a > 1:
                cedulaestudiante = str(filas[1].value)
                if Matricula.objects.filter(status=True, inscripcion__persona__cedula=cedulaestudiante, nivel__periodo_id=177).exists():
                    matricula = Matricula.objects.get(status=True, inscripcion__persona__cedula=cedulaestudiante, nivel__periodo_id=177)
                    materiasasignadas= MateriaAsignada.objects.filter(status=True, matricula=matricula)
                    for matasig in materiasasignadas:
                        if matasig.retiramateria:
                            matasig.retiramateria = False
                            matasig.save()

                    usermoodle = matricula.inscripcion.persona.usuario.username
                    matricula.bloqueomatricula = False
                    matricula.save()
                    print('Matricula desbloqueada -', matricula.inscripcion.persona.cedula)

                    if usermoodle:
                        sql = f"Select id, username From mooc_user Where username='{usermoodle}'"
                        cnmoodle.execute(sql)
                        registro = cnmoodle.fetchall()
                        # idusuario = registro[0][0]
                        try:
                            usermoodle = registro[0][1]
                            # Asignar estado suspended = 1 para que no pueda acceder al aula virtual
                            sql = f"Update mooc_user Set suspended=0 Where username='{usermoodle}'"
                            cnmoodle.execute(sql)
                        except Exception as ex:
                            print(f'********--------{usermoodle}--------********')


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)


def arreglar_cagada_tipomatricula():
    eMatriculas = Matricula.objects.filter(inscripcion__carrera_id__in=[136,137,132,18,58],status=True)
    total = len(eMatriculas.values("id"))
    print(f"{total}")
    contador = 0
    try:
        for eMatricula in eMatriculas:
            contador += 1
            itinerario = 0
            if not eMatricula.inscripcion.itinerario is None and eMatricula.inscripcion.itinerario > 0:
                itinerario = eMatricula.inscripcion.itinerario
            cantidad_seleccionadas = 0
            cursor = connections['default'].cursor()
            sql = "select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id=" + str(eMatricula.id) + " and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"
            if itinerario > 0:
                sql = "select am.nivelmalla_id, count(am.nivelmalla_id) as cantidad_materias_seleccionadas from sga_materiaasignada ma, sga_materia m, sga_asignaturamalla am where ma.status=true and ma.matricula_id=" + str(eMatricula.id) + " and m.status=true and m.id=ma.materia_id and am.status=true and am.id=m.asignaturamalla_id and (am.itinerario=0 or am.itinerario=" + str(itinerario) + ") GROUP by am.nivelmalla_id, am.malla_id order by count(am.nivelmalla_id) desc, am.nivelmalla_id desc limit 1;"
            cursor.execute(sql)
            results = cursor.fetchall()
            nivel = 0
            for per in results:
                nivel = per[0]
                cantidad_seleccionadas = per[1]
            cantidad_nivel = 0
            eAsignaturaMallas = AsignaturaMalla.objects.filter(nivelmalla__id=nivel, status=True, malla=eMatricula.inscripcion.mi_malla())
            if itinerario > 0:
                eAsignaturaMallas = eAsignaturaMallas.filter(Q(itinerario=0) | Q(itinerario=itinerario))

            for eAsignaturaMalla in eAsignaturaMallas:
                if Materia.objects.filter(nivel__periodo=eMatricula.nivel.periodo, asignaturamalla=eAsignaturaMalla).exists():
                    if eMatricula.inscripcion.estado_asignatura(eAsignaturaMalla.asignatura) != 1:
                        cantidad_nivel += 1

            porcentaje_seleccionadas = int(round(Decimal((float(cantidad_nivel) * float(PORCIENTO_PERDIDA_PARCIAL_GRATUIDAD)) / 100).quantize(Decimal('.00')), 0))
            if (cantidad_seleccionadas < porcentaje_seleccionadas):
                tipo_matricula_ri = 2
            else:
                tipo_matricula_ri = 1
            eMatricula.grupo_socio_economico(tipo_matricula_ri)
            print(f"({contador}/{total}) --> {eMatricula} (actualizado)")
    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)






def ADMMATRIZ():
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/matriculas_psicologia.xls'
        fuentecabecera = easyxf('font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf('font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('HOJA1')
        fil = 0
        columnas = [
            (u"CEDULA", 7000, 0),
            (u"NOMBRE", 7000, 1),
            (u"PRIMER_PERIODO", 7000, 2),
            # (u"INICIO_ESTUDIO", 7000, 2),
            # (u"ULTIMO_PERIODO", 7000, 3),
            # (u"RETIRADO", 7000, 4),
            # (u"EGRESADO", 7000, 4),
            # (u"GRADUADO", 7000, 4),
            # (u"CARRERA", 7000, 5),
            # (u"MODALIDAD", 7000, 5),
            # (u"NIVEL", 7000, 5),
            # (u"MATERIA_TITULACION", 7000, 5),
            # (u"REGULAR", 7000, 5),
            # (u"id_inscripcion", 7000, 5),
            # (u"id_matricula", 7000, 5),
            # (u"RETIRO_CARRERA", 7000, 5),
        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        qsmatriculas = Inscripcion.objects.filter( status=True, carrera_id__in=[136,137,132,18,58]).order_by('inscripcion__persona__apellido1')
        #qsmatriculas = Matricula.objects.filter(status=True, inscripcion__carrera_id__in=[136,137,132,58,18]).distinct('inscripcion__persona__cedula').order_by('inscripcion__persona__apellido1','nivel__periodo')
        fila = 1
        titulacion = 0
        for sm in qsmatriculas:
            if sm.perfil_inscripcion():
                persona = sm.persona
                inscripcion = sm
                if Matricula.objects.filter(status=True, inscripcion=inscripcion).exists():
                    matricula = Matricula.objects.filter(status=True, inscripcion=inscripcion).order_by('id')[0]

                    hojadestino.write(fila, 0, persona.cedula, fuentenormal)
                    hojadestino.write(fila, 1, f"{persona.apellido1} {persona.apellido2} {persona.nombres}", fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)
                    # hojadestino.write(fila, 2, inscripcion.fechainicioprimernivel, fuentenormal)
                    # hojadestino.write(fila, 3, matricula.nivel.periodo.nombre, fuentenormal)
                    # hojadestino.write(fila, 4, 'SI' if matricula.retiradomatricula else 'NO', fuentenormal)
                    # hojadestino.write(fila, 5, 'SI' if inscripcion.egresado() else 'NO', fuentenormal)
                    # hojadestino.write(fila, 6, 'SI' if inscripcion.es_graduado() else 'NO', fuentenormal)
                    # hojadestino.write(fila, 7, inscripcion.carrera.nombre if inscripcion.carrera else '', fuentenormal)
                    # hojadestino.write(fila, 8, inscripcion.modalidad.nombre if inscripcion.modalidad else '', fuentenormal)
                    # hojadestino.write(fila, 9, matricula.nivelmalla.nombre if matricula.nivelmalla else '', fuentenormal)
                    # if matricula.nivel.periodo.id == 177:
                    #     materias = MateriaAsignada.objects.filter(status=True, matricula=matricula, materia__nivel__periodo_id=177)
                    #     for matasig in materias:
                    #         if matasig.materia.modeloevaluativo_id == 25 or matasig.materia.modeloevaluativo_id == 26:
                    #             titulacion = 1
                    # hojadestino.write(fila, 10, 'SI' if titulacion == 1 else 'NO', fuentenormal)
                    # hojadestino.write(fila, 11, matricula.tipomatriculalumno() , fuentenormal)
                    # hojadestino.write(fila, 12, sm.id , fuentenormal)
                    # hojadestino.write(fila, 13, matricula.id , fuentenormal)
                    # hojadestino.write(fila, 14,'SI' if inscripcion.retiro_carrera() else 'NO' , fuentenormal)
                    fila += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        msg = ex.__str__()

        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)
        print(msg)


#ADMMATRIZ()

#arreglar_cagada_tipomatricula()

def arreglo_actas():
    graduados = Graduado.objects.filter(status=True, inscripcion__carrera_id=151)
    total = Graduado.objects.filter(status=True, inscripcion__carrera_id=151).count()
    cont = 1
    for graduado in graduados:
        malla = graduado.inscripcion.malla_inscripcion().malla
        graduado.horastitulacion = malla.horas_titulacion
        graduado.creditotitulacion = malla.creditos_titulacion
        graduado.creditovinculacion = malla.creditos_vinculacion
        graduado.creditopracticas = malla.creditos_practicas
        graduado.save()
        print('graduado actualizado', cont,  'de', total )
        cont +=1
    print('FIN')

# arreglo_actas()

def subir_bitacora_personal_22():
    archivo_ = 'actividades_llerena'
    # archivo_ = 'PLANTILLA_INSTITUCION_MJRV_CNE ELECCIONES_SECCIONALES_CPCCS_2023'
    # url_archivo = "{}/{}.xlsx".format(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), archivo_)
    url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)
    wb = openpyxl.load_workbook(filename=url_archivo)
    ws = wb.get_sheet_by_name("Hoja3")
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    worksheet = ws
    lis_excluidos = []
    print('Iniciando....')
    linea_archivo = 1
    col_fecha = 0
    col_hora = 1
    col_titulo = 2
    col_actividad = 3
    col_py_afectados = 4
    departamento = Departamento.objects.get(pk=93)
    persona = Persona.objects.get(pk=29898)
    for row in worksheet.iter_rows(min_row=0):
        if linea > 1:
            currentValues, cadena = [], ''
            for cell in row:
                cadena += str(cell.value) + ' '
                currentValues.append(str(cell.value))
            print(currentValues)
            f = convertir_fecha_hora_invertida(f'{currentValues[0].split()[0]} {currentValues[1]}')
            with transaction.atomic():
                try:
                    if not BitacoraActividadDiaria.objects.filter(fecha=f).exists():
                        eBitacoraActividadDiaria = BitacoraActividadDiaria(titulo=currentValues[2],
                                                                           departamento=departamento,
                                                                           fecha=f,
                                                                           persona=persona,
                                                                           descripcion=f"{currentValues[3]} en los archivos: {currentValues[4]}",
                                                                           tiposistema=2)
                        eBitacoraActividadDiaria.save(usuario_id=persona.usuario.id)
                        print(f"Se guardo registro de fecha {eBitacoraActividadDiaria.fecha.__str__()}")
                except Exception as ex:
                    transaction.set_rollback(True)
                    print(f"No se guardo registro de fecha {f.__str__()}")
        linea += 1

# subir_bitacora_personal_22()

def reporte_balcon():
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/solicitudes_balcon.xls'
        fuentecabecera = easyxf('font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf('font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('HOJA1')
        fil = 0
        columnas = [
            (u"FECHA", 7000, 0),
            (u"TIPO_USUARIO", 7000, 1),
            (u"ASIGNADO A", 7000, 2),
            (u"ESTADO", 7000, 2),

        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        solicitudes = Solicitud.objects.filter(status=True, fecha_creacion__gte='2023-01-01').order_by('fecha_creacion')
        fila = 1
        titulacion = 0
        for sm in solicitudes:
            historial = sm.traer_ultimo_con_departamento()
            if historial:
                if historial.departamento_id == 149 or historial.departamento_id == 186:
                    fecha = str(sm.fecha_creacion.date())
                    tipousuario = str(sm.perfil)
                    asignado = historial.asignadorecibe.nombre_completo_inverso()
                    estado = str(sm.get_estado())
                    hojadestino.write(fila, 0, fecha, fuentenormal)
                    hojadestino.write(fila, 1, tipousuario, fuentenormal)
                    hojadestino.write(fila, 2, asignado, fuentenormal)
                    hojadestino.write(fila, 3, estado, fuentenormal)

                    fila += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        msg = ex.__str__()

        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)
        print(msg)

def reporte_practicas():
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/estudiantes_sin_practicas.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        # output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('HOJA1')
        fil = 0
        columnas = [
            (u"CARRERA", 7000, 0),
            (u"ESTUDIANTE", 7000, 0),
            (u"CEDULA", 7000, 1),
            (u"NIVEL", 7000, 1),
            (u"CELULAR", 7000, 1),
            (u"CORREO", 7000, 2),
            (u"PAIS_RESIDENCIA", 7000, 2),
            (u"CANTON", 7000, 2),
            (u"DIRECCION", 7000, 2),
            (u"PROMEDIO", 7000, 2),

        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        matriculas = Matricula.objects.filter(status=True, nivel__periodo__id=177, nivelmalla__id__gte=5, retiradomatricula=False, bloqueomatricula=False)
        practicas = PracticasPreprofesionalesInscripcion.objects.values_list('inscripcion_id',flat=True ).filter(status=True, tipo=1)
        estudiantesinppp = matriculas.exclude(inscripcion__id__in=practicas)
        fila = 1

        for estudiante in estudiantesinppp:
            carrera = estudiante.inscripcion.carrera.nombre
            nombre = estudiante.inscripcion.persona.nombre_completo_inverso()
            cedula = estudiante.inscripcion.persona.cedula
            nivel = estudiante.nivelmalla.nombre if estudiante.nivelmalla else ''
            celular = estudiante.inscripcion.persona.telefono if estudiante.inscripcion.persona.telefono else ''
            correo = estudiante.inscripcion.persona.emailinst if estudiante.inscripcion.persona.emailinst else ''
            pais = estudiante.inscripcion.persona.pais.nombre if estudiante.inscripcion.persona.pais else ''
            canton = estudiante.inscripcion.persona.canton.nombre if estudiante.inscripcion.persona.canton else ''
            direccion = estudiante.inscripcion.persona.direccion_corta()
            promedio = str(estudiante.inscripcion.promedio_record())


            hojadestino.write(fila, 0, carrera, fuentenormal)
            hojadestino.write(fila, 1, nombre, fuentenormal)
            hojadestino.write(fila, 2, cedula, fuentenormal)
            hojadestino.write(fila, 3, nivel, fuentenormal)
            hojadestino.write(fila, 4, celular, fuentenormal)
            hojadestino.write(fila, 5, correo, fuentenormal)
            hojadestino.write(fila, 6, pais, fuentenormal)
            hojadestino.write(fila, 7, canton, fuentenormal)
            hojadestino.write(fila, 8, direccion, fuentenormal)
            hojadestino.write(fila, 9, promedio, fuentenormal)

            fila += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        msg = ex.__str__()

        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)
        print(msg)

#reporte_practicas()

def reporte_informemensual():
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/informe_mensual.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        # output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('HOJA1')
        fil = 0
        columnas = [
            (u"CEDULA", 7000, 1),
            (u"PROFESOR", 7000, 0),
            (u"INFORME", 7000, 0),
            (u"ESTADO", 7000, 1),


        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        docentes = ProfesorDistributivoHoras.objects.filter(status=True, periodo_id=177, profesor__persona__cedula__in=[
            '0909678815',
            '0928367630',
            '1204870834',
            '1207104249',
            '1804138475',
            '1803254935',
            '1803244696',
            '1758498362',
            '1754821914',
            '1723698831',
            '1720484391',
            '1719618793',
            '1315438356',
            '1312870593',
            '1312587569',
            '1311638710',
            '1301784060',
            '1207578152',
            '1205907130',
            '1205719923',
            '1204805608',
            '1203728850',
            '1203570724',
            '1203404643',
            '1203251010',
            '1203238132',
            '1203237589',
            '1202526131',
            '1202525505',
            '1202517189',
            '1202447684',
            '1201858972',
            '1201598958',
            '1201510441',
            '1105868150',
            '1104099203',
            '1103109722',
            '1102372800',
            '1002588257',
            '0960298784',
            '0958178337',
            '0942096108',
            '0941539090',
            '0940816275',
            '0940721251',
            '0940482367',
            '0931396956',
            '0931107114',
            '0931025084',
            '0930529102',
            '0930385836',
            '0929835312',
            '0929135762',
            '0928735109',
            '0928732437',
            '0928479864',
            '0928471846',
            '0928429745',
            '0928368059',
            '0928101765',
            '0927997767',
            '0927997130',
            '0927640805',
            '0927575498',
            '0927247197',
            '0927156729',
            '0926477142',
            '0926301326',
            '0926300849',
            '0926270075',
            '0925227670',
            '0925155780',
            '0924954837',
            '0924229453',
            '0924185440',
            '0923369748',
            '0922983572',
            '0922981147',
            '0922980545',
            '0922878145',
            '0922566914',
            '0922518683',
            '0922335286',
            '0922148812',
            '0921148326',
            '0921014718',
            '0920993565',
            '0920466109',
            '0920345238',
            '0920344751',
            '0920254331',
            '0919878678',
            '0919625301',
            '0919611897',
            '0919610451',
            '0919305656',
            '0918850942',
            '0918694605',
            '0918306507',
            '0918306333',
            '0918303496',
            '0918227265',
            '0918089848',
            '0918081712',
            '0917926685',
            '0917629933',
            '0917537318',
            '0917443020',
            '0917440521',
            '0917223430',
            '0917222218',
            '0917194359',
            '0916866742',
            '0916699424',
            '0916694011',
            '0916691900',
            '0916533417',
            '0916396054',
            '0916369887',
            '0916302730',
            '0916003619',
            '0915862544',
            '0914764394',
            '0914740568',
            '0914251244',
            '0914080023',
            '0914078340',
            '0913822540',
            '0913527800',
            '0913439543',
            '0913136693',
            '0913115549',
            '0913059812',
            '0912943032',
            '0912652252',
            '0912475217',
            '0911855807',
            '0911786689',
            '0911608040',
            '0911464931',
            '0910982099',
            '0910721117',
            '0909778698',
            '0909734667',
            '0909383739',
            '0907909600',
            '0906660212',
            '0906161120',
            '0704304450',
            '0702959297',
            '0702552142',
            '0605110766',
            '0604011361',
            '0603001645',
            '0602755100',
            '0601552532',
            '0601290331',
            '0401591441',
            '0202104188',
            '0201968666',
            '0104118401'

        ])

        fila = 1

        for docente in docentes:
            informe = 'NO'
            estadoinforme = 'NO'
            if InformeMensualDocente.objects.filter(status=True, distributivo__periodo__id=177, fechafin__month=6,
                                                    distributivo=docente).exists():
                informedocente = InformeMensualDocente.objects.get(status=True, distributivo__periodo__id=177, fechafin__month=6,
                                                    distributivo=docente)
                estadoinforme = informedocente.estado
                informe = 'SI'


            hojadestino.write(fila, 0, docente.profesor.persona.cedula, fuentenormal)
            hojadestino.write(fila, 1, docente.profesor.persona.nombre_completo_inverso(), fuentenormal)
            hojadestino.write(fila, 2, informe, fuentenormal)
            hojadestino.write(fila, 3, estadoinforme, fuentenormal)


            fila += 1



        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        msg = ex.__str__()

        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)
        print(msg)

def actualizar_moodle():
    try:
        libre_origen = '/cursos_moodle.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        # output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('HOJA1')
        fil = 0
        columnas = [
            (u"materia_id", 7000, 1),
            (u"idcursomoodle", 7000, 1),
            (u"configurar_seccion", 7000, 0),

        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        conexion = connections['db_moodle_virtual']
        cursor = conexion.cursor()

        materias = Materia.objects.filter(status=True, nivel__periodo__id=177, nivel__id__in=[1481, 1482]).exclude(paralelomateria_id=2)
        totalmaterias = Materia.objects.filter(status=True, nivel__periodo__id=177, nivel__id__in=[1481, 1482]).count()
        cont = 1
        fila = 1
        for materia in materias:
            c = 'NO'
            idmateria = materia.id
            idcurso = materia.idcursomoodle
            materia.actualizarhtml = True
            materia.save()



            q1 = """ SELECT s.id FROM mooc_course_sections s  WHERE s.section='12' AND s.course=%s""" % (idcurso)
            cursor.execute(q1)
            buscar = cursor.fetchall()
            if not buscar:
                c = 'SI'
            else:
                section = buscar[0][0]


                q2 =  f""" SELECT * FROM mooc_quiz q WHERE q.id in (SELECT cm.instance FROM mooc_course_modules cm WHERE cm.module=18 and  cm.section =(SELECT s.id FROM mooc_course_sections s WHERE s.course={idcurso} AND s.section=4)) AND (q.name ILIKE '%EXAMEN%' or q.name ILIKE '%EX√ÅMEN%') """
                cursor.execute(q2)
                idquiz = cursor.fetchall()
                # idquiz = buscar[0][0]

                for quiz in idquiz:
                    q3 = """ SELECT cm.id  FROM mooc_course_modules cm  WHERE cm.module=18 and cm.INSTANCE=%s AND cm.course=%s """ % (quiz[0], idcurso)
                    cursor.execute(q3)
                    buscar = cursor.fetchall()
                    id_course_module = buscar[0][0]

                    sql = """ UPDATE mooc_course_modules SET SECTION=%s WHERE id in(%s) """ % (section, id_course_module)
                    cursor.execute(sql)


                q4 =  """ UPDATE mooc_course_sections SET SEQUENCE=(SELECT array_to_string(array_agg(id),',') FROM mooc_course_modules mo WHERE deletioninprogress=0 AND course=%s AND SECTION=(SELECT s.id FROM mooc_course_sections s WHERE s.course=mo.course AND s.section=12)) WHERE course=%s AND section=12 """ % (idcurso, idcurso)
                cursor.execute(q4)
                q5 =  """ UPDATE mooc_course_sections SET SEQUENCE=(SELECT array_to_string(array_agg(id),',') FROM mooc_course_modules mo WHERE deletioninprogress=0 AND course=%s AND SECTION=(SELECT s.id FROM mooc_course_sections s WHERE s.course=mo.course AND s.section=4)) WHERE course=%s AND section=4 """ % (idcurso, idcurso)
                cursor.execute(q5)

                fechat = int(time.mktime(datetime.now().timetuple()))
                sql = u"UPDATE mooc_course SET cacherev = %s WHERE id = %s" % (fechat, idcurso)
                cursor.execute(sql)

                print('curso actualizado', cont, 'de', totalmaterias)
                cont += 1

            hojadestino.write(fila, 0, idmateria, fuentenormal)
            hojadestino.write(fila, 1, idcurso, fuentenormal)
            hojadestino.write(fila, 2, c, fuentenormal)


            fila += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        msg = ex.__str__()

        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)
        print(msg)

#actualizar_moodle()


def actualizar_materias():
    materias = MateriaAsignada.objects.filter(status=True, materia__nivel__periodo__id=177, materia__asignaturamalla__malla__carrera__coordinacion__id__in=[1,2,3,4,5], materia__asignaturamalla__malla__carrera_id__in=[131,126,128,135,127] )
    total = materias.count()
    cont = 1
    for materia in materias:
        materia.visiblehorarioexamen = True
        materia.save()
        print('actualizado', cont, 'de', total)
        cont += 1
    print('FIN')

# actualizar_materias()


def test_nivelacion():
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/reporte_test.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        # output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('HOJA1')
        fil = 0
        columnas = [
            (u"CEDULA", 7000, 1),
            (u"MATERIA", 7000, 0),
            (u"PARALELO", 7000, 0),
            (u"CURSOMOODLE", 7000, 0),

        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        tests = TestSilaboSemanalAdmision.objects.filter(status=False, estado_id=4, detallemodelo_id=114, idtestmoodle__gt=0 ).distinct('silabosemanal__silabo__materia_id')

        fila = 1

        for test in tests:
            cedula = test.silabosemanal.silabo.profesor
            materia = test.silabosemanal.silabo.materia.asignatura.nombre
            paralelo = test.silabosemanal.silabo.materia.paralelomateria.nombre
            cursomoodle = test.idtestmoodle

            hojadestino.write(fila, 0, cedula, fuentenormal)
            hojadestino.write(fila, 1, materia, fuentenormal)
            hojadestino.write(fila, 2, paralelo, fuentenormal)
            hojadestino.write(fila, 3, cursomoodle, fuentenormal)

            fila += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        msg = ex.__str__()

        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)
        print(msg)


def revisar_moodle():
    try:
        libre_origen = '/examen_moodle.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        # output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('HOJA1')
        fil = 0
        columnas = [
            (u"materia_id", 7000, 1),
            (u"nombre_materia", 7000, 1),
            (u"paralelo", 7000, 1),
            (u"profesor", 7000, 1),
            (u"idcursomoodle", 7000, 1),
            (u"tiene_examenes", 7000, 0),
            (u"num_examenes", 7000, 0),

        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        conexion = connections['db_moodle_virtual']
        cursor = conexion.cursor()

        materias = Materia.objects.filter(status=True, nivel__periodo__id=177, nivel__id__in=[1481, 1482]).exclude(paralelomateria_id=2)
        totalmaterias = materias.count()
        cont = 1
        fila = 1
        for materia in materias:
            c = 'NO'
            profesor = 'sin profesor'
            idmateria = materia.id
            materianombre = materia.asignatura.nombre
            paralelo = materia.paralelo
            idcurso = materia.idcursomoodle
            pm = materia.profesormateria_set.filter(status=True).last()
            if pm:
                profesor = pm.profesor.persona.nombre_completo_inverso()
            tiene_examen = 'NO'
            num_examen = 0



            q1 = """ SELECT s.id FROM mooc_course_sections s  WHERE s.section='12' AND s.course=%s""" % (idcurso)
            cursor.execute(q1)
            buscar = cursor.fetchall()
            if not buscar:
                c = 'SI'
            else:
                section = buscar[0][0]


                q2 =  f""" SELECT * FROM mooc_quiz q WHERE q.id in (SELECT cm.instance FROM mooc_course_modules cm WHERE cm.module=18 and  cm.section =(SELECT s.id FROM mooc_course_sections s WHERE s.course={idcurso} AND s.section=12)) AND (q.name ILIKE '%EXAMEN%' or q.name ILIKE '%EX√ÅMEN%') """
                cursor.execute(q2)
                idquiz = cursor.fetchall()
                # idquiz = buscar[0][0]

                if idquiz:
                    tiene_examen = 'SI'

                for quiz in idquiz:
                    num_examen += 1


                print('curso revisado', cont, 'de', totalmaterias)
                cont += 1

            hojadestino.write(fila, 0, idmateria, fuentenormal)
            hojadestino.write(fila, 1, materianombre, fuentenormal)
            hojadestino.write(fila, 2, paralelo, fuentenormal)
            hojadestino.write(fila, 3, profesor, fuentenormal)
            hojadestino.write(fila, 4, idcurso, fuentenormal)
            hojadestino.write(fila, 5, tiene_examen, fuentenormal)
            hojadestino.write(fila, 6, num_examen, fuentenormal)


            fila += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        msg = ex.__str__()

        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)
        print(msg)

def revision_cuestionario():
    try:
        libre_origen = '/cuestionario_moodle.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        # output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('HOJA1')
        fil = 0
        columnas = [
            (u"materia_id", 7000, 1),
            (u"nombre_materia", 7000, 1),
            (u"paralelo", 7000, 1),
            (u"profesor", 7000, 1),
            (u"idcursomoodle", 7000, 1),
            (u"tiene_examenes", 7000, 0),
            (u"num_preguntas", 7000, 0),

        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        conexion = connections['db_moodle_virtual']
        cursor = conexion.cursor()

        materias = Materia.objects.filter(status=True, nivel__periodo__id=177, nivel__id__in=[1481, 1482]).exclude(paralelomateria_id=2)
        totalmaterias = materias.count()
        cont = 1
        fila = 1
        for materia in materias:
            c = 'NO'
            profesor = 'sin profesor'
            idmateria = materia.id
            materianombre = materia.asignatura.nombre
            paralelo = materia.paralelo
            idcurso = materia.idcursomoodle
            pm = materia.profesormateria_set.filter(status=True).last()
            if pm:
                profesor = pm.profesor.persona.nombre_completo_inverso()
            tiene_examen = 'NO'
            num_preguntas = 0



            q1 = """ SELECT s.id FROM mooc_course_sections s  WHERE s.section='12' AND s.course=%s""" % (idcurso)
            cursor.execute(q1)
            buscar = cursor.fetchall()
            if not buscar:
                c = 'SI'
            else:
                section = buscar[0][0]


                q2 =  f""" SELECT q.id FROM mooc_quiz q WHERE q.id in (SELECT cm.instance FROM mooc_course_modules cm WHERE cm.module=18 and  cm.section =(SELECT s.id FROM mooc_course_sections s WHERE s.course={idcurso} AND s.section=12)) AND (q.name ILIKE '%EXAMEN%' or q.name ILIKE '%EX√ÅMEN%' or q.name ILIKE '%EX%') """
                cursor.execute(q2)
                idquiz = cursor.fetchall()
                # idquiz = buscar[0][0]

                if idquiz:
                    tiene_examen = 'SI'

                    for quiz in idquiz:
                        q3 = """  SELECT DISTINCT  qet.name, qet.questiontext, re.answer, re.answerformat FROM mooc_quiz q INNER JOIN mooc_quiz_slots qe ON q.id=qe.quizid INNER JOIN mooc_question qet ON qet.category=qe.questioncategoryid INNER JOIN mooc_question_answers re ON re.question=qet.id WHERE re.fraction>0 AND q.id=%s  """ % (quiz)
                        cursor.execute(q3)
                        preguntas = cursor.fetchall()

                        for pregunta in preguntas:
                            num_preguntas += 1


                print('curso revisado', cont, 'de', totalmaterias)
                cont += 1

            hojadestino.write(fila, 0, idmateria, fuentenormal)
            hojadestino.write(fila, 1, materianombre, fuentenormal)
            hojadestino.write(fila, 2, paralelo, fuentenormal)
            hojadestino.write(fila, 3, profesor, fuentenormal)
            hojadestino.write(fila, 4, idcurso, fuentenormal)
            hojadestino.write(fila, 5, tiene_examen, fuentenormal)
            hojadestino.write(fila, 6, num_preguntas, fuentenormal)


            fila += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        msg = ex.__str__()

        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)
        print(msg)


def actualizar_nivel_matricula():
    print(u"****************************************************************************************************")
    matriculas = Matricula.objects.filter(nivel__periodo_id=177, retiradomatricula=False, status=True)

    total = matriculas.count()
    print(u"****************************************************************************************************")
    print(u"****************************************************************************************************")
    print(u"** Total: %s" % total)
    print(u"****************************************************************************************************")
    count = 1
    for matricula in matriculas:
        matricula.calcula_nivel()
        print(matricula)
        print(u"*** %s de %s" % (count, total))
        count += 1
    print(u"****************************************************************************************************")
    print(u"****************************************************************************************************")
    print(f"** Finaliza proceso de actualizar nivel de matricula")


def reporte_examen_pregrado():
    try:
        libre_origen = '/reporte_examen_moodle_2.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        # output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('HOJA1')
        fil = 0
        columnas = [
            (u"facultad", 7000, 1),
            (u"carrera", 7000, 1),
            (u"nivel", 7000, 0),
            (u"paralelo", 7000, 0),
            (u"asignatura", 7000, 0),
            (u"docente", 7000, 0),
            (u"idmateria", 7000, 0),
            (u"idcursomoodle", 7000, 0),
            (u"examen_creado_sga", 7000, 0),
            (u"migrado_moodle", 7000, 0),
            (u"examen_creado_moodle", 7000, 0),
            (u"num_examenes", 7000, 0),
            (u"num_preguntas", 7000, 0),
            (u"tiempo_examen", 7000, 0),
            (u"examen_en_otra_seccion", 7000, 0),
            (u"modelo_evaluativo", 7000, 0),

        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        conexion = connections['moodle_db']
        cursor = conexion.cursor()

        materias = Materia.objects.filter(status=True, nivel__periodo__id=177, asignaturamalla__malla__carrera__modalidad=3).exclude(nivel__id__in=[1481, 1482, 1501, 1508])

        totalmaterias = materias.count()
        cont = 1
        fila = 1
        for materia in materias:
            facultad = materia.coordinacion()
            carrera = materia.asignaturamalla.malla.carrera
            nivel = materia.asignaturamalla.nivelmalla
            paralelo = materia.paralelo
            asignatura = materia.asignaturamalla.asignatura.nombre
            profesor = 'sin profesor'
            pm = materia.profesormateria_set.filter(status=True, tipoprofesor_id=14).last()
            if pm:
                profesor = pm.profesor.persona.nombre_completo_inverso()
            idmateria = materia.id
            idcurso = materia.idcursomoodle
            tiene_examen_sga= 'NO'
            migrado_moodle= 'NO'
            tiene_examen_moodle = 'NO'
            num_examenes = 0
            num_preguntas = 0
            tiempo_examen = 0
            examen_otra_seccion = 'NO'
            modeloevaluativo = 'SIN MODELO'
            if materia.modeloevaluativo:
                modeloevaluativo = materia.modeloevaluativo.nombre

            # silabosemanal= SilaboSemanal.objects.filter(status=True, silabo__materia_id=idmateria, examen=True)
            # if silabosemanal:
            #if TestSilaboSemanal.objects.filter(status=True, silabosemanal__silabo__materia_id=idmateria, silabosemanal__examen=True ).exists():
            examenessga = TestSilaboSemanal.objects.filter(status=True, silabosemanal__silabo__materia_id=idmateria, silabosemanal__examen=True )
            for examensga in examenessga:
                tiene_examen_sga = 'SI'
                if examensga.estado_id == 4:
                    migrado_moodle = 'SI'
                    instance = examensga.idtestmoodle

                    q1 = """ SELECT cm.instance  FROM mooc_course_modules cm  WHERE cm.module=17 and cm.INSTANCE=%s AND cm.course=%s AND cm.section =(SELECT s.id FROM mooc_course_sections s WHERE s.course=%s AND s.section=12)  """ % (instance, idcurso, idcurso)
                    cursor.execute(q1)
                    buscar = cursor.fetchall()

                    if buscar:
                        id_course_module = buscar[0][0]

                        q2 = f""" SELECT q.id FROM mooc_quiz q WHERE q.id in ({id_course_module}) AND (q.name ILIKE '%EXAMEN%' or q.name ILIKE '%EX√ÅMEN%' or q.name ILIKE '%EX%') """
                        cursor.execute(q2)
                        idquiz = cursor.fetchall()
                        # idquiz = buscar[0][0]

                        if idquiz:
                            tiene_examen_moodle = 'SI'

                            for quiz in idquiz:
                                num_examenes += 1
                                q3 = """  SELECT DISTINCT  qet.name, qet.questiontext, re.answer, re.answerformat FROM mooc_quiz q INNER JOIN mooc_quiz_slots qe ON q.id=qe.quizid INNER JOIN mooc_question qet ON qet.category=qe.questioncategoryid INNER JOIN mooc_question_answers re ON re.question=qet.id WHERE re.fraction>0 AND q.id=%s  """ % (
                                    quiz)
                                cursor.execute(q3)
                                preguntas = cursor.fetchall()

                                q5 = """  SELECT DISTINCT  q.timelimit FROM mooc_quiz q  WHERE  q.id=%s  """ % (quiz)
                                cursor.execute(q5)
                                tmp = cursor.fetchall()
                                tiempo = tmp[0][0]
                                if tiempo > 60:
                                    tiempo_examen = int(tiempo)/60




                                for pregunta in preguntas:
                                    num_preguntas += 1

                                q4 =  """  SELECT qet.name, qet.questiontext, re.answer, re.answerformat FROM mooc_quiz q INNER JOIN mooc_quiz_slots qe ON q.id=qe.quizid INNER JOIN mooc_question qet ON qet.id=qe.questionid INNER JOIN mooc_question_answers re ON re.question=qet.id WHERE  q.id=%s  """ % (quiz)
                                cursor.execute(q4)
                                preguntasds = cursor.fetchall()

                                for preg in preguntasds:
                                    num_preguntas += 1

                    q6= """ SELECT cm.instance  FROM mooc_course_modules cm  WHERE cm.module=17 and cm.INSTANCE=%s AND cm.course=%s AND cm.section =(SELECT s.id FROM mooc_course_sections s WHERE s.course=%s AND not s.section=12)  """ % (instance, idcurso, idcurso)
                    cursor.execute(q1)
                    buscar = cursor.fetchall()

                    for bus in buscar:
                        q2 = f""" SELECT q.id FROM mooc_quiz q WHERE q.id={bus[0]} AND (q.name ILIKE '%EXAMEN%' or q.name ILIKE '%EX√ÅMEN%' or q.name ILIKE '%EXAM%') """
                        cursor.execute(q2)
                        idquiz2 = cursor.fetchall()

                        if idquiz2:
                            examen_otra_seccion = 'SI'


                # fechat = int(time.mktime(datetime.now().timetuple()))
                # sql = u"UPDATE mooc_course SET cacherev = %s WHERE id = %s" % (fechat, idcurso)
                # cursor.execute(sql)

            print('curso actualizado', cont, 'de', totalmaterias)
            cont += 1

            hojadestino.write(fila, 0, "%s" % facultad, fuentenormal)
            hojadestino.write(fila, 1, "%s" % carrera, fuentenormal)
            hojadestino.write(fila, 2, "%s" % nivel, fuentenormal)
            hojadestino.write(fila, 3, "%s" % paralelo, fuentenormal)
            hojadestino.write(fila, 4, "%s" % asignatura, fuentenormal)
            hojadestino.write(fila, 5, "%s" % profesor, fuentenormal)
            hojadestino.write(fila, 6, idmateria, fuentenormal)
            hojadestino.write(fila, 7, idcurso, fuentenormal)
            hojadestino.write(fila, 8, tiene_examen_sga, fuentenormal)
            hojadestino.write(fila, 9, migrado_moodle, fuentenormal)
            hojadestino.write(fila, 10, tiene_examen_moodle, fuentenormal)
            hojadestino.write(fila, 11, num_examenes, fuentenormal)
            hojadestino.write(fila, 12, num_preguntas, fuentenormal)
            # hojadestino.write(fila, 13, tiempoexamen, fuentenormal)
            hojadestino.write(fila, 14, examen_otra_seccion, fuentenormal)
            hojadestino.write(fila, 15, modeloevaluativo, fuentenormal)


            fila += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        msg = ex.__str__()

        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)
        print(msg)

#reporte_examen_pregrado()

def reporte_examen_pregrado_presencial():
    try:
        libre_origen = '/reporte_examen_moodle_presencial_2.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        # output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('HOJA1')
        fil = 0
        columnas = [
            (u"facultad", 7000, 1),
            (u"carrera", 7000, 1),
            (u"nivel", 7000, 0),
            (u"paralelo", 7000, 0),
            (u"asignatura", 7000, 0),
            (u"modalidad", 7000, 0),
            (u"docente", 7000, 0),
            (u"idmateria", 7000, 0),
            (u"idcursomoodle", 7000, 0),
            (u"examen_creado_sga", 7000, 0),
            (u"migrado_moodle", 7000, 0),
            (u"examen_creado_moodle", 7000, 0),
            (u"num_examenes", 7000, 0),
            (u"num_preguntas", 7000, 0),
            (u"tiempo_examen", 7000, 0),
            (u"examen_en_otra_seccion", 7000, 0),
            (u"modelo_evaluativo", 7000, 0),

        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]

        conexion = connections['moodle_db']
        cursor = conexion.cursor()

        materias = Materia.objects.filter(status=True, nivel__periodo__id=177, asignaturamalla__malla__carrera__modalidad__in=[1,2,4]).exclude(nivel__id__in=[1481, 1482, 1501, 1508])

        totalmaterias = materias.count()
        cont = 1
        fila = 1
        for materia in materias:
            facultad = materia.coordinacion()
            carrera = materia.asignaturamalla.malla.carrera
            nivel = materia.asignaturamalla.nivelmalla
            paralelo = materia.paralelo
            asignatura = materia.asignaturamalla.asignatura.nombre
            modalidad = materia.asignaturamalla.malla.carrera.modalidad
            profesor = 'sin profesor'
            pm = materia.profesormateria_set.filter(status=True, tipoprofesor_id=14).last()
            if pm:
                profesor = pm.profesor.persona.nombre_completo_inverso()
            idmateria = materia.id
            idcurso = materia.idcursomoodle
            tiene_examen_sga= 'NO'
            migrado_moodle= 'NO'
            tiene_examen_moodle = 'NO'
            num_examenes = 0
            num_preguntas = 0
            tiempo_examen = 0
            examen_otra_seccion = 'NO'
            modeloevaluativo = 'SIN MODELO'
            if materia.modeloevaluativo:
                modeloevaluativo = materia.modeloevaluativo.nombre

            # silabosemanal= SilaboSemanal.objects.filter(status=True, silabo__materia_id=idmateria, examen=True)
            # if silabosemanal:
            #if TestSilaboSemanal.objects.filter(status=True, silabosemanal__silabo__materia_id=idmateria, silabosemanal__examen=True ).exists():
            examenessga = TestSilaboSemanal.objects.filter(status=True, silabosemanal__silabo__materia_id=idmateria, silabosemanal__examen=True )
            for examensga in examenessga:
                tiene_examen_sga = 'SI'
                if examensga.estado_id == 4:
                    migrado_moodle = 'SI'
                    instance = examensga.idtestmoodle

                    q1 = """ SELECT cm.instance  FROM mooc_course_modules cm  WHERE cm.module=17 and cm.INSTANCE=%s AND cm.course=%s AND cm.section =(SELECT s.id FROM mooc_course_sections s WHERE s.course=%s AND s.section=12)  """ % (instance, idcurso, idcurso)
                    cursor.execute(q1)
                    buscar = cursor.fetchall()

                    if buscar:
                        id_course_module = buscar[0][0]

                        q2 = f""" SELECT q.id FROM mooc_quiz q WHERE q.id in ({id_course_module}) AND (q.name ILIKE '%EXAMEN%' or q.name ILIKE '%EX√ÅMEN%' or q.name ILIKE '%EX%') """
                        cursor.execute(q2)
                        idquiz = cursor.fetchall()
                        # idquiz = buscar[0][0]

                        if idquiz:
                            tiene_examen_moodle = 'SI'

                            for quiz in idquiz:
                                num_examenes += 1
                                q3 = """  SELECT DISTINCT  qet.name, qet.questiontext, re.answer, re.answerformat FROM mooc_quiz q INNER JOIN mooc_quiz_slots qe ON q.id=qe.quizid INNER JOIN mooc_question qet ON qet.category=qe.questioncategoryid INNER JOIN mooc_question_answers re ON re.question=qet.id WHERE re.fraction>0 AND q.id=%s  """ % (
                                    quiz)
                                cursor.execute(q3)
                                preguntas = cursor.fetchall()

                                q5 = """  SELECT DISTINCT  q.timelimit FROM mooc_quiz q  WHERE  q.id=%s  """ % (quiz)
                                cursor.execute(q5)
                                tmp = cursor.fetchall()
                                tiempo = tmp[0][0]
                                if tiempo > 60:
                                    tiempo_examen = int(tiempo)/60




                                for pregunta in preguntas:
                                    num_preguntas += 1

                                q4 =  """  SELECT qet.name, qet.questiontext, re.answer, re.answerformat FROM mooc_quiz q INNER JOIN mooc_quiz_slots qe ON q.id=qe.quizid INNER JOIN mooc_question qet ON qet.id=qe.questionid INNER JOIN mooc_question_answers re ON re.question=qet.id WHERE  q.id=%s  """ % (quiz)
                                cursor.execute(q4)
                                preguntasds = cursor.fetchall()

                                for preg in preguntasds:
                                    num_preguntas += 1

                    q6= """ SELECT cm.instance  FROM mooc_course_modules cm  WHERE cm.module=17 and cm.INSTANCE=%s AND cm.course=%s AND cm.section =(SELECT s.id FROM mooc_course_sections s WHERE s.course=%s AND not s.section=12)  """ % (instance, idcurso, idcurso)
                    cursor.execute(q1)
                    buscar = cursor.fetchall()

                    for bus in buscar:
                        q2 = f""" SELECT q.id FROM mooc_quiz q WHERE q.id={bus[0]} AND (q.name ILIKE '%EXAMEN%' or q.name ILIKE '%EX√ÅMEN%' or q.name ILIKE '%EXAM%') """
                        cursor.execute(q2)
                        idquiz2 = cursor.fetchall()

                        if idquiz2:
                            examen_otra_seccion = 'SI'


                # fechat = int(time.mktime(datetime.now().timetuple()))
                # sql = u"UPDATE mooc_course SET cacherev = %s WHERE id = %s" % (fechat, idcurso)
                # cursor.execute(sql)

            print('curso actualizado', cont, 'de', totalmaterias)
            cont += 1

            hojadestino.write(fila, 0, "%s" % facultad, fuentenormal)
            hojadestino.write(fila, 1, "%s" % carrera, fuentenormal)
            hojadestino.write(fila, 2, "%s" % nivel, fuentenormal)
            hojadestino.write(fila, 3, "%s" % paralelo, fuentenormal)
            hojadestino.write(fila, 4, "%s" % asignatura, fuentenormal)
            hojadestino.write(fila, 5, modalidad, fuentenormal)
            hojadestino.write(fila, 6, "%s" % profesor, fuentenormal)
            hojadestino.write(fila, 7, idmateria, fuentenormal)
            hojadestino.write(fila, 8, idcurso, fuentenormal)
            hojadestino.write(fila, 9, tiene_examen_sga, fuentenormal)
            hojadestino.write(fila, 10, migrado_moodle, fuentenormal)
            hojadestino.write(fila, 11, tiene_examen_moodle, fuentenormal)
            hojadestino.write(fila, 12, num_examenes, fuentenormal)
            hojadestino.write(fila, 13, num_preguntas, fuentenormal)
            # hojadestino.write(fila, 13, tiempoexamen, fuentenormal)
            hojadestino.write(fila, 15, examen_otra_seccion, fuentenormal)
            hojadestino.write(fila, 16, modeloevaluativo, fuentenormal)


            fila += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        msg = ex.__str__()

        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)
        print(msg)

#reporte_examen_pregrado_presencial()
#importacion de calificaciones de materias transversales de lenguaje e investigacion que estan en el aula nivelacion

def importacion_transversales():
    try:
        periodo=Periodo.objects.get(id=177)
        matriculas=Matricula.objects.filter(status=True, nivel__periodo=periodo, bloqueomatricula=False, retiradomatricula=False).exclude(nivel__id__in=[1481, 1482])
        for matricula in matriculas:
            modulo_ingles = None
            guardo_nota = False
            modulo_ingles = ModuloMalla.objects.values_list('asignatura_id', flat=True).filter(
                malla=matricula.inscripcion.mi_malla(), status=True).order_by('orden').exclude(asignatura_id=782)
            for materiaasignada in MateriaAsignada.objects.filter(status=True, retiramateria=False, matricula=matricula,
                                                                  materia__asignatura__in=modulo_ingles, estado_id=3):
                guardo_nota = False
                for notasmooc in materiaasignada.materia.notas_de_moodle(materiaasignada.matricula.inscripcion.persona):
                    campo = materiaasignada.campo(notasmooc[1].upper())
                    if Decimal(notasmooc[0]) >= 70 and materiaasignada.notafinal <= 0:
                        if type(notasmooc[0]) is Decimal:
                            if null_to_decimal(campo.valor) != float(notasmooc[0]):
                                #GUARDA EN EVALUACI√ìN GENERICA
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
                                                                calificacion=notasmooc[0])
                                auditorianotas.save()
                        else:
                            if null_to_decimal(campo.valor) != float(0):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                                auditorianotas.save()
                        guardo_nota = True
                        print(u"Importa nota %s" % materiaasignada)
                if guardo_nota:
                    materiaasignada.importa_nota = True
                    materiaasignada.cerrado = True
                    materiaasignada.fechacierre = datetime.now().date()
                    materiaasignada.save()
                    d = locals()
                    exec(materiaasignada.materia.modeloevaluativo.logicamodelo, globals(), d)
                    d['calculo_modelo_evaluativo'](materiaasignada)
                    materiaasignada.cierre_materia_asignada()


    except Exception as ex:
        msg = ex.__str__()

        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)
        print(msg)


def calificacion_transversales_lenguaje():
    with transaction.atomic():
        try:
            periodo = Periodo.objects.get(id=177)
            materiaslenguaje = MateriaAsignada.objects.filter(status=True,
                                                              materia__asignatura_id__in=[216, 223, 906, 3204, 3770,
                                                                                          3989, 10118],
                                                              matricula__nivel__periodo=periodo,
                                                              matricula__bloqueomatricula=False,
                                                              matricula__retiradomatricula=False, materia__status=True,
                                                              matricula__status=True,
                                                              matricula__inscripcion__carrera__modalidad__in=[1, 2],
                                                              materia__modeloevaluativo_id=27)
            for materiaasignada in materiaslenguaje:
                # guardo_nota = False
                if materiaasignada.materia.notas_de_moodle(materiaasignada.matricula.inscripcion.persona):
                    for notasmooc in materiaasignada.materia.notas_de_moodle(
                            materiaasignada.matricula.inscripcion.persona):
                        campo = materiaasignada.campo(notasmooc[1].upper())
                        if not campo:
                            print('revisar curso moodle - ', materiaasignada.materia.id , 'idcursomoodle -', materiaasignada.materia.idcursomoodle )
                        if type(notasmooc[0]) is Decimal:
                            if null_to_decimal(campo.valor) != float(notasmooc[0]):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
                                                                calificacion=notasmooc[0])
                                auditorianotas.save()
                                print('importacion exitosa - ', materiaasignada)

                        else:
                            if null_to_decimal(campo.valor) != float(0):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                                auditorianotas.save()
                                print('importacion exitosa - ', materiaasignada)

                else:
                    for detallemodelo in materiaasignada.materia.modeloevaluativo.detallemodeloevaluativo_set.filter(
                            migrarmoodle=True):
                        campo = materiaasignada.campo(detallemodelo.nombre)
                        actualizar_nota_planificacion(materiaasignada.id, detallemodelo.nombre, 0)
                        auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                        auditorianotas.save()

                campo = materiaasignada.campo('N2')
                actualizar_nota_planificacion(materiaasignada.id, 'N2', 60)
                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
                                                calificacion=60)
                auditorianotas.save()
                print('calificacion asignada - ', materiaasignada)

            print('PROCESO FINALIZADO')

        except Exception as ex:
            msg = ex.__str__()

            textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
            print(textoerror)
            print(msg)


#calificacion_transversales_lenguaje()

#BLOQUEAR IMPORTACI√ìN DE CALIFICACIONES DE INVESTIGACI√ìN
def calificacion_transversales_investigacion():
    with transaction.atomic():
        try:
            periodo = Periodo.objects.get(id=177)
            asignaturas = DetalleGrupoAsignatura.objects.values_list('asignatura_id', flat=True).filter(status=True,
                                                                                                        grupo_id=1)
            materiasinvestigacion = MateriaAsignada.objects.filter(status=True,
                                                              materia__asignatura_id__in=asignaturas,
                                                              matricula__nivel__periodo=periodo,
                                                              matricula__bloqueomatricula=False,
                                                              matricula__retiradomatricula=False, materia__status=True,
                                                              matricula__status=True,
                                                              matricula__inscripcion__carrera__modalidad__in=[1, 2],
                                                              materia__modeloevaluativo_id=27)
            for materiaasignada in materiasinvestigacion:
                # guardo_nota = False
                if materiaasignada.materia.notas_de_moodle(materiaasignada.matricula.inscripcion.persona):
                    for notasmooc in materiaasignada.materia.notas_de_moodle(
                            materiaasignada.matricula.inscripcion.persona):
                        campo = materiaasignada.campo(notasmooc[1].upper())
                        if not campo:
                            print('revisar curso moodle - ', materiaasignada.materia.id , 'idcursomoodle -', materiaasignada.materia.idcursomoodle )
                        if type(notasmooc[0]) is Decimal:
                            if null_to_decimal(campo.valor) != float(notasmooc[0]):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
                                                                calificacion=notasmooc[0])
                                auditorianotas.save()
                                print('importacion exitosa - ', materiaasignada)

                        else:
                            if null_to_decimal(campo.valor) != float(0):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                                auditorianotas.save()
                                print('importacion exitosa - ', materiaasignada)

                else:
                    for detallemodelo in materiaasignada.materia.modeloevaluativo.detallemodeloevaluativo_set.filter(
                            migrarmoodle=True):
                        campo = materiaasignada.campo(detallemodelo.nombre)
                        actualizar_nota_planificacion(materiaasignada.id, detallemodelo.nombre, 0)
                        auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                        auditorianotas.save()


            print('PROCESO FINALIZADO')

        except Exception as ex:
            msg = ex.__str__()

            textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
            print(textoerror)
            print(msg)


#calificacion_transversales_investigacion()

def calificacion_transversales_sabado_semipresenciales():
    with transaction.atomic():
        try:
            periodo = Periodo.objects.get(id=177)
            asignaturas = DetalleGrupoAsignatura.objects.values_list('asignatura_id', flat=True).filter(status=True, grupo_id=1)
            materiasinvestigacion = MateriaAsignada.objects.filter(status=True,
                                                              materia__asignatura_id__in=asignaturas,
                                                              matricula__nivel__periodo=periodo,
                                                              matricula__bloqueomatricula=False,
                                                              matricula__retiradomatricula=False, materia__status=True,
                                                              matricula__status=True,
                                                              matricula__inscripcion__carrera__modalidad__in=[2],
                                                              materia__modeloevaluativo_id=27)
            cursor = connections['db_moodle_virtual'].cursor()
            for materiaasignada in materiasinvestigacion:
                # guardo_nota = False
                usuario = materiaasignada.matricula.inscripcion.persona.usuario.username
                #SE NECESITA EL ID DE CURSO MOODLE
                sql = """
                                    SELECT ROUND(nota.finalgrade,2), UPPER(gc.fullname)
                                            FROM mooc_grade_grades nota
                                    INNER JOIN mooc_grade_items it ON nota.itemid=it.id AND courseid=2042 AND itemtype='category'
                                    INNER JOIN mooc_grade_categories gc ON gc.courseid=it.courseid AND gc.id=it.iteminstance AND gc.depth=2
                                    INNER JOIN mooc_user us ON nota.userid=us.id
                                    WHERE us.username = '%s' and not UPPER(gc.fullname)='RE'
                                    ORDER BY it.sortorder
                                """ % (usuario)

                cursor.execute(sql)
                results = cursor.fetchall()
                if results:
                    for notasmooc in results:
                        campo = materiaasignada.campo(notasmooc[1].upper())
                        if not campo:
                            print('revisar curso moodle - ', materiaasignada.materia.id , 'idcursomoodle -', materiaasignada.materia.idcursomoodle )
                        if type(notasmooc[0]) is Decimal:
                            if null_to_decimal(campo.valor) != float(notasmooc[0]):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
                                                                calificacion=notasmooc[0])
                                auditorianotas.save()
                                print('importacion exitosa - ', materiaasignada)

                        else:
                            if null_to_decimal(campo.valor) != float(0):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                                auditorianotas.save()
                                print('importacion exitosa - ', materiaasignada)

                else:
                    detallemodelo = DetalleModeloEvaluativo.objects.get(pk=123)
                    campo = materiaasignada.campo(detallemodelo.nombre)
                    actualizar_nota_planificacion(materiaasignada.id, detallemodelo.nombre, 0)
                    auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                    auditorianotas.save()

            print('PROCESO FINALIZADO')

        except Exception as ex:
            msg = ex.__str__()

            textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
            print(textoerror)
            print(msg)

#calificacion_transversales_sabado_semipresenciales()

def calificacion_transversales_domingo_presenciales_3():
    with transaction.atomic():
        try:
            periodo = Periodo.objects.get(id=177)
            asignaturas = DetalleGrupoAsignatura.objects.values_list('asignatura_id', flat=True).filter(status=True, grupo_id=1)
            materiasinvestigacion = MateriaAsignada.objects.filter(status=True,
                                                              materia__asignatura_id__in=asignaturas,
                                                              matricula__nivel__periodo=periodo,
                                                              matricula__bloqueomatricula=False,
                                                              matricula__retiradomatricula=False, materia__status=True,
                                                              matricula__status=True,
                                                              matricula__inscripcion__carrera__modalidad__in=[1],
                                                              matricula__inscripcion__carrera_id__in=[141,156,175,137,188,142,170,157],
                                                              materia__modeloevaluativo_id=27)
            cursor = connections['db_moodle_virtual'].cursor()
            for materiaasignada in materiasinvestigacion:
                # guardo_nota = False
                usuario = materiaasignada.matricula.inscripcion.persona.usuario.username
                #SE NECESITA EL ID DE CURSO MOODLE
                sql = """
                                    SELECT ROUND(nota.finalgrade,2), UPPER(gc.fullname)
                                            FROM mooc_grade_grades nota
                                    INNER JOIN mooc_grade_items it ON nota.itemid=it.id AND courseid=2041 AND itemtype='category'
                                    INNER JOIN mooc_grade_categories gc ON gc.courseid=it.courseid AND gc.id=it.iteminstance AND gc.depth=2
                                    INNER JOIN mooc_user us ON nota.userid=us.id
                                    WHERE us.username = '%s' and not UPPER(gc.fullname)='RE'
                                    ORDER BY it.sortorder
                                """ % (usuario)

                cursor.execute(sql)
                results = cursor.fetchall()
                if results:
                    for notasmooc in results:
                        campo = materiaasignada.campo(notasmooc[1].upper())
                        if not campo:
                            print('revisar curso moodle - ', materiaasignada.materia.id , 'idcursomoodle -', materiaasignada.materia.idcursomoodle )
                        if type(notasmooc[0]) is Decimal:
                            if null_to_decimal(campo.valor) != float(notasmooc[0]):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
                                                                calificacion=notasmooc[0])
                                auditorianotas.save()
                                print('importacion exitosa - ', materiaasignada)

                        else:
                            if null_to_decimal(campo.valor) != float(0):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                                auditorianotas.save()
                                print('importacion exitosa - ', materiaasignada)

                else:
                    detallemodelo = DetalleModeloEvaluativo.objects.get(pk=123)
                    campo = materiaasignada.campo(detallemodelo.nombre)
                    actualizar_nota_planificacion(materiaasignada.id, detallemodelo.nombre, 0)
                    auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                    auditorianotas.save()



            print('PROCESO FINALIZADO')

        except Exception as ex:
            msg = ex.__str__()

            textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
            print(textoerror)
            print(msg)

#calificacion_transversales_domingo_presenciales_3()


def actualizar_modelo_evaluativo():
    try:
        periodo = Periodo.objects.get(id=177)
        materias = Materia.objects.filter(status=True, modeloevaluativo_id=27, nivel__periodo=periodo, asignaturamalla__malla__carrera__modalidad__in=[3]).exclude(nivel_id__in=[1481,1482])
        total = materias.count()
        cont = 1

        for materia in materias:
            materia.crear_actualizar_categoria_notas_curso()
            print(cont, "de", total )
            cont += 1

        print('PROCESO FINALIZADO')

    except Exception as ex:
        msg = ex.__str__()

        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)
        print(msg)

#actualizar_modelo_evaluativo()

def calificaciones_nivelacion_recuperacion():
    try:
        #periodo = Periodo.objects.get(id=177)
        materias = MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(status=True, aulaplanificacion_id=30273, aulaplanificacion__turnoplanificacion__fechaplanificacion__sede_id__lte=10)
        cursor = connections['db_moodle_virtual'].cursor()

        for materiaasig in materias:
            matasignada = materiaasig.materiaasignada
            usuario = matasignada.matricula.inscripcion.persona.usuario.username
            idcursomoodle = matasignada.materia.idcursomoodle
            # SE NECESITA EL ID DE CURSO MOODLE
            sql = """
                                SELECT ROUND(nota.finalgrade,2), UPPER(gc.fullname)
                                        FROM mooc_grade_grades nota
                                INNER JOIN mooc_grade_items it ON nota.itemid=it.id AND courseid=%s AND itemtype='category'
                                INNER JOIN mooc_grade_categories gc ON gc.courseid=it.courseid AND gc.id=it.iteminstance AND gc.depth=2
                                INNER JOIN mooc_user us ON nota.userid=us.id
                                WHERE us.username = '%s' and  UPPER(gc.fullname)='EX'
                                ORDER BY it.sortorder
                            """ % (str(idcursomoodle), usuario)

            cursor.execute(sql)
            results = cursor.fetchall()
            if results:
                for notasmooc in results:
                    campo = matasignada.campo(notasmooc[1].upper())
                    if not campo:
                        print('revisar curso moodle - ', matasignada.materia.id, 'idcursomoodle -',
                              matasignada.materia.idcursomoodle)
                    if type(notasmooc[0]) is Decimal:
                        if null_to_decimal(campo.valor) != float(notasmooc[0]):
                            actualizar_nota_planificacion(matasignada.id, notasmooc[1].upper(), notasmooc[0])
                            auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
                                                            calificacion=notasmooc[0])
                            auditorianotas.save()
                            print('importacion exitosa - ', matasignada)

                    else:
                        if null_to_decimal(campo.valor) != float(0):
                            actualizar_nota_planificacion(matasignada.id, notasmooc[1].upper(), notasmooc[0])
                            auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                            auditorianotas.save()
                            print('importacion exitosa - ', matasignada)

            else:
                print('no tiene examen  - ', matasignada)

        print('PROCESO FINALIZADO')

    except Exception as ex:
        msg = ex.__str__()

        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)
        print(msg)

#calificaciones_nivelacion_recuperacion()

def actualizar_calificacion(eMateriaAsignada):
    puntosfalta = 70 - float(eMateriaAsignada.notafinal)
    for eEvaluacionGenerica in eMateriaAsignada.evaluaciongenerica_set.filter(status=True).order_by('id'):
        notacampo = 0
        difecampo = 0
        # puntosfalta = 70 - float(materiaasignada.notafinal)
        if eEvaluacionGenerica.valor < eEvaluacionGenerica.detallemodeloevaluativo.notamaxima and puntosfalta > 0:
            difecampo = eEvaluacionGenerica.detallemodeloevaluativo.notamaxima - eEvaluacionGenerica.valor
            if difecampo > puntosfalta:
                notacampo = puntosfalta + eEvaluacionGenerica.valor

            else:
                notacampo = float(difecampo + eEvaluacionGenerica.valor)
            puntosfalta = float(puntosfalta - difecampo)

            actualizar_nota_planificacion(eMateriaAsignada.id, eEvaluacionGenerica.detallemodeloevaluativo.nombre, notacampo)
            auditorianotas = AuditoriaNotas(evaluaciongenerica=eEvaluacionGenerica,
                                            manual=False,
                                            calificacion=notacampo,
                                            observacion=u"SE PROCEDE A COMPLETAR NOTA AUTOM√ÅTICAMENTE POR DISPOSICI√ìN DE LA AUTORIDAD %s" % datetime.now())
            auditorianotas.save()
    print("Nota actualizada: %s" % eMateriaAsignada)

def arreglar_notas_admision(ePeriodo):
    print(f"INICIO")
    errors = []
    eCoordinacion = Coordinacion.objects.get(id=9)
    usuarios = ['eronquilloc7',
'gsalazarm7',
'gsudarios',
'hwongl',
'jfloresr10',
'jgomezs6',
'jmarinom',
'jmendozat',
'jtorreso13',
'kmillanc',
'kotavalob',
'mguerreroa12',
'mleonm17',
'nalarconr3',
'emerag',
'bespinozap3',
'darboledap',
'ezambranoc19',
'galvarezd',
'hanastaciof',
'hrebolledoc',
'jbustamantea4',
'jlainezz',
'jmontoyat',
'jmoralesc14',
'jsornozaz3',
'klopezb5',
'mestupinanm3',
'mmartinezh7',
'ocusmet',
'sperezc6',
'cponcer2',
'dlimav3',
'gtorresb',
'hcastilloc',
'jquinonezv4',
'mlinom4',
'mperezz3',
'mpizar2',
'msolorzanop6',
'portegaa2',
'rmantillac',
'sgarcial7',
'wsuarezl',
'aguevaral4',
'aintriagor3',
'amirandae4',
'bdiazd2',
'cpenafiela2',
'criofriog',
'crivasd',
'dparedesl4',
'eduartev2',
'emurillob3',
'gbaltanc',
'gcabreral',
'gcalderonm2',
'htorress',
'ivalverdec2',
'jalvaradop24',
'jhernandezf2',
'jibarras3',
'jmalagonp',
'jordenanas',
'jvelizm7',
'ksubiagaf',
'kzapataq',
'lzambranov17',
'mvivancom',
'ncarpioc2',
'nespinozab3',
'nsolisp',
'rsichaz',
'sortizg3',
'wcoelloc2',
'wquimisc',
'acastillov4',
'agodosi',
'avidalm',
'bandradeo',
'bbowend',
'cleonv8',
'cverao3',
'dchavezs4',
'dmendozac12',
'glozanom2',
'gochoaa4',
'icalderons',
'jmorenof3',
'jmoyanoa2',
'jperlazam2',
'kgaibora',
'lplacencios',
'meguezm2',
'mseguraj',
'mtroyas',
'rsaconz',
'sconsuegraa',
'sgamarrar',
'ybecerraa',
'ymoralesm',
'aluzuriagam2',
'jlaazd',
'kzambranop8',
'mgomezc7',
'mneiral2',
'ncolomav',
'rmunozm9',
'eocanav',
'gmoncayor',
'jquindec7',
'zcastanedae',
'aariasg4',
'acanaleso',
'amontalvanl',
'aordonezc7',
'ayaguala2',
'bguerrerol3',
'bhurtadoa3',
'brierap',
'caraujoo',
'cberrezuetae',
'dfajardom6',
'fronquillom2',
'gmaquilonz',
'jsuarezj2',
'kcarreraa2',
'lfrancisq',
'lgrandag2',
'maguayoc2',
'mcedenob15',
'mfreireb',
'mgodosi',
'mloorm11',
'mmosqueraq3',
'mpibaqueh',
'msanchezr20',
'mzambranos16',
'rcevallosa3',
'scampost',
'vcerezom',
'wmanzabap',
'marcer2',
'bnaranjoa2',
'epalaciosv3',
'gvilelav2',
'jcastron2',
'lchaconb',
'vespinalesm2',
'aguapia',
'hanzoateguiz',
'alitardoj',
'amurilloi',
'asolorzanoz',
'banchundiav2',
'bjimenezl4',
'cfrancof2',
'dbarcot',
'dsantosd2',
'dsuarezm11',
'elayg',
'gbustosb',
'gmunizg2',
'grivasd',
'jrodrigueza18',
'jtenesacal',
'kborjay',
'kmontoyap',
'mlojanoo',
'mpalmav4',
'nsoriaa2',
'rnazarenot',
'glopezp6',
'valvarezs2',
'cmoreirav',
'ecorream6',
'iguerreror3',
'jbravoa12',
'aguamans6',
'jdiazm16',
'ngamarran',
'vlopezp2',
'aalbanb3',
'acampoverdea2',
'bguaillasm',
'dcarvajals3',
'fmurillol2',
'kfajardov2',
'mbenitezm',
'tchavezq',
'aalvaradou',
'aguzmanv2',
'asellanv',
'djarag3',
'driverah',
'gaguirrea',
'gvilelav4',
'jsantoss7',
'lbowend',
'maraujos2',
'ngomezc3',
'rrivasv4',
'rrosalesb',
'rvegai',
'amosquerao4',
'aolivoc',
'atorresj7',
'bbarbozac',
'cdefazy',
'cmosquerac',
'eanguloc4',
'eavilam5',
'efrancob4',
'gfierroc',
'hasenciov',
'ichacinr',
'jcobos',
'jortizg9',
'jpolitf',
'jreyesc10',
'jtiguaa3',
'jzambranor13',
'kerazod',
'knaranjoc2',
'lreyesc7',
'manchundiar2',
'mburbanop',
'mlozadav2',
'mtomalar5',
'nveras',
'portiza5',
'pyepezi',
'acantosj',
'apitaa2',
'csanchezc30',
'dpayep',
'gguadamudc',
'gpazminon',
'icaicedoq',
'jcevallosh4',
'jmenendezm',
'jvillacresesr',
'lromeror4',
'mferrinb',
'mloorm14',
'mvelasquezm6',
'nbellor',
'ntoroc2',
'pveraf2',
'rmatamorosa2',
'rponcer2',
'sramirezp5',
'vmerob',
'ybaquep2',
'aleonp10',
'bchangg',
'jchueza2',
'maguilara9',
'mramosa7',
'nochoad',
'ahernandeza9',
'averav22',
'avillonz2',
'bcedenoa3',
'bpachecop',
'cmontoyap2',
'cmoranp6',
'ebenitezv2',
'ecarguaa',
'etipanq',
'etoalaa3',
'gduarter',
'grodriguezl7',
'gsancheza6',
'gtigrerosg',
'idiazs',
'jpluao',
'jvillaov2',
'jzhuzhingoj',
'kfaicanc',
'maltamiranom3',
'mbazanc2',
'murinam4',
'mveras9',
'nbohorquezm4',
'nliberiob',
'rguillenf',
'sgomezr',
'smonteroe',
'strianag2',
'tverav3',
'ybuenor',
]
    #NO SE CONSIDERA LA MATRICULA CERRADA
    filtro = Q(status=True, nivel__periodo=ePeriodo, inscripcion__carrera__coordinacion=eCoordinacion, aprobado=False)
    eMatriculas = Matricula.objects.filter(filtro, inscripcion__persona__usuario__username__in=usuarios).exclude(inscripcion__carrera__id=223).distinct()
    eCarreras = Carrera.objects.filter(id__in=eMatriculas.values_list('inscripcion__carrera__id', flat=True), status=True).distinct().order_by('modalidad')
    total_carrera = len(eCarreras.values("id"))
    contador_carrera = 0

    for eCarrera in eCarreras:
        contador_carrera += 1
        print(f"({total_carrera}/{contador_carrera}) Carrera: {eCarrera.__str__()}")
        total_matriculas = eMatriculas.values("id").filter(inscripcion__carrera=eCarrera, materiaasignada__retiramateria=False).distinct().count()
        contador_matricula = 0
        for eMatricula in eMatriculas.filter(inscripcion__carrera=eCarrera, materiaasignada__retiramateria=False).annotate(promedio_notafinal=Avg('materiaasignada__notafinal')).order_by('promedio_notafinal').distinct():
            contador_matricula += 1
            eMateriaAsignadas = eMatricula.materiaasignada_set.filter(status=True, retiramateria=False).distinct()
            #NO SE CONSIDERA LA ASISTENCIA
            if MateriaAsignadaPlanificacionSedeVirtualExamen.objects.filter(materiaasignada__in=eMateriaAsignadas).exists():
                with transaction.atomic():
                    try:
                        total_aprobadas = eMateriaAsignadas.values("id").filter(notafinal__gte=70).count()
                        eMateriaAsignadas.filter(notafinal__gte=70).update(estado_id=NOTA_ESTADO_APROBADO)
                        total_tomadas = eMateriaAsignadas.values("id").count()
                        bandera = False
                        total_pasoayuda = 0
                        if total_aprobadas > 0 and total_aprobadas < total_tomadas:
                            for eMateriaAsignada in eMateriaAsignadas.filter(notafinal__lt=70):
                                actualizar_calificacion(eMateriaAsignada)
                                bandera = True
                                total_pasoayuda += 1
                        else:
                            contador = 0
                            total_faltante = eMateriaAsignadas.values("id").filter(notafinal__lt=70).count()
                            for eMateriaAsignada in eMateriaAsignadas.filter(notafinal__lt=70):
                                if eMateriaAsignada.notafinal < 70 and eMateriaAsignada.notafinal >= 10:
                                    contador += 1
                            if contador == total_faltante:
                                for eMateriaAsignada in eMateriaAsignadas.filter(notafinal__lt=70):
                                    actualizar_calificacion(eMateriaAsignada)
                                    bandera = True
                                    total_pasoayuda += 1
                        if bandera:
                            if (total_pasoayuda + total_aprobadas) == total_tomadas:
                                eMatricula.pasoayuda = True
                        cantidadmaterias = eMatricula.materiaasignada_set.filter(status=True, retiramateria=False).count()
                        cantidadaprobadas = eMatricula.materiaasignada_set.filter(notafinal__gte=70, status=True, retiramateria=False).count()
                        if cantidadmaterias == cantidadaprobadas and cantidadmaterias > 0 and cantidadaprobadas > 0:
                            eMatricula.aprobado = True
                        eMatricula.save()
                        print(f"({total_carrera}/{contador_carrera}) Carrera: {eCarrera.__str__()} --> ({total_matriculas}/{contador_matricula}) - {eMatricula.__str__()}")
                    except Exception as ex:
                        print('error: %s' % ex)
                        transaction.set_rollback(True)
                        errors.append(eMatricula.pk)

    conta = 0
    totalaprobados = 0
    filtro = Q(status=True, nivel__periodo=ePeriodo, inscripcion__carrera__coordinacion=eCoordinacion)
    eMatriculas = Matricula.objects.filter(filtro, inscripcion__persona__usuario__username__in=usuarios).exclude(inscripcion__carrera__id=223).distinct()
    eCarreras = Carrera.objects.filter(id__in=eMatriculas.values_list('inscripcion__carrera__id', flat=True),
                                       status=True).distinct().order_by('modalidad')

    total_carrera = len(eCarreras.values("id"))
    contador_carrera = 0
    for eCarrera in eCarreras:
        contador_carrera += 1
        print(f"({total_carrera}/{contador_carrera}) Carrera: {eCarrera.__str__()}")
        total_matriculas = eMatriculas.values("id").filter(inscripcion__carrera=eCarrera,
                                                           materiaasignada__retiramateria=False).distinct().count()
        contador_matricula = 0
        eMatriculas.filter(inscripcion__carrera=eCarrera, materiaasignada__retiramateria=False).distinct().update(
            aprobado=False)
        for eMatricula in eMatriculas.filter(inscripcion__carrera=eCarrera,
                                             materiaasignada__retiramateria=False).distinct():
            contador_matricula += 1
            with transaction.atomic():
                try:
                    cantidadmaterias = eMatricula.materiaasignada_set.filter(status=True, retiramateria=False).count()
                    cantidadaprobadas = eMatricula.materiaasignada_set.filter(notafinal__gte=70, status=True,
                                                                              retiramateria=False).count()
                    # print("%s %s"% (cantidadaprobadas, cantidadmaterias))
                    if cantidadmaterias == cantidadaprobadas and cantidadmaterias > 0 and cantidadaprobadas > 0:
                        conta += 1
                        totalaprobados += 1
                        print(
                            "************************************************************# %s: Aprobadas=%s Total=%s" % (
                            conta, cantidadaprobadas, cantidadmaterias))
                        eMatricula.aprobado = True
                        eMatricula.save()
                    print(
                        f"({total_carrera}/{contador_carrera}) Carrera: {eCarrera.__str__()} --> ({total_matriculas}/{contador_matricula}) - {eMatricula.__str__()}")
                except Exception as ex:
                    print('error: %s' % ex)
                    transaction.set_rollback(True)

    print("Total de aprobados %s" % totalaprobados)

    if len(errors) > 0:
        print(errors)
    print(f"FIN")

#arreglar_notas_admision(177)

def actualizar_tarjetas_moodle():
    materias = Materia.objects.filter(status=True, nivel__periodo_id=177, pk__in=[75252,75253,75254,75255,75256,75257,75258,75259])
    for materia in materias:
        if materia.idcursomoodle > 0 :
            try:
                print("%s - %s" % (materia, materia.idcursomoodle))
                materia.poner_estilo_tarjeta_curso_moodle()
                materia.crear_actualizar_silabo_curso_virtual_segundo_nivel()

            except Exception as ex:
                print('Error al crear html %s ---- %s' % (ex, materia))


#actualizar_tarjetas_moodle()
#calificaciones de lenguaje e investigacion presenciales y semipresenciales
def calificacion_transversales_n1():
    with transaction.atomic():
        try:
            periodo = Periodo.objects.get(id=177)
            asignaturas = DetalleGrupoAsignatura.objects.values_list('asignatura_id', flat=True).filter(status=True, grupo_id__in=[1,3])
            materiasinvestigacion = MateriaAsignada.objects.filter(status=True,
                                                              materia__asignatura_id__in=asignaturas,
                                                              matricula__nivel__periodo=periodo,
                                                              matricula__bloqueomatricula=False,
                                                              matricula__retiradomatricula=False, materia__status=True,
                                                              matricula__status=True,
                                                              matricula__inscripcion__carrera__modalidad__in=[1,2],
                                                              materia__modeloevaluativo_id=27)
            cursor = connections['moodle_db'].cursor()
            for materiaasignada in materiasinvestigacion:
                # guardo_nota = False
                usuario = materiaasignada.matricula.inscripcion.persona.usuario.username
                idcursomoodle = materiaasignada.materia.idcursomoodle
                #SE NECESITA EL ID DE CURSO MOODLE
                sql = """
                                    SELECT ROUND(nota.finalgrade,2), UPPER(gc.fullname)
                                            FROM mooc_grade_grades nota
                                    INNER JOIN mooc_grade_items it ON nota.itemid=it.id AND courseid=%s AND itemtype='category'
                                    INNER JOIN mooc_grade_categories gc ON gc.courseid=it.courseid AND gc.id=it.iteminstance AND gc.depth=2
                                    INNER JOIN mooc_user us ON nota.userid=us.id
                                    WHERE us.username = '%s' and  UPPER(gc.fullname)='N1'
                                    ORDER BY it.sortorder
                                """ % (str(idcursomoodle), usuario)

                cursor.execute(sql)
                results = cursor.fetchall()
                if results:
                    for notasmooc in results:
                        campo = materiaasignada.campo(notasmooc[1].upper())
                        if not campo:
                            print('revisar curso moodle - ', materiaasignada.materia.id , 'idcursomoodle -', materiaasignada.materia.idcursomoodle )
                        if type(notasmooc[0]) is Decimal:
                            if null_to_decimal(campo.valor) != float(notasmooc[0]):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
                                                                calificacion=notasmooc[0])
                                auditorianotas.save()
                                print('importacion exitosa - ', materiaasignada)

                        else:
                            if null_to_decimal(campo.valor) != float(0):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                                auditorianotas.save()
                                print('importacion exitosa - ', materiaasignada)

                else:
                    detallemodelo = DetalleModeloEvaluativo.objects.get(pk=122)
                    campo = materiaasignada.campo(detallemodelo.nombre)
                    actualizar_nota_planificacion(materiaasignada.id, detallemodelo.nombre, 0)
                    auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                    auditorianotas.save()



            print('PROCESO FINALIZADO')

        except Exception as ex:
            msg = ex.__str__()

            textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
            print(textoerror)
            print(msg)


#calificaciones de realidad nacional presencial y semipresencial
def calificacion_transversales_rn():
    with transaction.atomic():
        try:
            periodo = Periodo.objects.get(id=177)
            asignaturas = DetalleGrupoAsignatura.objects.values_list('asignatura_id', flat=True).filter(status=True, grupo_id__in=[2])
            materiaslenguaje = MateriaAsignada.objects.filter(status=True,
                                                              materia__asignatura_id__in=asignaturas,
                                                              matricula__nivel__periodo=periodo,
                                                              matricula__bloqueomatricula=False,
                                                              matricula__retiradomatricula=False, materia__status=True,
                                                              matricula__status=True,
                                                              matricula__inscripcion__carrera__modalidad__in=[1, 2],
                                                              materia__modeloevaluativo_id=27)
            for materiaasignada in materiaslenguaje:
                # guardo_nota = False
                if materiaasignada.materia.notas_de_moodle(materiaasignada.matricula.inscripcion.persona):
                    for notasmooc in materiaasignada.materia.notas_de_moodle(
                            materiaasignada.matricula.inscripcion.persona):
                        campo = materiaasignada.campo(notasmooc[1].upper())
                        # if not campo:
                        #     print('revisar curso moodle - ', materiaasignada.materia.id , 'idcursomoodle -', materiaasignada.materia.idcursomoodle )
                        if type(notasmooc[0]) is Decimal:
                            if null_to_decimal(campo.valor) != float(notasmooc[0]):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
                                                                calificacion=notasmooc[0])
                                auditorianotas.save()
                                print(f'importacion exitosa: {materiaasignada} - antes:{campo.valor}, ahora {notasmooc[0]}')

                        else:
                            if null_to_decimal(campo.valor) != float(0):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                                auditorianotas.save()
                                print(f'importacion exitosa: {materiaasignada} - antes:{campo.valor}, ahora 0')

                else:
                    for detallemodelo in materiaasignada.materia.modeloevaluativo.detallemodeloevaluativo_set.filter(
                            migrarmoodle=True):
                        campo = materiaasignada.campo(detallemodelo.nombre)
                        actualizar_nota_planificacion(materiaasignada.id, detallemodelo.nombre, 0)
                        auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                        auditorianotas.save()



            print('PROCESO FINALIZADO')

        except Exception as ex:
            msg = ex.__str__()

            textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
            print(textoerror)
            print(msg)


#calificaciones transversales en linea
def calificacion_transversales_en_linea():
    with transaction.atomic():
        try:
            periodo = Periodo.objects.get(id=177)
            asignaturas = DetalleGrupoAsignatura.objects.values_list('asignatura_id', flat=True).filter(status=True,
                                                                                                        grupo_id__in=[1,2,3])
            materiaslenguaje = MateriaAsignada.objects.filter(status=True,
                                                              materia__asignatura_id__in=asignaturas,
                                                              matricula__nivel__periodo=periodo,
                                                              matricula__bloqueomatricula=False,
                                                              matricula__retiradomatricula=False, materia__status=True,
                                                              matricula__status=True,
                                                              matricula__inscripcion__carrera__modalidad__in=[3],
                                                              materia__modeloevaluativo_id=27)
            cursor = connections['moodle_db'].cursor()
            for materiaasignada in materiaslenguaje:
                usuario = materiaasignada.matricula.inscripcion.persona.usuario.username
                idcursomoodle = materiaasignada.materia.idcursomoodle
                # SE NECESITA EL ID DE CURSO MOODLE
                sql = """
                                                    SELECT ROUND(nota.finalgrade,2), UPPER(gc.fullname)
                                                            FROM mooc_grade_grades nota
                                                    INNER JOIN mooc_grade_items it ON nota.itemid=it.id AND courseid=%s AND itemtype='category'
                                                    INNER JOIN mooc_grade_categories gc ON gc.courseid=it.courseid AND gc.id=it.iteminstance AND gc.depth=2
                                                    INNER JOIN mooc_user us ON nota.userid=us.id
                                                    WHERE us.username = '%s' and  UPPER(gc.fullname)='RE'
                                                    ORDER BY it.sortorder
                                                """ % (str(idcursomoodle), usuario)

                cursor.execute(sql)
                results = cursor.fetchall()
                if results:
                    for notasmooc in results:
                        campo = materiaasignada.campo(notasmooc[1].upper())
                        if not campo:
                            print('revisar curso moodle - ', materiaasignada.materia.id, 'idcursomoodle -',
                                  materiaasignada.materia.idcursomoodle)
                        if type(notasmooc[0]) is Decimal:
                            if null_to_decimal(campo.valor) != float(notasmooc[0]):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
                                                                calificacion=notasmooc[0])
                                auditorianotas.save()
                                print('importacion exitosa - ', materiaasignada)

                        else:
                            if null_to_decimal(campo.valor) != float(0):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                                auditorianotas.save()
                                print('importacion exitosa - ', materiaasignada)

                else:
                    detallemodelo = DetalleModeloEvaluativo.objects.get(pk=125)
                    campo = materiaasignada.campo(detallemodelo.nombre)
                    actualizar_nota_planificacion(materiaasignada.id, detallemodelo.nombre, 0)
                    auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                    auditorianotas.save()

            print('PROCESO FINALIZADO')

        except Exception as ex:
            msg = ex.__str__()

            textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
            print(textoerror)
            print(msg)


#calificacion_transversales_n1()
# calificacion_transversales_rn()
#calificacion_transversales_en_linea()

def calificacion_transversales_re_presencial_semipresencial():
    with transaction.atomic():
        try:
            periodo = Periodo.objects.get(id=177)
            asignaturas = DetalleGrupoAsignatura.objects.values_list('asignatura_id', flat=True).filter(status=True,
                                                                                                        grupo_id__in=[1,2,3])
            materiaslenguaje = MateriaAsignada.objects.filter(id=2997717, status=True,
                                                              materia__asignatura_id__in=asignaturas,
                                                              matricula__nivel__periodo=periodo,
                                                              matricula__bloqueomatricula=False,
                                                              matricula__retiradomatricula=False, materia__status=True,
                                                              matricula__status=True,
                                                              matricula__inscripcion__carrera__modalidad__in=[1,2],
                                                              materia__modeloevaluativo_id=27)
            cursor = connections['moodle_db'].cursor()
            for materiaasignada in materiaslenguaje:
                usuario = materiaasignada.matricula.inscripcion.persona.usuario.username
                idcursomoodle = materiaasignada.materia.idcursomoodle
                # SE NECESITA EL ID DE CURSO MOODLE
                sql = """
                                                    SELECT ROUND(nota.finalgrade,2), UPPER(gc.fullname)
                                                            FROM mooc_grade_grades nota
                                                    INNER JOIN mooc_grade_items it ON nota.itemid=it.id AND courseid=%s AND itemtype='category'
                                                    INNER JOIN mooc_grade_categories gc ON gc.courseid=it.courseid AND gc.id=it.iteminstance AND gc.depth=2
                                                    INNER JOIN mooc_user us ON nota.userid=us.id
                                                    WHERE us.username = '%s' and  UPPER(gc.fullname)='RE'
                                                    ORDER BY it.sortorder
                                                """ % (str(idcursomoodle), usuario)

                cursor.execute(sql)
                results = cursor.fetchall()
                if results:
                    for notasmooc in results:
                        campo = materiaasignada.campo(notasmooc[1].upper())
                        # if not campo:
                        #     print('revisar curso moodle - ', materiaasignada.materia.id, 'idcursomoodle -', materiaasignada.materia.idcursomoodle)
                        if type(notasmooc[0]) is Decimal:
                            if null_to_decimal(campo.valor) != null_to_decimal(float(notasmooc[0]), 0):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
                                                                calificacion=notasmooc[0])
                                auditorianotas.save()
                                print(f'importacion exitosa: {materiaasignada} - antes: {null_to_decimal(campo.valor)}, ahora: {null_to_decimal(float(notasmooc[0]),0)}')

                        else:
                            if null_to_decimal(campo.valor) != float(0):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                                auditorianotas.save()
                                print(f'importacion exitosa: {materiaasignada} - antes:{campo.valor}, ahora 0')

                else:
                    detallemodelo = DetalleModeloEvaluativo.objects.get(pk=125)
                    campo = materiaasignada.campo(detallemodelo.nombre)
                    actualizar_nota_planificacion(materiaasignada.id, detallemodelo.nombre, 0)
                    auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                    auditorianotas.save()

            print('PROCESO FINALIZADO')

        except Exception as ex:
            msg = ex.__str__()

            textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
            print(textoerror)
            print(msg)

# calificacion_transversales_re_presencial_semipresencial()

def importar_cerrar_materias():
    with transaction.atomic():
        try:
            periodo = Periodo.objects.get(id=177)
            materias = Materia.objects.filter(status=True, nivel__periodo=periodo,cerrada=False, asignaturamalla__malla__carrera__coordinacion__in=[1,2,3,4,5])
            for materia in materias:
                materiasasignadas = MateriaAsignada.objects.filter(status=True, materia=materia, matricula__bloqueomatricula=False,
                                                              matricula__retiradomatricula=False, matricula__status=True, retiramateria=False)

                for materiaasignada in materiasasignadas:
                    # guardo_nota = False
                    if materiaasignada.materia.notas_de_moodle(materiaasignada.matricula.inscripcion.persona):
                        for notasmooc in materiaasignada.materia.notas_de_moodle(
                                materiaasignada.matricula.inscripcion.persona):
                            campo = materiaasignada.campo(notasmooc[1].upper())
                            if not campo:
                                print('revisar curso moodle - ', materiaasignada.materia.id, 'idcursomoodle -',
                                      materiaasignada.materia.idcursomoodle)
                            if type(notasmooc[0]) is Decimal:
                                if null_to_decimal(campo.valor) != float(notasmooc[0]):
                                    actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(),
                                                                  notasmooc[0])
                                    auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
                                                                    calificacion=notasmooc[0])
                                    auditorianotas.save()
                                    print('importacion exitosa - ', materiaasignada)

                            else:
                                if null_to_decimal(campo.valor) != float(0):
                                    actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(),
                                                                  notasmooc[0])
                                    auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
                                                                    calificacion=0)
                                    auditorianotas.save()
                                    print('importacion exitosa - ', materiaasignada)

                    else:
                        for detallemodelo in materiaasignada.materia.modeloevaluativo.detallemodeloevaluativo_set.filter(
                                migrarmoodle=True):
                            campo = materiaasignada.campo(detallemodelo.nombre)
                            actualizar_nota_planificacion(materiaasignada.id, detallemodelo.nombre, 0)
                            auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                            auditorianotas.save()

                for asig in materia.asignados_a_esta_materia():
                    asig.cerrado = True
                    asig.save(actualiza=False)
                    asig.actualiza_estado()
                for asig in materia.asignados_a_esta_materia():
                    asig.cierre_materia_asignada()

                materia.cerrado = True
                materia.fechacierre = datetime.now().date()
                materia.save()

            print('PROCESO FINALIZADO')

        except Exception as ex:
            msg = ex.__str__()

            textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
            print(textoerror)
            print(msg)


def cerrar_materias_transversales_1():
    materias = Materia.objects.filter(status=True, nivel__periodo_id=177, cerrado=False,
                                      asignaturamalla__malla__carrera__coordinacion__in=[1], modeloevaluativo_id=27)
    for materia in materias:
        for asig in materia.asignados_a_esta_materia():
            asig.cerrado = True
            asig.save(actualiza=False)
            asig.actualiza_estado()
        for asig in materia.asignados_a_esta_materia():
            asig.cierre_materia_asignada()

        materia.cerrado = True
        materia.fechacierre = datetime.now().date()
        materia.save()

#cerrar_materias_transversales_1()

def actualizar_nivel_inscripcion_malla1():
    matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=177, inscripcion__carrera_id__in=[128,153] )
    for matricula in matriculas:
        inscripcion = matricula.inscripcion
        print('ACTUALIZANDO- ', inscripcion.persona.cedula)
        inscripcion.actualizar_nivel()
        print('ACTUALIZADO')
    print('FIN')

#actualizar_nivel_inscripcion_malla1()

def calificacion_transversales_en_linea():
    try:
        periodo = Periodo.objects.get(id=177)
        asignaturas = DetalleGrupoAsignatura.objects.values_list('asignatura_id', flat=True).filter(status=True,
                                                                                                    grupo_id__in=[1, 2, 3])


        materias = Materia.objects.filter(status=True, nivel__periodo_id=177,
                                              asignaturamalla__asignatura_id__in=asignaturas,
                                          modeloevaluativo_id=27, asignaturamalla__malla__carrera__coordinacion__in=[1])

        for materia in materias:
            idcursomoodle=materia.idcursomoodle
            materiasasignadas= MateriaAsignada.objects.filter(status=True,
                                                          matricula__nivel__periodo=periodo,
                                                          materia=materia,
                                                          matricula__bloqueomatricula=False,
                                                          matricula__retiradomatricula=False, materia__status=True,
                                                          matricula__status=True,
                                                          matricula__inscripcion__carrera__modalidad__in=[1,2,3])

            cursor = connections['moodle_db'].cursor()
            for materiaasignada in materiasasignadas:
                # guardo_nota = False
                usuario = materiaasignada.matricula.inscripcion.persona.usuario.username
                # SE NECESITA EL ID DE CURSO MOODLE
                sql = """
                                                    SELECT ROUND(nota.finalgrade,2), UPPER(gc.fullname)
                                                            FROM mooc_grade_grades nota
                                                    INNER JOIN mooc_grade_items it ON nota.itemid=it.id AND courseid=%s AND itemtype='category'
                                                    INNER JOIN mooc_grade_categories gc ON gc.courseid=it.courseid AND gc.id=it.iteminstance AND gc.depth=2
                                                    INNER JOIN mooc_user us ON nota.userid=us.id
                                                    WHERE us.username = '%s' and UPPER(gc.fullname)='RE'
                                                    ORDER BY it.sortorder
                                                """ % (str(idcursomoodle), usuario)

                cursor.execute(sql)
                results = cursor.fetchall()
                if results:
                    for notasmooc in results:
                        campo = materiaasignada.campo(notasmooc[1].upper())
                        if not campo:
                            print('revisar curso moodle - ', materiaasignada.materia.id, 'idcursomoodle -',
                                  materiaasignada.materia.idcursomoodle)
                            continue
                        if type(notasmooc[0]) is Decimal:
                            if null_to_decimal(campo.valor) != float(notasmooc[0]):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
                                                                calificacion=notasmooc[0])
                                auditorianotas.save()
                                print('importacion exitosa - ', materiaasignada)

                        else:
                            if null_to_decimal(campo.valor) != float(0):
                                actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(), notasmooc[0])
                                auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                                auditorianotas.save()
                                print('importacion exitosa - ', materiaasignada)

                else:
                    detallemodelo = DetalleModeloEvaluativo.objects.get(pk=125)
                    campo = materiaasignada.campo(detallemodelo.nombre)
                    actualizar_nota_planificacion(materiaasignada.id, detallemodelo.nombre, 0)
                    auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                    auditorianotas.save()



            for asig in materia.asignados_a_esta_materia():
                asig.cerrado = True
                asig.save(actualiza=False)
                asig.actualiza_estado()
                asig.cierre_materia_asignada()



            print('PROCESO FINALIZADO')






    except Exception as ex:
        msg = ex.__str__()

        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)
        print(msg)

#calificacion_transversales_en_linea()

def actualizacion_malla():
    try:
        matriculas = Matricula.objects.filter(status=True, pk__in=[
            624030,
            624032,
            624033,
            624035,
            624037,
            624039,
            624040,
            624042,
            624044,
            624046,
            624047,
            624049,
            624051,
            624052,
            624054,
            624055,
            624057,
            624059,
            624060,
            624062,
            624064,
            624065,
            624067,
            624069,
            624071,
            624072,
            624074,
            624076,
            624078,
            624079,
            624082,
            624084,
            624087,
            624089,
            624092,
            624095,
            624097,
            624098,
            624101,
            624104,
            624105,
            624108,
            624110,
            624113,
            624115,
            624117,
            624120,
            624122,
            624124,
            624127,
            624130,
            624132,
            624135,
            624137,
            624140,
            624142,
            624145,
            624148,
            624149,
            624152,
            624154,
            624157,
            624160,
            624162,
            624164,
            624167,
            624170,
            624172,
            624175,
            624177,
            624179,
            624182,
            624186,
            624189,
            624192,
            624196,
            624198,
            624201,
            624205,
            624208,
            624212,
            624214,
            624217,
            624220,
            624223,
            624227,
            624232,
            624236,
            624239,
            624241,
            624245,
            624248,
            624250,
            624254,
            624257,
            624260,
            624263,
            624267,
            624269,
            624273,
            624277,
            624278,
            624282,
            624286,
            624290,
            624292,
            624296,
            624299,
            624301,
            624304,
            624306,
            624308,
            624311,
            624313,
            624316,
            624319,
            624320,
            624323,
            624326,
            624329,
            624331,
            659351

        ])
        for matricula in matriculas:
            if not Matricula.objects.filter(nivel__periodo_id=224, inscripcion_id=matricula.inscripcion_id, status=True):
                print(matricula)
                matricula.inscripcion.inscripcionmalla_set.all().delete()
                eInscripcionMalla = InscripcionMalla(inscripcion=matricula.inscripcion, malla_id=228)
                eInscripcionMalla.save()
                print('malla actualizada')
                matricula.inscripcion.actualizar_creditos()
                matricula.inscripcion.actualizar_nivel()
                print('PROCESO FINALIZADO')






    except Exception as ex:
        msg = ex.__str__()

        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)
        print(msg)

#actualizacion_malla()

def actualizar_distributivo():
    try:

        periodo = Periodo.objects.get(pk=224)
        profesores = ProfesorMateria.objects.filter(status=True, materia__status=True, materia__nivel__periodo=periodo, materia__asignaturamalla__malla__carrera__coordinacion__id__in=[1, 2, 3, 4, 5]).distinct('profesor_id').order_by('profesor_id')
        for pm in profesores:
            totalhoras = ProfesorMateria.objects.filter(status=True, pk=pm.id).aggregate(valor=Sum('hora'))['valor']
            totalhoras = totalhoras if totalhoras else 0

            criteriodocencia = CriterioDocenciaPeriodo.objects.filter(periodo=periodo, criterio__id=118).first()
            if not criteriodocencia:
                criteriodocencia = CriterioDocenciaPeriodo(periodo=periodo, criterio_id=118, minimo=1,
                                                           maximo=20)
                criteriodocencia.save()

            distributivo = pm.profesor.profesordistributivohoras_set.filter(status=True, periodo=periodo, bloqueardistributivo=False).first()
            if distributivo:
                detalle = distributivo.detalle_horas_docencia().filter(criteriodocenciaperiodo=criteriodocencia)
                if detalle.values('id').exists():
                    detalle = distributivo.detalle_horas_docencia().get(criteriodocenciaperiodo=criteriodocencia)
                    totalhorasantigua = detalle.horas
                    detalle.horas = totalhoras
                    detalle.save()

                else:
                    if totalhoras > 0:
                        detalle = DetalleDistributivo(distributivo=distributivo,
                                                      criteriodocenciaperiodo=criteriodocencia,
                                                      horas=totalhoras)

                        detalle.save()
                if detalle:
                    # detalle.save(request)
                    detalle.verifica_actividades(totalhoras)
                    detalle.actualiza_padre()
                    print('distributivo actualizado')

        print('FIN PROCESO')


    except Exception as ex:
        msg = ex.__str__()

        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)
        print(msg)


#actualizar_distributivo()

def reajuste_horario_clase_seguida_pregrado(periodo_id):
    print(f"Inicio del proceso de reajuste de horarios del periodo_id: {periodo_id}")
    tipoprofesores = (
        (1, u'TEORIA'),
        (2, u'PRACTICA'),
        (7, u'VIRTUAL'),
        (11, u'AUTOR 2'),
        (12, u'AUTOR 1'),
        (10, u'ORIENTACION'),
        (14, u'PROFESOR TUTOR'),
        # (8, u'TUTOR VIRTUAL'),
        # (5, u'AYUDANT√çA')
    )

    tipohorarios = (
        (2, u'CLASE VIRTUAL SINCR√ìNICA'),
        (7, u'CLASE VIRTUAL ASINCR√ìNICA'),
        (8, u'CLASE REFUERZO SINCR√ìNICA'),
        (9, u'CLASE REFUERZO ASINCR√ìNICA'),
    )
    listadias = DIAS_CHOICES
    materias = Materia.objects.filter(nivel__periodo_id=periodo_id)

    total = len(materias)
    con = 0
    for materia in materias:
        Clase.objects.filter(status=True, materia=materia).update(subirenlace=False)
        print(f"Materia: {materia.__str__()}")
        for lisdia in listadias:
            for tipoprofesor in tipoprofesores:
                print(f"Tipo de profesor: {tipoprofesor[1]}")
                for tipohorario in tipohorarios:
                    print(f"Tipo de horario: {tipohorario[1]}")
                    if Clase.objects.filter(materia=materia, dia=lisdia[0], tipoprofesor_id=tipoprofesor[0], tipohorario=tipohorario[0]):
                        listaclase = Clase.objects.filter(materia=materia, dia=lisdia[0], tipoprofesor_id=tipoprofesor[0], tipohorario=tipohorario[0]).order_by('-id')
                        clasetrue = Clase.objects.filter(materia=materia, dia=lisdia[0], tipoprofesor_id=tipoprofesor[0], tipohorario=tipohorario[0]).order_by('-turno__comienza')[0]
                        clasetrue.subirenlace = True
                        clasetrue.save()
                        for lclase in listaclase:
                            if lclase.id != clasetrue.id:
                                lclase.subirenlace = False
                                lclase.save()
        con += 1
        print(f"{str(con)} / {str(total)}")
    print(f"Finalizo el proceso de reajuste de horarios del periodo_id: {periodo_id}")
#
#
#reajuste_horario_clase_seguida_pregrado(224)

def calificacion_complexivo():
    with transaction.atomic():
        try:
            periodo = Periodo.objects.get(id=177)
            materias = Materia.objects.filter(status=True, pk__in=[63116], nivel__periodo=periodo)
            cursor = connections['moodle_db'].cursor()
            for materia in materias:
                for materiaasignada in materia.asignados_a_esta_materia():
                    if materiaasignada.estado_id  == 2:
                        usuario = materiaasignada.matricula.inscripcion.persona.usuario.username
                        sql = """
                                                            SELECT ROUND(nota.finalgrade,2), UPPER(gc.fullname)
                                                                    FROM mooc_grade_grades nota
                                                            INNER JOIN mooc_grade_items it ON nota.itemid=it.id AND courseid=13969 AND itemtype='category'
                                                            INNER JOIN mooc_grade_categories gc ON gc.courseid=it.courseid AND gc.id=it.iteminstance AND gc.depth=2
                                                            INNER JOIN mooc_user us ON nota.userid=us.id
                                                            WHERE us.username = '%s' and  UPPER(gc.fullname)='N2'
                                                            ORDER BY it.sortorder
                                                        """ % (usuario)

                        cursor.execute(sql)
                        results = cursor.fetchall()
                        if results:
                            for notasmooc in results:
                                campo = materiaasignada.campo(notasmooc[1].upper())
                                if not campo:
                                    print('revisar curso moodle - ', materiaasignada.materia.id, 'idcursomoodle -',
                                          materiaasignada.materia.idcursomoodle)
                                if type(notasmooc[0]) is Decimal:
                                    if null_to_decimal(campo.valor) != float(notasmooc[0]):
                                        actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(),
                                                                      notasmooc[0])
                                        auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
                                                                        calificacion=notasmooc[0])
                                        auditorianotas.save()
                                        print('importacion exitosa - ', materiaasignada)

                                else:
                                    if null_to_decimal(campo.valor) != float(0):
                                        actualizar_nota_planificacion(materiaasignada.id, notasmooc[1].upper(),
                                                                      notasmooc[0])
                                        auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False,
                                                                        calificacion=0)
                                        auditorianotas.save()
                                        print('importacion exitosa - ', materiaasignada)

                        else:
                            detallemodelo = DetalleModeloEvaluativo.objects.get(pk=120)
                            campo = materiaasignada.campo(detallemodelo.nombre)
                            actualizar_nota_planificacion(materiaasignada.id, detallemodelo.nombre, 0)
                            auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=0)
                            auditorianotas.save()





            print('PROCESO FINALIZADO')

        except Exception as ex:
            msg = ex.__str__()

            textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
            print(textoerror)
            print(msg)

#calificacion_complexivo()

def actualizar_docentes_moodle():
    try:
        from moodle import moodle
        tipourl = 1
        periodo = Periodo.objects.get(pk=224)
        materias = Materia.objects.filter(status=True, nivel__periodo=periodo, modeloevaluativo_id=27, tipomateria=3)
        totalmaterias = materias.count()
        cont = 1

        for materia in materias:
            materia.crear_actualizar_docente_curso(moodle, tipourl)
            print('materia actualizada', cont, 'de', totalmaterias)
            cont += 1

        print('FIN PROCESO')


    except Exception as ex:
        msg = ex.__str__()

        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)
        print(msg)

#actualizar_docentes_moodle()

def proceso_cierre_ingles():
    from django.http import HttpResponse
    response = HttpResponse(content_type="application/ms-excel")
    response['Content-Disposition'] = 'attachment; filename=reporte_notas_ingles_segunda.xls'
    style0 = easyxf('font: name Times New Roman, color-index blue, bold off', num_format_str='#,##0.00')
    style_nb = easyxf('font: name Times New Roman, color-index blue, bold on', num_format_str='#,##0.00')
    style_sb = easyxf('font: name Times New Roman, color-index blue, bold on')
    title = easyxf('font: name Times New Roman, color-index blue, bold on , height 350; alignment: horiz centre')
    style1 = easyxf(num_format_str='D-MMM-YY')
    font_style = XFStyle()
    font_style.font.bold = True
    font_style2 = XFStyle()
    font_style2.font.bold = False
    wb = xlwt.Workbook()
    ws = wb.add_sheet('Sheetname')
    estilo = xlwt.easyxf('font: height 350, name Arial, colour_index black, bold on, italic on; align: wrap on, vert centre, horiz center;')
    ws.write_merge(0, 0, 0, 9, 'UNIVERSIDAD ESTATAL DE MILAGRO', estilo)
    output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
    nombre = "reporte_notas_ingles_segunda" + datetime.now().strftime('%Y%m%d_%H%M%S') + ".xls"
    filename = os.path.join(output_folder, nombre)
    columns = [(u"CEDULA", 6000),
               (u"APELLIDOS Y NOMBRES", 6000),
               (u"CARRERA", 6000),
               (u"URL", 6000),
               (u"MODULO", 6000),
               (u"NOTA BUCKINGHAM", 6000),
               (u"NOTA MATERIA", 6000),
               (u"ESTADO", 6000),
               (u"CURSO", 6000),
               (u"TIENE DEUDA", 6000),
               (u"VALOR PAGADO", 6000),
               (u"MATERIA ASIGNADA", 6000)
               ]
    row_num = 3
    for col_num in range(len(columns)):
        ws.write(row_num, col_num, columns[col_num][0], font_style)
        ws.col(col_num).width = columns[col_num][1]
    row_num = 4
    cont=0
    materiasasignadas=MateriaAsignada.objects.filter(status=True,materia__inglesepunemi=True,cerrado=False,
                                                     matricula__status=True, retiramateria=False,materia__nivel__periodo=periodo,
                                                     materia__nivel_id=id_nivel,materia__status=True).order_by('matricula__inscripcion__carrera')
    print(u"%s"%(materiasasignadas.values('id').count()))
    for materiaasignada in materiasasignadas:
        with transaction.atomic():
            try:
                idcursomoodle = materiaasignada.materia.idcursomoodle
                url = 'https://upei.buckcenter.edu.ec/usernamecoursetograde.php?username=%s&curso=%s' % (materiaasignada.matricula.inscripcion.persona.identificacion(),idcursomoodle)
                cont += 1
                ws.write(row_num, 0, materiaasignada.matricula.inscripcion.persona.identificacion())
                ws.write(row_num, 1, materiaasignada.matricula.inscripcion.persona.apellido1 + ' ' + materiaasignada.matricula.inscripcion.persona.apellido2 + ' ' + materiaasignada.matricula.inscripcion.persona.nombres)
                ws.write(row_num, 2, str(materiaasignada.matricula.inscripcion.carrera))
                ws.write(row_num, 3, str(url))
                req = Request(url)
                response = urlopen(req)
                result = json.loads(response.read().decode())
                idcurso = int(result['idcurso'])
                print(u"----- %s -----" % cont)
                print(u"PROCESANDO - %s" % materiaasignada)
                print(u"%s" % result)
                print(u"ID CURSO: %s" % idcurso)
                valores=0
                rubros = materiaasignada.rubro.filter(status=True, observacion='INGL√âS')
                for rubro in rubros:
                    valores= rubro.total_pagado()
                #         tiene_pagos=False
                # if tiene_pagos:
                if idcurso != idcursomoodle:
                    ws.write(row_num, 4, u"%s" % materiaasignada.materia)
                    ws.write(row_num, 5, u"NO COINCIDE CURSO")
                    ws.write(row_num, 6, u"NO COINCIDE CURSO")
                    ws.write(row_num, 7, u"NO COINCIDE CURSO")
                    ws.write(row_num, 8, u"NO COINCIDE CURSO")
                    ws.write(row_num, 9, u"NO COINCIDE CURSO")
                    ws.write(row_num, 10, u"NO COINCIDE CURSO")
                else:
                    nota = None
                    try:
                        nota = null_to_decimal(result['nota'], 0)
                    except:
                        if result['nota'] == '-' or result['nota'] == None :
                            nota = 0
                   # if nota>=70:
                        if (nota != materiaasignada.notafinal and type(nota) in [int,float]) or nota == 0 :
                            campo = materiaasignada.campo('EX')
                            actualizar_nota_planificacion(materiaasignada.id, 'EX', nota)
                            auditorianotas = AuditoriaNotas(evaluaciongenerica=campo, manual=False, calificacion=nota)
                            auditorianotas.save()
                            materiaasignada.importa_nota = True
                            materiaasignada.cerrado = True
                            materiaasignada.fechacierre = datetime.now().date()
                            materiaasignada.save()
                            d = locals()
                            exec(materiaasignada.materia.modeloevaluativo.logicamodelo, globals(), d)
                            d['calculo_modelo_evaluativo'](materiaasignada)
                            materiaasignada.cierre_materia_asignada()
                            print(u"IMPORTA Y CIERRA -- %s" % (materiaasignada))
                    ws.write(row_num, 4, u"%s" % materiaasignada.materia)
                    ws.write(row_num, 5, u"%s" % result['nota'])
                    ws.write(row_num, 6, nota)
                    ws.write(row_num, 7, u"APROBADO" if nota >= 70 else "REPROBADO")
                    ws.write(row_num, 8, u"COINCIDE CURSO" if idcurso == materiaasignada.materia.idcursomoodle else "NO COINCIDE CURSO")
                    ws.write(row_num, 9, u"%s"% rubros.count() if rubros else 0)
                    ws.write(row_num, 10, u"%s"% valores if rubros else 0)
                    ws.write(row_num, 11, u"%s"% materiaasignada.id)

                        # if not MateriaAsignadaRetiro.objects.filter(status=True, materiaasignada=materiaasignada).exists():
                        #     retiro = MateriaAsignadaRetiro(materiaasignada=materiaasignada,
                        #                                    motivo='RETIRO POR T√âRMINO DEl PROCESO DE INGL√âS 1S 2023 BUCKINGHAM',
                        #                                    valida=False,
                        #                                    fecha=datetime.now().date())
                        #     retiro.save()
                        # if not materiaasignada.retiramateria:
                        #     materiaasignada.retiramateria = True
                        #     materiaasignada.save()
                        # rubros=materiaasignada.rubro.filter(status=True,observacion='INGL√âS REGULAR 2023 AGOSTO 2023')
                        # for rubro in rubros:
                        #     if not rubro.pagos():
                        #         rubro.delete()
                        #         print(u"ELIMINADO -- %s" % (materiaasignada))
                    # ws.write(row_num, 3, u"%s" % materiaasignada.materia)
                    # ws.write(row_num, 4, u"%s" % result['nota'])
                    # ws.write(row_num, 5, nota)
                    # ws.write(row_num, 6, u"RETIRADO")
                    # ws.write(row_num, 7,u"COINCIDE CURSO" if idcurso == materiaasignada.materia.idcursomoodle else "NO COINCIDE CURSO")
            except Exception as ex:
                transaction.set_rollback(True)
                print('error: %s' % (ex))
                ws.write(row_num, 4, u"%s" % ex)
                ws.write(row_num, 5, u"%s" % ex)
                ws.write(row_num, 6, u"%s" % ex)
                ws.write(row_num, 7, u"%s" % ex)
                ws.write(row_num, 8, u"%s" % ex)
                ws.write(row_num, 9, u"%s" % ex)
                ws.write(row_num, 10, u"%s" % ex)
                pass
            row_num += 1
    wb.save(filename)
    print("FIN: ", filename)

@transaction.atomic()
def eliminar_matricula():
    try:

        cnmoodle = connections['moodle_db'].cursor()
        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=224, retiradomatricula=False, aranceldiferido=2)
        for matricula in matriculas:
            abono=False
            rubros = Rubro.objects.filter(status=True, matricula=matricula, cancelado=False, fechavence__lt=datetime(2023, 10, 29, 0, 0, 0).date())
            if rubros:
                for rubro in rubros:
                    if rubro.tiene_pagos():
                        abono = True
                        break
                if not abono:
                    MateriaAsignada.objects.filter(status=True, matricula=matricula).update(status=False)
                    usermoodle = matricula.inscripcion.persona.usuario.username

                    if usermoodle:
                        sql = f"Select id, username From mooc_user Where username='{usermoodle}'"
                        cnmoodle.execute(sql)
                        registro = cnmoodle.fetchall()
                        try:
                            usermoodle = registro[0][1]
                            # Asignar estado suspended = 1 para que no pueda acceder al aula virtual
                            sql = f"Update mooc_user Set suspended=1 Where username='{usermoodle}'"
                            cnmoodle.execute(sql)
                        except Exception as ex:
                            print(f'********--------{usermoodle}--------********')
                    matricula.status=False
                    matricula.save(update_fields=['status'])
                    print('matricula eliminada -', matricula.id )


                else:
                    matricula.bloqueomatricula = True
                    matricula.save(update_fields=['bloqueomatricula'])
                    usermoodle = matricula.inscripcion.persona.usuario.username
                    print('matricula bloqueada -', matricula.id)

                    if usermoodle:
                        sql = f"Select id, username From mooc_user Where username='{usermoodle}'"
                        cnmoodle.execute(sql)
                        registro = cnmoodle.fetchall()
                        try:
                            usermoodle = registro[0][1]
                            # Asignar estado suspended = 1 para que no pueda acceder al aula virtual
                            sql = f"Update mooc_user Set suspended=1 Where username='{usermoodle}'"
                            cnmoodle.execute(sql)
                        except Exception as ex:
                            print(f'********--------{usermoodle}--------********')

        print('fin 1----------------')
    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)

#eliminar_matricula()

@transaction.atomic()
def bloquear_matricula():
    try:
        cnmoodle = connections['moodle_db'].cursor()
        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=224, retiradomatricula=False, aranceldiferido=1)
        for matricula in matriculas:
            rubros = Rubro.objects.filter(status=True, matricula=matricula, cancelado=False, fechavence__lt=datetime(2023, 10, 29, 0, 0, 0).date())
            if rubros:
                matricula.bloqueomatricula = True
                matricula.save(update_fields=['bloqueomatricula'])
                usermoodle = matricula.inscripcion.persona.usuario.username
                print('matricula bloqueada -', matricula.id)

                if usermoodle:
                    sql = f"Select id, username From mooc_user Where username='{usermoodle}'"
                    cnmoodle.execute(sql)
                    registro = cnmoodle.fetchall()
                    try:
                        usermoodle = registro[0][1]
                        # Asignar estado suspended = 1 para que no pueda acceder al aula virtual
                        sql = f"Update mooc_user Set suspended=1 Where username='{usermoodle}'"
                        cnmoodle.execute(sql)
                    except Exception as ex:
                        print(f'********--------{usermoodle}--------********')

        print('fin 2----------------')
    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)

#bloquear_matricula()

def actualizar_creditos():
    try:
        inscripciones= InscripcionMalla.objects.filter(status=True, malla_id=92)
        total = inscripciones.count()
        cont=0
        for inscripcionm in inscripciones:
            inscripcionm.inscripcion.actualizar_creditos()
            cont += 1
            print('creditos actualizados', cont, 'de', total)
        print('FIN')
    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)

#actualizar_creditos()

def PONER_FIRMAR_MATERIAS_INGLES(id_nivel):
    try:
        from sga.models import  Nivel, Persona,ConfiguracionDocumentoEvaluaciones
        nv = Nivel.objects.filter(id=id_nivel)
        firma1 = Persona.objects.get(id=57920)
        firma2 = Persona.objects.get(id=29110)
        for nivel in nv:
            for mt in nivel.materia_set.filter(status=True, asignaturamalla__malla_id=353,inglesepunemi=True):
                if not ConfiguracionDocumentoEvaluaciones.objects.values().filter(materia=mt, estado=1, status=True).exists():
                    cde = ConfiguracionDocumentoEvaluaciones(materia=mt, estado=1, observacion="Ninguna", status=True)
                    cde.save()
                    if not DocumentosFirmadosEvaluaciones.objects.filter(persona_id=firma1.pk, configuraciondoc_id=cde.id, status=True, subido=False):
                        dfe1 = DocumentosFirmadosEvaluaciones(configuraciondoc_id=cde.id, status=True, subido=False, persona=firma1, cargo=u"Gerente General BUCKINGHAM ENGLISH CENTER S.A. BUCKCENTER. CONTRATO N¬∞ SIE-UNEMI-588-2023")
                        dfe1.save()
                    if not DocumentosFirmadosEvaluaciones.objects.filter(persona_id=firma2.pk, configuraciondoc_id=cde.id, status=True, subido=False):
                        dfe2 = DocumentosFirmadosEvaluaciones(configuraciondoc_id=cde.id, status=True, subido=False, persona=firma2, cargo=u"Secretaria General UNEMI")
                        dfe2.save()
                    print(u"FIRMA REGISTRADA: %s"%mt)
    except Exception as ex:
        print('error: %s' % ex)

def mtpsicologia_2():
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:

        archivo_ = 'MT_PSICOLOGIA_2'
        url_archivo = "{}/media/{}.xlsx".format(SITE_STORAGE, archivo_)

        __author__ = 'Unemi'
        workbook = xlsxwriter.Workbook(url_archivo, {'constant_memory': True})
        ws = workbook.add_worksheet('resultados')
        fuentecabecera = workbook.add_format({
            'align': 'center',
            'bg_color': 'silver',
            'border': 1,
            'bold': 1
        })
        formatoceldacenter = workbook.add_format({
            'border': 1,
            'valign': 'vcenter',
            'align': 'center'})




        columns = [
            (u"DOCUMENTO_ESTUDIANTE", 20, 0),
            (u"APELLIDOS_NOMBRES", 120, 1),
            (u"EMAIL", 60, 2),
            (u"TELEFONO", 20, 3),
            (u"CARRERA", 120, 4),
            (u"MALLA_ESTUDIANTE", 120, 5),
            (u"ULTIMO_NIVEL", 60, 6),
            (u"PERIODO", 100, 7),
            (u"HORAS_PRACTICAS_PENDIENTES", 20, 8),
            (u"HORAS_PRACTICAS_CUMPLIDAS", 20, 9),
            (u"NUM_MODULOS_INGLES_APROBADOS", 20, 10),
            (u"NUM_MODULOS_COMPUTACION_APROBADOS", 20, 11),
            (u"HORAS_VINCULACION_CUMPLIDAS", 20, 12),
            (u"HORAS_VINCULACION_PENDIENTES", 20, 13),
            (u"MATERIA", 120, 14),
            (u"ESTADO_MATERIA", 20, 15),
            (u"VECES_MATRICULA", 20, 16),
            (u"NIVEL_MATERIA", 20, 17),
            (u"FECHA_ULTIMA_MATRICULA", 20, 18),
        ]

        row_num, numcolum = 0, 0
        for col_num in range(len(columns)):
            ws.write(row_num, numcolum, columns[col_num][0], fuentecabecera)
            ws.set_column(row_num, numcolum, columns[col_num][1])
            numcolum += 1

        #DIVIDIR EL FILTRO -0954282620-
        row_num, leido = 1, 1
        qsinscripcion = Inscripcion.objects.filter(status=True, carrera__in=[136, 18, 122, 137, 58, 120]).exclude(graduado__status=True)
        qsincripcionf= qsinscripcion.filter(perfilusuario__isnull=False,perfilusuario__visible=True)
        qsincripcionq= qsincripcionf.filter(matricula__isnull=False)
        qsincripcionw=qsincripcionq.filter(perfilusuario__inscripcionprincipal=True).exclude(graduado__status=True)
        qspersona = Persona.objects.filter(status=True, id__in=qsincripcionw.values_list('persona__id',flat=True))
        for persona in qspersona:
            inscripcion = Inscripcion.objects.filter(carrera__in=[136, 18, 122, 137, 58, 120], status=True, persona=persona).order_by('-id').first()
            print(f"{len(qsincripcionw)}/{leido} - {inscripcion}")
            mallaest_ = inscripcion.inscripcionmalla_set.filter(status=True).order_by('-id')
            malla_ = None
            if mallaest_:
                malla_ = mallaest_.first()

            ingles_aprobado = inscripcion.recordacademico_set.filter(status=True, aprobada=True, asignatura__nombre__icontains='INGLES').count()
            computacion_aprobado = inscripcion.recordacademico_set.filter(status=True, aprobada=True, asignatura__in=[1053, 1054]).count()
            materias_reprobadas = inscripcion.recordacademico_set.filter(status=True, aprobada=False).order_by('asignaturamalla__nivelmalla', 'asignatura', 'fecha')
            for materia in materias_reprobadas:
                ultimamatricula = inscripcion.matricula_set.filter(status=True).exclude(retiradomatricula=True).order_by('-id').first()
                ws.write(row_num, 0, inscripcion.persona.documento(), formatoceldacenter)
                ws.write(row_num, 1, f"{inscripcion.persona.apellido1} {inscripcion.persona.apellido2} {inscripcion.persona.nombres}", formatoceldacenter)
                ws.write(row_num, 2, inscripcion.persona.emailinst, formatoceldacenter)
                ws.write(row_num, 3, inscripcion.persona.telefono, formatoceldacenter)
                ws.write(row_num, 4, inscripcion.carrera.__str__(), formatoceldacenter)
                if malla_:
                    ws.write(row_num, 5, f"{malla_.malla.__str__()}", formatoceldacenter)
                else:
                    ws.write(row_num, 5, '', formatoceldacenter)
                ws.write(row_num, 6, inscripcion.nivelmatriculamalla().__str__(), formatoceldacenter)
                if ultimamatricula:
                    if ultimamatricula.nivel:
                        ws.write(row_num, 7, ultimamatricula.nivel.periodo.__str__(), formatoceldacenter)
                ws.write(row_num, 8, inscripcion.mi_malla().horas_practicas, formatoceldacenter)
                ws.write(row_num, 9, inscripcion.numero_horas_practicas_pre_profesionales(), formatoceldacenter)
                ws.write(row_num, 10, ingles_aprobado, formatoceldacenter)
                ws.write(row_num, 11, computacion_aprobado, formatoceldacenter)
                ws.write(row_num, 12, inscripcion.numero_horas_proyectos_vinculacion(), formatoceldacenter)
                ws.write(row_num, 13, inscripcion.mi_malla().horas_vinculacion, formatoceldacenter)
                ws.write(row_num, 14, materia.asignatura.__str__(), formatoceldacenter)
                ws.write(row_num, 15, 'REPROBADA', formatoceldacenter)
                ws.write(row_num, 16, materia.matriculas, formatoceldacenter)
                if materia.asignaturamalla:
                    ws.write(row_num, 17, materia.asignaturamalla.nivelmalla.__str__(), formatoceldacenter)
                if ultimamatricula:
                    if ultimamatricula.fecha_creacion:
                        ws.write(row_num, 18, str(ultimamatricula.fecha_creacion.year), formatoceldacenter)
                row_num += 1
            materias_vistas = inscripcion.recordacademico_set.filter(status=True).values_list('asignatura__id', flat=True)
            materias_por_ver = AsignaturaMalla.objects.filter(status=True, malla=malla_.malla).exclude(asignatura__in=list(materias_vistas)).order_by('nivelmalla', 'asignatura')
            for materia in materias_por_ver:
                ultimamatricula = inscripcion.matricula_set.filter(status=True).exclude(retiradomatricula=True).order_by('-id').first()
                ws.write(row_num, 0, inscripcion.persona.documento(), formatoceldacenter)
                ws.write(row_num, 1, f"{inscripcion.persona.apellido1} {inscripcion.persona.apellido2} {inscripcion.persona.nombres}", formatoceldacenter)
                ws.write(row_num, 2, inscripcion.persona.emailinst, formatoceldacenter)
                ws.write(row_num, 3, inscripcion.persona.telefono, formatoceldacenter)
                ws.write(row_num, 4, inscripcion.carrera.__str__(), formatoceldacenter)
                if malla_:
                    ws.write(row_num, 5, f"{malla_.malla.__str__()}", formatoceldacenter)
                else:
                    ws.write(row_num, 5, '', formatoceldacenter)
                ws.write(row_num, 6, inscripcion.nivelmatriculamalla().__str__(), formatoceldacenter)
                if ultimamatricula:
                    if ultimamatricula.nivel:
                        ws.write(row_num, 7, ultimamatricula.nivel.periodo.__str__(), formatoceldacenter)
                ws.write(row_num, 8, inscripcion.mi_malla().horas_practicas, formatoceldacenter)
                ws.write(row_num, 9, inscripcion.numero_horas_practicas_pre_profesionales(), formatoceldacenter)
                ws.write(row_num, 10, ingles_aprobado, formatoceldacenter)
                ws.write(row_num, 11, computacion_aprobado, formatoceldacenter)
                ws.write(row_num, 12, inscripcion.numero_horas_proyectos_vinculacion(), formatoceldacenter)
                ws.write(row_num, 13, inscripcion.mi_malla().horas_vinculacion, formatoceldacenter)
                ws.write(row_num, 14, materia.asignatura.__str__(), formatoceldacenter)
                ws.write(row_num, 15, 'PENDIENTE', formatoceldacenter)
                ws.write(row_num, 16, 0, formatoceldacenter)
                if materia.nivelmalla:
                    ws.write(row_num, 17, materia.nivelmalla.__str__(), formatoceldacenter)
                if ultimamatricula:
                    if ultimamatricula.fecha_creacion:
                        ws.write(row_num, 18, str(ultimamatricula.fecha_creacion.year), formatoceldacenter)
                row_num += 1
            leido += 1
        # wb.save(url_archivo)
        print(url_archivo)
        workbook.close()
    except Exception as ex:
        textoerror = '{} Linea:{}'.format(str(ex), sys.exc_info()[-1].tb_lineno)
        print(textoerror)


#mtpsicologia_2()

def eliminar_matricula_automatricula():
    try:

        cnmoodle = connections['moodle_db'].cursor()
        matriculas = Matricula.objects.filter(pk__in=[702079,
702096,
702101,
702294,
702411,
702447,
702464,
702496,
702510,
702524,
702556,
702584,
702672,
702682,
702712,
702846,
702862,
702927,
703169,
703173,
703191,
703227,
703296,
703333,
703334,
703347,
703370,
703399,
703430,
703494,
703742,
703760,
703765,
703795,
703929,
704071,
704087,
704113,
704280,
704281,
704304,
704384,
704433,
704472,
704753,
704924,
704991,
705124,
705228,
705723,
705791,
705902,
705952,
706295,
706352,
706443,
706572,
706620,
706622,
706745,
706841,
706988,
707028,
707041,
707106,
707122,
707154,
707179,
707209,
707221,
707229,
707376,
707449,
707521,
707576,
707587,
707637,
707643,
707653,
707696,
707703,
707715,
707716,
707987,
708045,
708065,
708259,
708277,
708649,
708746,
709068,
709226,
709276,
709298,
709398,
709519,
709756,
709776,
709841,
710099,
710112,
710155,
710201,
710222,
710228,
710282,
710427,
710493,
710494,
710521,
710559,
710570,
710599,
710631,
710655,
710711,
710854,
711026,
711161,
711229,
711251,
711326,
711339,
711355,
711472,
711492,
711508,
711586,
711678,
711723,
711761,
712220,
712275,
712292,
712484,
712495,
712571,
712796,
714505,
714518,
715133,
715915,
716596,
717210,
717461,
717774,
718170,
718471,
719302,
719970,
720068
])
        total = matriculas.count()
        cont=0
        for matricula in matriculas:
            Rubro.objects.filter(status=True, matricula=matricula, cancelado=False).update(status=False)
            MateriaAsignada.objects.filter(status=True, matricula=matricula).update(status=False)
            usermoodle = matricula.inscripcion.persona.usuario.username

            if usermoodle:
                sql = f"Select id, username From mooc_user Where username='{usermoodle}'"
                cnmoodle.execute(sql)
                registro = cnmoodle.fetchall()
                try:
                    usermoodle = registro[0][1]
                    # Asignar estado suspended = 1 para que no pueda acceder al aula virtual
                    sql = f"Update mooc_user Set suspended=1 Where username='{usermoodle}'"
                    cnmoodle.execute(sql)
                except Exception as ex:
                    print(f'********--------{usermoodle}--------********')
            matricula.status = False
            matricula.save(update_fields=['status'])
            cont += 1
            print('matricula eliminada -', cont, 'de', total)


        print('fin ')
    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)

#eliminar_matricula_automatricula()

def CrearExamenFinal():
    materias = Materia.objects.filter(status=True, nivel__periodo_id=224, asignaturamalla__malla__modalidad_id=3)
    for materia in materias:
        silabosemanales= SilaboSemanal.objects.filter(status=True, silabo__status=True, silabo__materia=materia, numsemana=16)

def desbloquear_matricula():
    try:
        cnmoodle = connections['moodle_db'].cursor()
        matriculas = Matricula.objects.filter(status=True, nivel__periodo_id=224, retiradomatricula=False, aranceldiferido=1)
        totalrubros=0
        rubrospagados = 0
        for matricula in matriculas:
            rubros = Rubro.objects.filter(status=True, matricula=matricula, fechavence__lt=datetime(2023, 10, 29, 0, 0, 0).date())
            if rubros:
                totalrubros=rubros.count()
                rubrospagados=0
                for rubro in rubros:
                    if rubro.cancelado:
                        rubrospagados += 1

                if totalrubros == rubrospagados:
                    matricula.bloqueomatricula = False
                    matricula.save(update_fields=['bloqueomatricula'])
                    usermoodle = matricula.inscripcion.persona.usuario.username
                    print('matricula desbloqueada -', matricula.id)

                    if usermoodle:
                        sql = f"Select id, username From mooc_user Where username='{usermoodle}'"
                        cnmoodle.execute(sql)
                        registro = cnmoodle.fetchall()
                        try:
                            usermoodle = registro[0][1]
                            # Asignar estado suspended = 1 para que no pueda acceder al aula virtual
                            sql = f"Update mooc_user Set suspended=0 Where username='{usermoodle}'"
                            cnmoodle.execute(sql)
                        except Exception as ex:
                            print(f'********--------{usermoodle}--------********')






        print('fin 2----------------')
    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)

#desbloquear_matricula()

def reporte_examen_segundo_parcial_en_linea(ePeriodo):
    ePersona = Persona.objects.get(pk=29898)
    eNotificacion = Notificacion(cuerpo='Generaci√≥n de reporte de examenes 2S 2023 PREGRADO',
                                 titulo=f'(En proceso) Generaci√≥n de reporte de examenes 2S 2023 PREGRADO',
                                 destinatario=ePersona,
                                 url='',
                                 prioridad=1,
                                 app_label='SGA',
                                 fecha_hora_visible=datetime.now() + timedelta(days=5),
                                 tipo=2,
                                 en_proceso=True)
    eNotificacion.save()
    nombre_archivo = "reporte_examen_segundo_parcial_transversales_2s2023"
    output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
    nombre = nombre_archivo + "_" + datetime.now().strftime('%Y%m%d_%H%M%S') + ".xlsx"
    directory = os.path.join(output_folder, nombre)
    output = io.BytesIO()
    workbook = xlsxwriter.Workbook(directory, {'constant_memory': True})
    ws = workbook.add_worksheet("Hoja1")
    fuentecabecera = workbook.add_format({
        'align': 'center',
        'bg_color': 'silver',
        'border': 1,
        'bold': 1
    })

    formatoceldacenter = workbook.add_format({
        'border': 1,
        'valign': 'vcenter',
        'align': 'center'})

    formatoceldacenter = workbook.add_format({
        'border': 1,
        'valign': 'vcenter',
        'align': 'center'})

    fuenteencabezado = workbook.add_format({
        'align': 'center',
        'bg_color': '#1C3247',
        'font_color': 'white',
        'border': 1,
        'font_size': 24,
        'bold': 1
    })

    columnas = [
        (u"#", 10),
        (u"ID_MATERIA", 20),
        (u"CARRERA", 20),
        (u"MATERIA", 20),
        (u"TIPO", 20),
        (u"NIVEL", 20),
        (u"ID_CURSO", 80),
        (u"ID_TEST", 80),
        (u"ID_ACTIVIDAD", 80),
    ]
    ws.merge_range(0, 0, 0, columnas.__len__() - 1, 'UNIVERSIDAD ESTATAL ESTATAL DE MILAGRO', fuenteencabezado)
    ws.merge_range(1, 0, 1, columnas.__len__() - 1, f'EXAMENES DE SEGUNDO PARCIAL EN PREGRADO EN EL PERIODO {ePeriodo}', fuenteencabezado)
    row_num, numcolum = 2, 0
    for col_name in columnas:
        ws.write(row_num, numcolum, col_name[0], fuentecabecera)
        ws.set_column(numcolum, numcolum, col_name[1])
        numcolum += 1
    row_num = 3
    contador = 0
    eNiveles = Nivel.objects.filter(status=True, periodo=ePeriodo, nivellibrecoordinacion__coordinacion_id__in=[1, 2, 3, 4, 5])
    eMaterias = Materia.objects.filter(status=True, nivel__in=eNiveles, asignaturamalla__malla__modalidad_id=3)
    for eMateria in eMaterias:
        ePlanificacionClaseSilabos = PlanificacionClaseSilabo.objects.filter(status=True, parcial=2, examen=True, tipoplanificacion__periodo=ePeriodo, tipoplanificacion__planificacionclasesilabo_materia__materia=eMateria)
        eSilabo = Silabo.objects.filter(materia=eMateria, codigoqr=True, status=True).first()
        eSilaboSemanales = SilaboSemanal.objects.filter(silabo=eSilabo, numsemana__in=ePlanificacionClaseSilabos.values_list('semana', flat=True), examen=True)
        eDetalleModeloEvaluativos = DetalleModeloEvaluativo.objects.filter(nombre="EX2", modelo=eMateria.modeloevaluativo, status=True)
        eTestSilaboSemanales = TestSilaboSemanal.objects.filter(status=True, silabosemanal__in=eSilaboSemanales, tiporecurso_id=11)
        for eTestSilaboSemanal in eTestSilaboSemanales:
            print("eTestSilaboSemanal: ", eTestSilaboSemanal)
            print("idtestmoodle: ", eTestSilaboSemanal.idtestmoodle)
            contador += 1
            ws.write(row_num, 0, contador, formatoceldacenter)  #
            ws.write(row_num, 1, "%s" % eMateria.id, formatoceldacenter) #ID_MATERIA
            ws.write(row_num, 2, "%s" % eMateria.asignaturamalla.malla.carrera.nombre, formatoceldacenter) #CARRERA
            ws.write(row_num, 3, "%s" % eMateria.__str__(), formatoceldacenter) #MATERIA
            ws.write(row_num, 4, "%s" % eMateria.get_tipomateria_display(), formatoceldacenter) #TIPO
            ws.write(row_num, 5, "%s" % eMateria.asignaturamalla.nivelmalla.nombre, formatoceldacenter) #NIVEL
            ws.write(row_num, 6, "%s" % eMateria.idcursomoodle if eMateria.idcursomoodle else 0, formatoceldacenter)
            ws.write(row_num, 7, "%s" % eTestSilaboSemanal.idtestmoodle if eTestSilaboSemanal.idtestmoodle else 0, formatoceldacenter)
            ws.write(row_num, 8, "%s" % eTestSilaboSemanal.id, formatoceldacenter)
            row_num += 1
    workbook.close()
    print("ARCHIVO: ", directory)
    eNotificacion.url = "{}/{}".format(MEDIA_URL, nombre)
    eNotificacion.titulo = f'(Finalizado) Generaci√≥n de reporte de examenes 2S 2023 PREGRADO'
    eNotificacion.save()
    print("Proceso finalizado . . .")

def eliminar_examen_segundo_parcial_en_linea(ePeriodo):
    ePersona = Persona.objects.get(pk=29898)
    eNotificacion = Notificacion(cuerpo='Eliminaci√≥n examenes 2S 2023 PREGRADO',
                                 titulo=f'(En proceso) Eliminaci√≥n de examenes 2S 2023 PREGRADO',
                                 destinatario=ePersona,
                                 url='',
                                 prioridad=1,
                                 app_label='SGA',
                                 fecha_hora_visible=datetime.now() + timedelta(days=5),
                                 tipo=2,
                                 en_proceso=True)
    eNotificacion.save()

    eNiveles = Nivel.objects.filter(status=True, periodo=ePeriodo, nivellibrecoordinacion__coordinacion_id__in=[1, 2, 3, 4, 5])
    eMaterias = Materia.objects.filter(status=True, nivel__in=eNiveles,  modeloevaluativo_id=27, asignaturamalla__transversal=True)
    cont = 0
    for eMateria in eMaterias:
        ePlanificacionClaseSilabos = PlanificacionClaseSilabo.objects.filter(status=True, parcial=2, examen=True, tipoplanificacion__periodo=ePeriodo, tipoplanificacion__planificacionclasesilabo_materia__materia=eMateria)
        eSilabo = Silabo.objects.filter(materia=eMateria, codigoqr=True, status=True).first()
        eSilaboSemanales = SilaboSemanal.objects.filter(silabo=eSilabo, numsemana__in=ePlanificacionClaseSilabos.values_list('semana', flat=True), examen=True)
        eDetalleModeloEvaluativos = DetalleModeloEvaluativo.objects.filter(nombre="N2", modelo=eMateria.modeloevaluativo, status=True)
        eTestSilaboSemanales = TestSilaboSemanal.objects.filter(status=True, silabosemanal__in=eSilaboSemanales, tiporecurso_id=11)
        for eTestSilaboSemanal in eTestSilaboSemanales:
            cont += 1
            id_test = eTestSilaboSemanal.id
            print("eTestSilaboSemanal: ", eTestSilaboSemanal)
            print("idtestmoodle: ", eTestSilaboSemanal.idtestmoodle)
            eTestSilaboSemanal.delete()
            print(f"Se elimino {id_test}")
            print('total eliminados -', cont)

    eNotificacion.url = None
    eNotificacion.titulo = f'(Finalizado) Eliminaci√≥n de examenes 2S 2023 PREGRADO'
    eNotificacion.save()
    print("Proceso finalizado . . .")

def creacion_examen_segundo_parcial_en_linea(ePeriodo):
    from Moodle_Funciones import CrearExamenMoodle
    ePersona = Persona.objects.get(pk=29898)
    eNotificacion = Notificacion(cuerpo='Creaci√≥n examenes 2S 2023 PREGRADO',
                                 titulo=f'(En proceso) Creaci√≥n de examenes 2S 2023 PREGRADO',
                                 destinatario=ePersona,
                                 url='',
                                 prioridad=1,
                                 app_label='SGA',
                                 fecha_hora_visible=datetime.now() + timedelta(days=5),
                                 tipo=2,
                                 en_proceso=True)
    eNotificacion.save()

    eNiveles = Nivel.objects.filter(status=True, periodo=ePeriodo, nivellibrecoordinacion__coordinacion_id__in=[1, 2, 3, 4, 5])
    eMaterias = Materia.objects.filter(status=True, nivel__in=eNiveles,  modeloevaluativo_id=27, asignaturamalla__transversal=True )
    total = eMaterias.count()
    contador = 0
    for eMateria in eMaterias:
        eProfesor = eMateria.profesor_principal()
        with transaction.atomic():
            try:
                contador += 1
                print(f"({contador}/{total}) Materia: ", eMateria.__str__())
                ePlanificacionClaseSilabos = PlanificacionClaseSilabo.objects.filter(status=True, parcial=2, examen=True, tipoplanificacion__periodo=ePeriodo, tipoplanificacion__planificacionclasesilabo_materia__materia=eMateria)
                eSilabo = Silabo.objects.filter(materia=eMateria, codigoqr=True, status=True).first()
                if not eSilabo:
                    raise NameError(u"No se encontro silabo de la materia: %s" % eMateria.__str__())
                if (ePlanificacion := ePlanificacionClaseSilabos.first()) is not None:
                    numsemana = ePlanificacion.semana
                    try:
                        eSilaboSemanal = SilaboSemanal.objects.get(silabo=eSilabo, numsemana=numsemana)
                    except ObjectDoesNotExist:
                        eSilaboSemanal = SilaboSemanal(silabo=eSilabo,
                                                      numsemana=numsemana,
                                                      fechainiciosemana=ePlanificacion.fechainicio,
                                                      fechafinciosemana=ePlanificacion.fechafin,
                                                      examen=True,
                                                      semana=ePlanificacion.fechainicio.isocalendar()[1])
                    eSilaboSemanal.fechainiciosemana=ePlanificacion.fechainicio
                    eSilaboSemanal.fechafinciosemana=ePlanificacion.fechafin
                    eSilaboSemanal.semana=ePlanificacion.fechainicio.isocalendar()[1]
                    eSilaboSemanal.examen = True
                    eSilaboSemanal.save()
                    eDetalleModeloEvaluativo = DetalleModeloEvaluativo.objects.filter(nombre="N2", modelo=eMateria.modeloevaluativo, status=True).first()
                    try:
                        eTestSilaboSemanal = TestSilaboSemanal.objects.get(silabosemanal=eSilaboSemanal, detallemodelo=eDetalleModeloEvaluativo, tiporecurso_id=11)
                    except ObjectDoesNotExist:
                        eTestSilaboSemanal = TestSilaboSemanal(silabosemanal=eSilaboSemanal,
                                                               detallemodelo=eDetalleModeloEvaluativo,
                                                               tiporecurso_id=11)
                    instruccion = """El examen es un cuestionario con 30 preguntas objetivas, tiene una duraci√≥n de 60 minutos."""
                    recomendacion = """Lea detenidamente las preguntas y responda."""
                    eTestSilaboSemanal.estado_id=2
                    eTestSilaboSemanal.calificar=True
                    eTestSilaboSemanal.nombretest='EXAMEN_2'
                    eTestSilaboSemanal.instruccion=instruccion
                    eTestSilaboSemanal.recomendacion=recomendacion
                    eTestSilaboSemanal.fechadesde=ePlanificacion.fechainicio
                    eTestSilaboSemanal.horadesde=datetime(ePlanificacion.fechainicio.year, ePlanificacion.fechainicio.month, ePlanificacion.fechainicio.day, 0, 1)
                    eTestSilaboSemanal.fechahasta=ePlanificacion.fechafin
                    eTestSilaboSemanal.horahasta=datetime(ePlanificacion.fechafin.year, ePlanificacion.fechafin.month, ePlanificacion.fechafin.day, 23, 59)
                    eTestSilaboSemanal.vecesintento=1
                    eTestSilaboSemanal.navegacion=2
                    eTestSilaboSemanal.tiempoduracion=60
                    eTestSilaboSemanal.password='TR-23-2'
                    eTestSilaboSemanal.save()
                    if eProfesor:
                        value, msg = CrearExamenMoodle(eTestSilaboSemanal.id, eProfesor.persona)
                        if not value:
                            raise NameError(msg)
                        eMateria.actualizarhtml = True
                        eMateria.save()
                    print(f"({contador}/{total}) Test: {eTestSilaboSemanal.__str__()} - Materia: ", eMateria.__str__())
            except Exception as ex:
                transaction.set_rollback(True)
                msg = ex.__str__()
                print(msg)

    eNotificacion.url = None
    eNotificacion.titulo = f'(Finalizado) Creaci√≥n de examenes 2S 2023 PREGRADO'
    eNotificacion.save()
    print("Proceso finalizado . . .")


#eliminar_examen_segundo_parcial_en_linea(Periodo.objects.get(pk=224))
#creacion_examen_segundo_parcial_en_linea(Periodo.objects.get(pk=224))

def creacion_examen_segundo_parcial_en_linea_transversal_recuperacion(ePeriodo):
    from Moodle_Funciones import CrearExamenMoodle
    ePersona = Persona.objects.get(pk=29898)
    eNotificacion = Notificacion(cuerpo='Creaci√≥n examenes 2S 2023 PREGRADO',
                                 titulo=f'(En proceso) Creaci√≥n de examenes 2S 2023 PREGRADO',
                                 destinatario=ePersona,
                                 url='',
                                 prioridad=1,
                                 app_label='SGA',
                                 fecha_hora_visible=datetime.now() + timedelta(days=5),
                                 tipo=2,
                                 en_proceso=True)
    eNotificacion.save()

    eNiveles = Nivel.objects.filter(status=True, periodo=ePeriodo, nivellibrecoordinacion__coordinacion_id__in=[1, 2, 3, 4, 5])
    eMaterias = Materia.objects.filter(pk__in=[70723,70433,70434],status=True, nivel__in=eNiveles,  modeloevaluativo_id=27, asignaturamalla__transversal=True )
    total = eMaterias.count()
    contador = 0
    for eMateria in eMaterias:
        eProfesor = eMateria.profesor_principal()
        with transaction.atomic():
            try:
                contador += 1
                print(f"({contador}/{total}) Materia: ", eMateria.__str__())
                ePlanificacionClaseSilabos = PlanificacionClaseSilabo.objects.filter(status=True, parcial=2, examen=True, tipoplanificacion__periodo=ePeriodo, tipoplanificacion__planificacionclasesilabo_materia__materia=eMateria)
                eSilabo = Silabo.objects.filter(materia=eMateria, codigoqr=True, status=True).first()
                if not eSilabo:
                    raise NameError(u"No se encontro silabo de la materia: %s" % eMateria.__str__())
                if (ePlanificacion := ePlanificacionClaseSilabos.first()) is not None:
                    numsemana = ePlanificacion.semana
                    try:
                        eSilaboSemanal = SilaboSemanal.objects.get(silabo=eSilabo, numsemana=numsemana , status=True)
                    except ObjectDoesNotExist:
                        eSilaboSemanal = SilaboSemanal(silabo=eSilabo,
                                                      numsemana=numsemana,
                                                      fechainiciosemana=ePlanificacion.fechainicio,
                                                      fechafinciosemana=ePlanificacion.fechafin,
                                                      examen=True,
                                                      semana=ePlanificacion.fechainicio.isocalendar()[1])
                    eSilaboSemanal.fechainiciosemana=ePlanificacion.fechainicio
                    eSilaboSemanal.fechafinciosemana=ePlanificacion.fechafin
                    eSilaboSemanal.semana=ePlanificacion.fechainicio.isocalendar()[1]
                    eSilaboSemanal.examen = True
                    eSilaboSemanal.save()
                    eDetalleModeloEvaluativo = DetalleModeloEvaluativo.objects.filter(nombre="RE", modelo=eMateria.modeloevaluativo, status=True).first()
                    try:
                        eTestSilaboSemanal = TestSilaboSemanal.objects.get(silabosemanal=eSilaboSemanal, detallemodelo=eDetalleModeloEvaluativo, tiporecurso_id=11)
                    except ObjectDoesNotExist:
                        eTestSilaboSemanal = TestSilaboSemanal(silabosemanal=eSilaboSemanal,
                                                               detallemodelo=eDetalleModeloEvaluativo,
                                                               tiporecurso_id=11)
                    instruccion = """El examen es un cuestionario compuesto de 25 preguntas objetivas, con un valor total de 100 puntos, tiene una duraci√≥n de una hora"""
                    recomendacion = """Lea detenidamente las preguntas y responda."""
                    eTestSilaboSemanal.estado_id=2
                    eTestSilaboSemanal.calificar=True
                    eTestSilaboSemanal.nombretest='EXAMEN_RE'
                    eTestSilaboSemanal.instruccion=instruccion
                    eTestSilaboSemanal.recomendacion=recomendacion
                    eTestSilaboSemanal.fechadesde=ePlanificacion.fechainicio
                    eTestSilaboSemanal.horadesde=datetime(ePlanificacion.fechainicio.year, ePlanificacion.fechainicio.month, ePlanificacion.fechainicio.day, 0, 1)
                    eTestSilaboSemanal.fechahasta=ePlanificacion.fechafin
                    eTestSilaboSemanal.horahasta=datetime(ePlanificacion.fechafin.year, ePlanificacion.fechafin.month, ePlanificacion.fechafin.day, 23, 59)
                    eTestSilaboSemanal.vecesintento=1
                    eTestSilaboSemanal.navegacion=2
                    eTestSilaboSemanal.tiempoduracion=60
                    eTestSilaboSemanal.password='TR-23'
                    eTestSilaboSemanal.save()
                    # if eProfesor:
                    #     value, msg = CrearExamenMoodle(eTestSilaboSemanal.id, eProfesor.persona)
                    #     if not value:
                    #         raise NameError(msg)
                    #     eMateria.actualizarhtml = True
                    #     eMateria.save()
                    print(f"({contador}/{total}) Test: {eTestSilaboSemanal.__str__()} - Materia: ", eMateria.__str__())
            except Exception as ex:
                transaction.set_rollback(True)
                msg = ex.__str__()
                print(msg)

    eNotificacion.url = None
    eNotificacion.titulo = f'(Finalizado) Creaci√≥n de examenes 2S 2023 PREGRADO'
    eNotificacion.save()
    print("Proceso finalizado . . .")

#creacion_examen_segundo_parcial_en_linea_transversal_recuperacion(Periodo.objects.get(pk=224))

#REPORTE DE EXAMENES DE CARRERAS EN LINEA
#revisar restricciones
#probar codigos qr
#preguntar por listado de comunicacioj
#cambiar nombre de carreras en linea
#migrar notas ingles
#matricula- inscripcion_carrera_malla
#PREGUNTAR QUE OBSERVACION Y QHE FECHA VA
#select * from sga_recordacademico where id=3313268
#asignatura modulo 6 y 7
#crear record e historico

@transaction.atomic()
def homologacion():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_derecho_2.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('HOJA1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACI√ìN", 6000)
        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        miarchivo = openpyxl.load_workbook("ultimo_derecho.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("Hoja1")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=177
        carrera_id=126
        mallaantigua_id=207
        mallanueva_id=480

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id == 10623 or equivalencia.asignaturamallasalto_id == 10627 or equivalencia.asignaturamallasalto_id == 10615:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True
                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)


                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                fila += 1

                time.sleep(3)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

#homologacion()
@transaction.atomic()
def homologacion_psicologia():
    # Verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_psicologia.xls'
        fuentecabecera = easyxf('font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf('font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('HOJA1')
        fil = 0
        columnas = [(u"CEDULA", 6000), (u"APELLIDOS Y NOMBRES", 6000), (u"OBSERVACI√ìN", 6000)]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        miarchivo = openpyxl.load_workbook("cedulas_psicologia_final_2.xlsx")
        ws = miarchivo.get_sheet_by_name("Hoja1")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=177
        carrera_id=132
        mallaantigua_id=204
        mallanueva_id=479
        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]
                if not identificacion.isdigit():
                    return 0
                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')

                # Se crea una lista temporal para verificar si existen registros antes de modificarlos
                temporal = []
                for e in equivalencias:
                    temporal.append([inscripcion.recordacademico_set.filter(status=True, asignaturamalla=e.asignaturamalla).first(), e])

                for t in temporal:
                    recordantiguo, equivalencia = t

                    old, new = equivalencia.asignaturamalla, equivalencia.asignaturamallasalto
                    print(f"Nueva - {equivalencia.asignaturamallasalto}")

                    if recordantiguo:
                        print(f"Anterior - {equivalencia.asignaturamalla}")
                        print(f"Record antiguo: {recordantiguo}")

                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        recordnuevo, homologada = None, False
                        if equivalencia.asignaturamallasalto_id in (10646, 10649, 10654, 10639):
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True
                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"

                        if recordnuevo := inscripcion.recordacademico_set.filter(asignaturamalla=new, status=True).first():
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()
                        else:
                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True, recordacademico=recordantiguo).update(recordacademico=recordnuevo, creditos=recordnuevo.creditos, horas=recordnuevo.horas, homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(recordacademicooriginal=recordantiguo, recordacademiconuevo=recordnuevo)
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)
                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                fila += 1

                time.sleep(3)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def llenar_tabla_equivalencias_psicologia():
    try:
        miarchivo = openpyxl.load_workbook("matriz_equivalencia_psicolo.xlsx")
        lista = miarchivo.get_sheet_by_name('MALLA_NUEVA')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1 and f"{filas[4].value}".isdigit():
                idasignaturamallaanterior, idasignaturamallanueva = int(filas[4].value), int(filas[1].value)
                msg = ''
                if tablaeq := TablaEquivalenciaAsignaturas.objects.filter(asignaturamallasalto_id=idasignaturamallanueva, asignaturamalla_id=idasignaturamallaanterior).first():
                    tablaeq.status = True
                    msg = u"ACTUALIZA EQUIVALENCIA %s"
                else:
                    tablaeq = TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior, asignaturamallasalto_id=idasignaturamallanueva)
                    msg = u"INSERTA EQUIVALENCIA %s"

                tablaeq.save()
                print(msg % f'{tablaeq.asignaturamallasalto} - {tablaeq.asignaturamalla}')

                print(u"Fila %s"%a)
        homologacion_psicologia()
    except Exception as ex:
            print('error: %s' % ex)

#llenar_tabla_equivalencias_psicologia()


@transaction.atomic()
def homologacion_economia():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_economia.xls'
        fuentecabecera = easyxf('font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf('font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('HOJA1')
        fil = 0
        columnas = [(u"CEDULA", 6000),(u"APELLIDOS Y NOMBRES", 6000),(u"OBSERVACI√ìN", 6000)]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        miarchivo = openpyxl.load_workbook("cedulas_economia.xlsx")
        ws = miarchivo.get_sheet_by_name("Hoja1")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=177
        carrera_id=128
        mallaantigua_id=201
        mallanueva_id=489

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]
                if not identificacion.isdigit():
                    return 0
                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)
                        if equivalencia.asignaturamallasalto_id in (10733, 10742, 10770, 10774):
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True
                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion, asignaturamalla=equivalencia.asignaturamallasalto).exists():
                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)
                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion, asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion, asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()
                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True, recordacademico=recordantiguo).update(recordacademico=recordnuevo, creditos=recordnuevo.creditos, horas=recordnuevo.horas, homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(recordacademicooriginal=recordantiguo, recordacademiconuevo=recordnuevo)
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)
                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1
                fila += 1
                time.sleep(3)
            lin += 1
        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def llenar_tabla_equivalencias_economia():
    try:
        miarchivo = openpyxl.load_workbook("matriz_equivalencia_economia.xlsx")
        lista = miarchivo.get_sheet_by_name('MALLA NUEVA')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1 and f"{filas[4].value}".isdigit():
                idasignaturamallaanterior, idasignaturamallanueva = int(filas[4].value), int(filas[1].value)
                msg = ''
                if tablaeq := TablaEquivalenciaAsignaturas.objects.filter(asignaturamallasalto_id=idasignaturamallanueva, asignaturamalla_id=idasignaturamallaanterior).first():
                    tablaeq.status = True
                    msg = u"ACTUALIZA EQUIVALENCIA %s"
                else:
                    tablaeq = TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior, asignaturamallasalto_id=idasignaturamallanueva)
                    msg = u"INSERTA EQUIVALENCIA %s"

                tablaeq.save()
                print(msg % f'{tablaeq.asignaturamallasalto} - {tablaeq.asignaturamalla}')

                print(u"Fila %s"%a)
        homologacion_economia()
    except Exception as ex:
            print('error: %s' % ex)

#llenar_tabla_equivalencias_economia()


@transaction.atomic()
def homologacion_turismo():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_turismo_2.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACI√ìN", 6000)
        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("cedulas_turismo.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("Sheet1")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=177
        carrera_id=134
        mallaantigua_id=199
        mallanueva_id=487

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10929,10947,10959,10953,10964]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True
                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)


                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                fila += 1

                time.sleep(3)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def llenar_tabla_equivalencias_turismo():
    try:
        miarchivo = openpyxl.load_workbook("matriz_equivalencia_turismo.xlsx")
        lista = miarchivo.get_sheet_by_name('MALLA_NUEVA')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1  and f"{filas[1].value}".isdigit():
                idasignaturamallaanterior = int(filas[4].value)
                idasignaturamallanueva=int(filas[1].value)
                if not TablaEquivalenciaAsignaturas.objects.filter(status=True,asignaturamalla_id=idasignaturamallaanterior).exists():
                    tablaeq=TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior,
                                                 asignaturamallasalto_id=idasignaturamallanueva)
                    tablaeq.save()
                    print(u"INSERTA EQUIVALENCIA %s"%tablaeq)
                else:
                    tablaeq=TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla_id=idasignaturamallaanterior)[0]
                    tablaeq.asignaturamallasalto_id=idasignaturamallanueva
                    tablaeq.save()
                    print(u"ACTUALIZA EQUIVALENCIA %s" % tablaeq)
                print(u"Fila %s"%a)
        homologacion_turismo()
    except Exception as ex:
            print('error: %s' % ex)


@transaction.atomic()
def homologacion_comunicacion():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_comunicacion.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('HOJA1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACI√ìN", 6000)
        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_prueba.xlsx")
        miarchivo = openpyxl.load_workbook("cedulas_comunicacion_final.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("Hoja1")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=177
        carrera_id=131
        mallaantigua_id=205
        mallanueva_id=488

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10850,10853,10854,10859,10865]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True
                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)


                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                fila += 1

                time.sleep(3)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def llenar_tabla_equivalencias_comunicacion():
    try:
        miarchivo = openpyxl.load_workbook("matriz_equivalencia_comunicacion.xlsx")
        lista = miarchivo.get_sheet_by_name('MALLA_NUEVA')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1  and f"{filas[1].value}".isdigit():
                idasignaturamallaanterior = int(filas[4].value)
                idasignaturamallanueva=int(filas[1].value)
                if not TablaEquivalenciaAsignaturas.objects.filter(status=True,asignaturamalla_id=idasignaturamallaanterior).exists():
                    tablaeq=TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior,
                                                 asignaturamallasalto_id=idasignaturamallanueva)
                    tablaeq.save()
                    print(u"INSERTA EQUIVALENCIA %s"%tablaeq)
                else:
                    tablaeq=TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla_id=idasignaturamallaanterior)[0]
                    tablaeq.asignaturamallasalto_id=idasignaturamallanueva
                    tablaeq.save()
                    print(u"ACTUALIZA EQUIVALENCIA %s" % tablaeq)
                print(u"Fila %s"%a)
        homologacion_comunicacion()
        tablaequ= TablaEquivalenciaAsignaturas.objects.filter(status=True).update(status=False)
        llenar_tabla_equivalencias_turismo()
    except Exception as ex:
            print('error: %s' % ex)

#llenar_tabla_equivalencias_comunicacion()

#llenar_tabla_equivalencias_comunicacion()




#AUN NO EST√Å
@transaction.atomic()
def homologacion_ts():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_ts.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACI√ìN", 6000)
        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("cedulas_ts_final.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("Hoja1")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=177
        carrera_id=130
        mallaantigua_id=206
        mallanueva_id=485

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10724, 10730, 10777, 10787]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True
                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)


                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                fila += 1

                time.sleep(3)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def llenar_tabla_equivalencias_ts():
    try:
        miarchivo = openpyxl.load_workbook("matriz_equivalencia_trabajosocial.xlsx")
        lista = miarchivo.get_sheet_by_name('malla_nuevas')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1  and f"{filas[1].value}".isdigit():
                idasignaturamallaanterior = int(filas[4].value)
                idasignaturamallanueva=int(filas[1].value)
                if not TablaEquivalenciaAsignaturas.objects.filter(status=True,asignaturamalla_id=idasignaturamallaanterior).exists():
                    tablaeq=TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior,
                                                 asignaturamallasalto_id=idasignaturamallanueva)
                    tablaeq.save()
                    print(u"INSERTA EQUIVALENCIA %s"%tablaeq)
                else:
                    tablaeq=TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla_id=idasignaturamallaanterior)[0]
                    tablaeq.asignaturamallasalto_id=idasignaturamallanueva
                    tablaeq.save()
                    print(u"ACTUALIZA EQUIVALENCIA %s" % tablaeq)
                print(u"Fila %s"%a)
        homologacion_ts()
    except Exception as ex:
            print('error: %s' % ex)



@transaction.atomic()
def homologacion_eb():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0

    try:
        libre_origen = '/homologacion_eb.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACI√ìN", 6000)
        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        #miarchivo = openpyxl.load_workbook("cedulas_ts_final.xlsx")
        miarchivo = openpyxl.load_workbook("eb_alcance.xlsx")

        ws = miarchivo.get_sheet_by_name("Hoja1")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=177
        carrera_id=135
        mallaantigua_id=208
        mallanueva_id=490

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                        homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)


                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                fila += 1

                time.sleep(3)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def llenar_tabla_equivalencias_eb():
    try:
        miarchivo = openpyxl.load_workbook("matriz_equivalencia_eb.xlsx")
        lista = miarchivo.get_sheet_by_name('datos')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1  and f"{filas[1].value}".isdigit():
                idasignaturamallaanterior = int(filas[4].value)
                idasignaturamallanueva=int(filas[1].value)
                if not TablaEquivalenciaAsignaturas.objects.filter(status=True,asignaturamalla_id=idasignaturamallaanterior).exists():
                    tablaeq=TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior,
                                                 asignaturamallasalto_id=idasignaturamallanueva)
                    tablaeq.save()
                    print(u"INSERTA EQUIVALENCIA %s"%tablaeq)
                else:
                    tablaeq=TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla_id=idasignaturamallaanterior)[0]
                    tablaeq.asignaturamallasalto_id=idasignaturamallanueva
                    tablaeq.save()
                    print(u"ACTUALIZA EQUIVALENCIA %s" % tablaeq)
                print(u"Fila %s"%a)

    except Exception as ex:
            print('error: %s' % ex)



@transaction.atomic()
def homologacion_einicial():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0

    try:
        libre_origen = '/homologacion_einicial.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACI√ìN", 6000)
        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        #miarchivo = openpyxl.load_workbook("cedulas_ts_final.xlsx")
        miarchivo = openpyxl.load_workbook("EDU-INI-ENLINEA.xlsx")

        ws = miarchivo.get_sheet_by_name("Hoja1")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=177
        carrera_id=127
        mallaantigua_id=200
        mallanueva_id=491

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10831, 10856, 10880, 10894, 10899, 10907, 10910, 10926, 10928 ]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True
                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)


                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                fila += 1

                time.sleep(3)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def llenar_tabla_equivalencias_homologacion_einicial():
    try:
        miarchivo = openpyxl.load_workbook("matriz_equivalencia_einicial.xlsx")
        lista = miarchivo.get_sheet_by_name('datos')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1  and f"{filas[1].value}".isdigit():
                idasignaturamallaanterior = int(filas[4].value)
                idasignaturamallanueva=int(filas[1].value)
                if not TablaEquivalenciaAsignaturas.objects.filter(status=True,asignaturamalla_id=idasignaturamallaanterior).exists():
                    tablaeq=TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior,
                                                 asignaturamallasalto_id=idasignaturamallanueva)
                    tablaeq.save()
                    print(u"INSERTA EQUIVALENCIA %s"%tablaeq)
                else:
                    tablaeq=TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla_id=idasignaturamallaanterior)[0]
                    tablaeq.asignaturamallasalto_id=idasignaturamallanueva
                    tablaeq.save()
                    print(u"ACTUALIZA EQUIVALENCIA %s" % tablaeq)
                print(u"Fila %s"%a)
        homologacion_einicial()
    except Exception as ex:
            print('error: %s' % ex)





@transaction.atomic()
def homologacion_pedagogia():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0

    try:
        libre_origen = '/homologacion_pedagogia.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACI√ìN", 6000)
        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        miarchivo = openpyxl.load_workbook("IDIOMAS-ENLINEA.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=177
        carrera_id=129
        mallaantigua_id=198
        mallanueva_id=492

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [11018,11021,11020, 10990, 10991, 11005,10993, 10997, 11007 ]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True
                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)


                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                fila += 1

                time.sleep(3)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def llenar_tabla_equivalencias_homologacion_pedagogia():
    try:
        miarchivo = openpyxl.load_workbook("matriz_equivalencia_pedagogia.xlsx")
        lista = miarchivo.get_sheet_by_name('datos')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1  and f"{filas[1].value}".isdigit():
                if filas[1].value is None:
                    break
                idasignaturamallaanterior = int(filas[4].value)
                idasignaturamallanueva=int(filas[1].value)
                if not TablaEquivalenciaAsignaturas.objects.filter(status=True,asignaturamalla_id=idasignaturamallaanterior).exists():
                    tablaeq=TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior,
                                                 asignaturamallasalto_id=idasignaturamallanueva)
                    tablaeq.save()
                    print(u"INSERTA EQUIVALENCIA %s"%tablaeq)
                else:
                    tablaeq=TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla_id=idasignaturamallaanterior)[0]
                    tablaeq.asignaturamallasalto_id=idasignaturamallanueva
                    tablaeq.save()
                    print(u"ACTUALIZA EQUIVALENCIA %s" % tablaeq)
                print(u"Fila %s"%a)
        homologacion_pedagogia()
    except Exception as ex:
            print('error: %s' % ex)








###MIGRACI√ìN FASE 2
@transaction.atomic()
def homologacion_ts():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_ts_2.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACI√ìN", 6000)
        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("ts.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=130
        mallaantigua_id=206
        mallanueva_id=485

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                itinerarios = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id)


                for itinerario in itinerarios:
                    itinerarionuevo = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id,
                                                                      nivel_id=itinerario.nivel_id)
                    # estadodo culmiado, en curso y pendiente
                    practicasencurso = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                           inscripcion=inscripcion,
                                                                                           estadosolicitud=2,
                                                                                           culminada=False,
                                                                                           itinerariomalla=itinerario)
                    for pcurso in practicasencurso:
                        pcurso.culminada = True
                        pcurso.save()

                    practicaspendientes = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                           inscripcion=inscripcion,
                                                                                           estadosolicitud=4,
                                                                                           culminada=False,
                                                                                           itinerariomalla=itinerario)
                    for pendiente in practicaspendientes:
                        pendiente.estadosolicitud=2
                        pendiente.culminada = True
                        pendiente.save()

                practicaspp= haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10724, 10730, 10777, 10787]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10777, 10787]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10777:
                                            itinerariooctavo = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=8)
                                            ioctavonuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=8)


                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           culminada=True,
                                                                                                           itinerariomalla=itinerariooctavo).exists()
                                            if not practica:
                                                nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                     inscripcion=inscripcion,
                                                                                                     fechadesde='2023-09-04',
                                                                                                     fechahasta='2024-01-24',
                                                                                                     numerohora=ioctavonuevo.horas_practicas,
                                                                                                     nivelmalla=ioctavonuevo.nivel,
                                                                                                     tiposolicitud=1,
                                                                                                     estadosolicitud=2,
                                                                                                     tipo=1,
                                                                                                     itinerariomalla=ioctavonuevo,
                                                                                                     supervisor=profesor,
                                                                                                     tutorunemi=profesor,
                                                                                                     fechaasigtutor='2023-09-04',
                                                                                                     tipoinstitucion=1,
                                                                                                     sectoreconomico=6,
                                                                                                     empresaempleadora_id=3,
                                                                                                     culminada=True,
                                                                                                     fechaasigsupervisor='2023-09-04',
                                                                                                     lugarpractica_id=2,
                                                                                                     observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                     )
                                                nuevapractica.save()

                                        if equivalencia.asignaturamallasalto_id == 10787:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           culminada=True,
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            if not practica:
                                                nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                     inscripcion=inscripcion,
                                                                                                     fechadesde='2023-09-04',
                                                                                                     fechahasta='2024-01-24',
                                                                                                     numerohora=inovenonuevo.horas_practicas,
                                                                                                     nivelmalla=inovenonuevo.nivel,
                                                                                                     tiposolicitud=1,
                                                                                                     estadosolicitud=2,
                                                                                                     tipo=1,
                                                                                                     itinerariomalla=inovenonuevo,
                                                                                                     supervisor=profesor,
                                                                                                     tutorunemi=profesor,
                                                                                                     fechaasigtutor='2023-09-04',
                                                                                                     tipoinstitucion=1,
                                                                                                     sectoreconomico=6,
                                                                                                     empresaempleadora_id=3,
                                                                                                     culminada=True,
                                                                                                     fechaasigsupervisor='2023-09-04',
                                                                                                     lugarpractica_id=2,
                                                                                                     observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                     )
                                                nuevapractica.save()


                            if equivalencia.asignaturamallasalto_id in [10724, 10730]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobaba:
                                        if equivalencia.asignaturamallasalto_id == 10724 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas = horasfalta,
                                                                                registrohorasdesde=datetime.now().date(),
                                                                                registrohorashasta=datetime.now().date(),
                                                                                estado=1
                                            )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10730 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas = horasfalta,
                                                                                registrohorasdesde=datetime.now().date(),
                                                                                registrohorashasta=datetime.now().date(),
                                                                                estado=1
                                            )
                                            vinculacion.save()


                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)


                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                fila += 1

                time.sleep(3)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def llenar_tabla_equivalencias_ts():
    try:
        miarchivo = openpyxl.load_workbook(path_anexo)
        #miarchivo = openpyxl.load_workbook("matriz_equivalencia_trabajosocial.xlsx")
        lista = miarchivo.get_sheet_by_name('malla_nuevas')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1 and f"{filas[1].value}".isdigit():
                if filas[1].value is None:
                    break
                idasignaturamallaanterior = int(filas[4].value)
                idasignaturamallanueva = int(filas[1].value)
                if not TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                   asignaturamalla_id=idasignaturamallaanterior).exists():
                    tablaeq = TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior,
                                                           asignaturamallasalto_id=idasignaturamallanueva)
                    tablaeq.save()
                    print(u"INSERTA EQUIVALENCIA %s" % tablaeq)
                else:
                    tablaeq = \
                    TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla_id=idasignaturamallaanterior)[
                        0]
                    tablaeq.asignaturamallasalto_id = idasignaturamallanueva
                    tablaeq.save()
                    print(u"ACTUALIZA EQUIVALENCIA %s" % tablaeq)
                print(u"Fila %s" % a)

    except Exception as ex:
            print('error: %s' % ex)



#llenar_tabla_equivalencias_ts()


def reporte_estudiantes_sin_horas_vinculacion():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/reporte_estudiantes_sin_horas_vinculacion.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        lin = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"HORAS_VINCULACION", 6000)
        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1

        miarchivo = openpyxl.load_workbook("ts.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("n")
        worksheet = ws
        carrera_id = 130
        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion__persona__cedula=identificacion).first()
                inscripcion = matricula.inscripcion
                horasvinculacion = inscripcion.numero_horas_proyectos_vinculacion()
                if horasvinculacion < 160:
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, horasvinculacion, fuentenormal)

                fila += 1

            lin += 1
        libdestino.save(output_folder + libre_origen)
        print("Proceso finalizado. . .")
    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def homologacion_idiomas():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_idiomas.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
        ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("ilinea.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=129
        mallaantigua_id=198
        mallanueva_id=492

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                horasfalta = 0
                fechainicioitinerario = None
                fechafinitinerario = None
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [11018,11021,11020,10990,10991,11005,10993,10997,11007]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True


                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                            if equivalencia.asignaturamallasalto_id in [11018,11021,11020,10990,10991,11005,10993,10997,11007]:
                                if not practicaspp or not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 11018:
                                            itinerarioprimero = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=1)
                                            iprimeronuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=1)



                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           itinerariomalla=itinerarioprimero).exists()
                                            practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                status=True,
                                                inscripcion=inscripcion,
                                                estadosolicitud=3,
                                                itinerariomalla=itinerarioprimero).exists()


                                            if not practica or practicarechazada :
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioprimero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin,
                                                                                                         numerohora=iprimeronuevo.horas_practicas,
                                                                                                         nivelmalla=iprimeronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iprimeronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioprimero).update(
                                                itinerario=iprimeronuevo)

                                        if equivalencia.asignaturamallasalto_id == 11021:
                                            itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=2)
                                            isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=2)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           itinerariomalla=itinerariosegundo).exists()
                                            practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                status=True,
                                                inscripcion=inscripcion,
                                                estadosolicitud=3,
                                                itinerariomalla=itinerariosegundo).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosegundo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin,
                                                                                                         numerohora=isegundonuevo.horas_practicas,
                                                                                                         nivelmalla=isegundonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isegundonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosegundo).update(
                                                itinerario=isegundonuevo)

                                        if equivalencia.asignaturamallasalto_id == 11020:
                                            itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=3)
                                            iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=3)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           itinerariomalla=itinerariotercero).exists()
                                            practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                status=True,
                                                inscripcion=inscripcion,
                                                estadosolicitud=3,
                                                itinerariomalla=itinerariotercero).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariotercero).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin,
                                                                                                         numerohora=iterceronuevo.horas_practicas,
                                                                                                         nivelmalla=iterceronuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iterceronuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()
                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariotercero).update(
                                                itinerario=iterceronuevo)

                                        if equivalencia.asignaturamallasalto_id == 10990:
                                            itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=4)
                                            icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=4)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           itinerariomalla=itinerariocuarto).exists()
                                            practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                status=True,
                                                inscripcion=inscripcion,
                                                estadosolicitud=3,
                                                itinerariomalla=itinerariocuarto).exists()



                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariocuarto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin,
                                                                                                         numerohora=icuartonuevo.horas_practicas,
                                                                                                         nivelmalla=icuartonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=icuartonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariocuarto).update(
                                                itinerario=icuartonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10991:
                                            itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=5)
                                            iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=5)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           itinerariomalla=itinerarioquinto).exists()
                                            practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                status=True,
                                                inscripcion=inscripcion,
                                                estadosolicitud=3,
                                                itinerariomalla=itinerarioquinto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioquinto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin,
                                                                                                         numerohora=iquintonuevo.horas_practicas,
                                                                                                         nivelmalla=iquintonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iquintonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioquinto).update(
                                                itinerario=iquintonuevo)

                                        if equivalencia.asignaturamallasalto_id == 11005:
                                            itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=6)
                                            isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=6)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           itinerariomalla=itinerariosexto).exists()
                                            practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                status=True,
                                                inscripcion=inscripcion,
                                                estadosolicitud=3,
                                                itinerariomalla=itinerariosexto).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosexto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin,
                                                                                                         numerohora=isextonuevo.horas_practicas,
                                                                                                         nivelmalla=isextonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isextonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosexto).update(
                                                itinerario=isextonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10993:
                                            ####################################### VINCULACION ###################################################
                                            if not horasvinculacion:
                                                if inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                    horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                    vinculacion = ParticipantesMatrices(status=True,
                                                                                        matrizevidencia_id=2,
                                                                                        proyecto_id=601,
                                                                                        inscripcion=inscripcion,
                                                                                        horas=horasfalta,
                                                                                        registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                        registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin,
                                                                                        estado=1
                                                                                        )
                                                    vinculacion.save()
                                            ######################################################################################################
                                            itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=7)
                                            iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=7)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           itinerariomalla=itinerarioseptimo).exists()
                                            practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                status=True,
                                                inscripcion=inscripcion,
                                                estadosolicitud=3,
                                                itinerariomalla=itinerarioseptimo).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioseptimo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin,
                                                                                                         numerohora=iseptimonuevo.horas_practicas,
                                                                                                         nivelmalla=iseptimonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iseptimonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioseptimo).update(
                                                itinerario=iseptimonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10997:
                                            itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=8)
                                            ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=8)
                                            # ACTUALIZACION DE ITINERARIO ACTIVIDAD DETALLE DISTRIBUTIVO

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           itinerariomalla=itinerariooctavo).exists()
                                            practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                status=True,
                                                inscripcion=inscripcion,
                                                estadosolicitud=3,
                                                itinerariomalla=itinerariooctavo).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariooctavo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin,
                                                                                                         numerohora=ioctavonuevo.horas_practicas,
                                                                                                         nivelmalla=ioctavonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=ioctavonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariooctavo).update(
                                                itinerario=ioctavonuevo)

                                        if equivalencia.asignaturamallasalto_id == 11007:
                                            ####################################### VINCULACION ###################################################
                                            if not horasvinculacion:
                                                if inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                    horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                    vinculacion = ParticipantesMatrices(status=True,
                                                                                        matrizevidencia_id=2,
                                                                                        proyecto_id=601,
                                                                                        inscripcion=inscripcion,
                                                                                        horas=horasfalta,
                                                                                        registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                        registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin,
                                                                                        estado=1
                                                                                        )
                                                    vinculacion.save()
                                            ######################################################################################################
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                status=True,
                                                inscripcion=inscripcion,
                                                estadosolicitud=3,
                                                itinerariomalla=inovenonuevo).exists()


                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin,
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio,
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)



                            # if equivalencia.asignaturamallasalto_id in [10993, 11007]:
                            #     if not horasvinculacion:
                            #         if recordnuevo.aprobada:
                            #             if equivalencia.asignaturamallasalto_id == 10993:
                            #                 cont_asig_vinculacion_aprobadas += 1
                            #
                            #             if equivalencia.asignaturamallasalto_id == 11007:
                            #                 cont_asig_vinculacion_aprobadas += 1
                            #             fechainicioitinerario = recordnuevo.materiaregular.nivel.periodo.inicio
                            #             fechafinitinerario = recordnuevo.materiaregular.nivel.periodo.fin


                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)

                fila += 1

                time.sleep(2)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


def llenar_tabla_equivalencias_idiomas():
    try:
        miarchivo = openpyxl.load_workbook("matriz_equivalencia_pedagogia.xlsx")
        lista = miarchivo.get_sheet_by_name('datos')
        totallista = lista.rows
        a=0
        for filas in totallista:
            a += 1
            if a > 1 and f"{filas[1].value}".isdigit():
                if filas[1].value is None:
                    break
                idasignaturamallaanterior = int(filas[4].value)
                idasignaturamallanueva = int(filas[1].value)
                if not TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                   asignaturamalla_id=idasignaturamallaanterior).exists():
                    tablaeq = TablaEquivalenciaAsignaturas(asignaturamalla_id=idasignaturamallaanterior,
                                                           asignaturamallasalto_id=idasignaturamallanueva)
                    tablaeq.save()
                    print(u"INSERTA EQUIVALENCIA %s" % tablaeq)
                else:
                    tablaeq = \
                    TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla_id=idasignaturamallaanterior)[
                        0]
                    tablaeq.asignaturamallasalto_id = idasignaturamallanueva
                    tablaeq.save()
                    print(u"ACTUALIZA EQUIVALENCIA %s" % tablaeq)
                print(u"Fila %s" % a)

    except Exception as ex:
            print('error: %s' % ex)


#homologacion_idiomas()

@transaction.atomic()
def homologacion():
    try:
        libre_origen = '/homologacion_ts_2_1_1.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        # miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("ts_2.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("primero")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id = 224
        carrera_id = 130
        mallaantigua_id = 206
        mallanueva_id = 485

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                   malla_id=mallaantigua_id).exists():
                    imantigua = \
                    InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                            asignaturamalla__malla_id=mallaantigua_id).order_by(
                    'asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                           asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10724, 10730, 10777, 10787]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():

                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[
                                0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(
                                recordacademico=recordnuevo,
                                creditos=recordnuevo.creditos,
                                horas=recordnuevo.horas,
                                homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                              recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10777, 10787]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10777:
                                            itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallaantigua_id,
                                                                                            nivel_id=8)
                                            ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=8)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariooctavo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariooctavo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariooctavo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=ioctavonuevo.horas_practicas,
                                                                                                         nivelmalla=ioctavonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=ioctavonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariooctavo).update(
                                                itinerario=ioctavonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10787:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallaantigua_id,
                                                                                            nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)

                            if equivalencia.asignaturamallasalto_id in [10724, 10730]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10724 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10730 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)


                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)

                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


@transaction.atomic()
def homologacion2():
    try:
        libre_origen = '/homologacion_ts_2_2.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        # miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("trabajosocial.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("segundo")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id = 224
        carrera_id = 130
        mallaantigua_id = 206
        mallanueva_id = 485

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                   malla_id=mallaantigua_id).exists():
                    imantigua = \
                    InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                            asignaturamalla__malla_id=mallaantigua_id).order_by(
                    'asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                           asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10724, 10730, 10777, 10787]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():

                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[
                                0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(
                                recordacademico=recordnuevo,
                                creditos=recordnuevo.creditos,
                                horas=recordnuevo.horas,
                                homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                              recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10777, 10787]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10777:
                                            itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallaantigua_id,
                                                                                            nivel_id=8)
                                            ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=8)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariooctavo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariooctavo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariooctavo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=ioctavonuevo.horas_practicas,
                                                                                                         nivelmalla=ioctavonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=ioctavonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariooctavo).update(
                                                itinerario=ioctavonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10787:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallaantigua_id,
                                                                                            nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)

                            if equivalencia.asignaturamallasalto_id in [10724, 10730]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10724 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10730 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)


                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)

                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def homologacion3():
    try:
        libre_origen = '/homologacion_ts_2_3.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        # miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("trabajosocial.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("tercero")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id = 224
        carrera_id = 130
        mallaantigua_id = 206
        mallanueva_id = 485

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                   malla_id=mallaantigua_id).exists():
                    imantigua = \
                    InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                            asignaturamalla__malla_id=mallaantigua_id).order_by(
                    'asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                           asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10724, 10730, 10777, 10787]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():

                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[
                                0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(
                                recordacademico=recordnuevo,
                                creditos=recordnuevo.creditos,
                                horas=recordnuevo.horas,
                                homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                              recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10777, 10787]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10777:
                                            itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallaantigua_id,
                                                                                            nivel_id=8)
                                            ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=8)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariooctavo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariooctavo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariooctavo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=ioctavonuevo.horas_practicas,
                                                                                                         nivelmalla=ioctavonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=ioctavonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariooctavo).update(
                                                itinerario=ioctavonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10787:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallaantigua_id,
                                                                                            nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)

                            if equivalencia.asignaturamallasalto_id in [10724, 10730]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10724 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10730 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)


                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)

                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def homologacion4():
    try:
        libre_origen = '/homologacion_ts_2_4.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        # miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("trabajosocial.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("cuarto")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id = 224
        carrera_id = 130
        mallaantigua_id = 206
        mallanueva_id = 485

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                   malla_id=mallaantigua_id).exists():
                    imantigua = \
                    InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                            asignaturamalla__malla_id=mallaantigua_id).order_by(
                    'asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                           asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10724, 10730, 10777, 10787]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():

                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[
                                0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(
                                recordacademico=recordnuevo,
                                creditos=recordnuevo.creditos,
                                horas=recordnuevo.horas,
                                homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                              recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10777, 10787]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10777:
                                            itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallaantigua_id,
                                                                                            nivel_id=8)
                                            ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=8)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariooctavo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariooctavo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariooctavo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=ioctavonuevo.horas_practicas,
                                                                                                         nivelmalla=ioctavonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=ioctavonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariooctavo).update(
                                                itinerario=ioctavonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10787:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallaantigua_id,
                                                                                            nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)

                            if equivalencia.asignaturamallasalto_id in [10724, 10730]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10724 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10730 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)


                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)

                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def homologacion5():
    try:
        libre_origen = '/homologacion_ts_2_5.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        # miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("trabajosocial.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("quinto")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id = 224
        carrera_id = 130
        mallaantigua_id = 206
        mallanueva_id = 485

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                   malla_id=mallaantigua_id).exists():
                    imantigua = \
                    InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                            asignaturamalla__malla_id=mallaantigua_id).order_by(
                    'asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                           asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10724, 10730, 10777, 10787]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():

                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[
                                0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(
                                recordacademico=recordnuevo,
                                creditos=recordnuevo.creditos,
                                horas=recordnuevo.horas,
                                homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                              recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10777, 10787]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10777:
                                            itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallaantigua_id,
                                                                                            nivel_id=8)
                                            ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=8)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariooctavo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariooctavo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariooctavo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=ioctavonuevo.horas_practicas,
                                                                                                         nivelmalla=ioctavonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=ioctavonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariooctavo).update(
                                                itinerario=ioctavonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10787:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallaantigua_id,
                                                                                            nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)

                            if equivalencia.asignaturamallasalto_id in [10724, 10730]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10724 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10730 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)


                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)

                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def homologacion6():
    try:
        libre_origen = '/homologacion_ts_2_6.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        # miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("trabajosocial.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("sexto")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id = 224
        carrera_id = 130
        mallaantigua_id = 206
        mallanueva_id = 485

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                   malla_id=mallaantigua_id).exists():
                    imantigua = \
                    InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                            asignaturamalla__malla_id=mallaantigua_id).order_by(
                    'asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                           asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10724, 10730, 10777, 10787]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():

                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[
                                0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(
                                recordacademico=recordnuevo,
                                creditos=recordnuevo.creditos,
                                horas=recordnuevo.horas,
                                homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                              recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10777, 10787]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10777:
                                            itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallaantigua_id,
                                                                                            nivel_id=8)
                                            ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=8)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariooctavo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariooctavo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariooctavo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=ioctavonuevo.horas_practicas,
                                                                                                         nivelmalla=ioctavonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=ioctavonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariooctavo).update(
                                                itinerario=ioctavonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10787:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallaantigua_id,
                                                                                            nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)

                            if equivalencia.asignaturamallasalto_id in [10724, 10730]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10724 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10730 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)


                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)

                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def homologacion7():
    try:
        libre_origen = '/homologacion_ts_2_7.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        # miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("trabajosocial.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("septimo")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id = 224
        carrera_id = 130
        mallaantigua_id = 206
        mallanueva_id = 485

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                   malla_id=mallaantigua_id).exists():
                    imantigua = \
                    InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                            asignaturamalla__malla_id=mallaantigua_id).order_by(
                    'asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                           asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10724, 10730, 10777, 10787]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():

                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[
                                0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(
                                recordacademico=recordnuevo,
                                creditos=recordnuevo.creditos,
                                horas=recordnuevo.horas,
                                homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                              recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10777, 10787]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10777:
                                            itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallaantigua_id,
                                                                                            nivel_id=8)
                                            ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=8)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariooctavo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariooctavo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariooctavo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=ioctavonuevo.horas_practicas,
                                                                                                         nivelmalla=ioctavonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=ioctavonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariooctavo).update(
                                                itinerario=ioctavonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10787:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallaantigua_id,
                                                                                            nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)

                            if equivalencia.asignaturamallasalto_id in [10724, 10730]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10724 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10730 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)


                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)

                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def homologacion8():
    try:
        libre_origen = '/homologacion_ts_2_8.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        # miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("trabajosocial.xlsx")
        # miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("octavo")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id = 224
        carrera_id = 130
        mallaantigua_id = 206
        mallanueva_id = 485

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                     inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                   malla_id=mallaantigua_id).exists():
                    imantigua = \
                    InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                            asignaturamalla__malla_id=mallaantigua_id).order_by(
                    'asignaturamallasalto__nivelmalla__orden')
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                           asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10724, 10730, 10777, 10787]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():

                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[
                                0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(
                                recordacademico=recordnuevo,
                                creditos=recordnuevo.creditos,
                                horas=recordnuevo.horas,
                                homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                              recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10777, 10787]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10777:
                                            itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallaantigua_id,
                                                                                            nivel_id=8)
                                            ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=8)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariooctavo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariooctavo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariooctavo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=ioctavonuevo.horas_practicas,
                                                                                                         nivelmalla=ioctavonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=ioctavonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariooctavo).update(
                                                itinerario=ioctavonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10787:
                                            itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                            malla_id=mallaantigua_id,
                                                                                            nivel_id=9)
                                            inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=9)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarionoveno).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarionoveno).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarionoveno).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=inovenonuevo.horas_practicas,
                                                                                                         nivelmalla=inovenonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=inovenonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarionoveno).update(
                                                itinerario=inovenonuevo)

                            if equivalencia.asignaturamallasalto_id in [10724, 10730]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10724 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10730 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)


                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)

                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")


    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

# t1 = threading.Thread(target=homologacion)
# t2 = threading.Thread(target=homologacion2)
#
# t1.start()
# t2.start()


def homologacion_comunicacion1():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_comunicacion_2_1.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACI√ìN", 6000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("comlinea.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("primero")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=131
        mallaantigua_id=205
        mallanueva_id=488

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp= haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10850,10853,10854,10859,10865]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10850,10853,10854]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10850:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[0]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[0]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)

                                        if equivalencia.asignaturamallasalto_id == 10854:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[1]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[1]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)

                                        if equivalencia.asignaturamallasalto_id == 10853:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[2]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[2]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)


                            if equivalencia.asignaturamallasalto_id in [10859,10865]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10859 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10865 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                # if cont_asig_vinculacion_aprobadas != 0:
                #     if cont_asig_vinculacion_aprobadas == 1:
                #         horasfalta = 80
                #     elif cont_asig_vinculacion_aprobadas == 2:
                #         horasfalta = 160
                #     vinculacion = ParticipantesMatrices(status=True,
                #                                         matrizevidencia_id=2,
                #                                         proyecto_id=601,
                #                                         inscripcion=inscripcion,
                #                                         horas=horasfalta,
                #                                         registrohorasdesde=datetime.now().date(),
                #                                         registrohorashasta=datetime.now().date(),
                #                                         estado=1
                #                                         )
                #     vinculacion.save()

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


def homologacion_comunicacion2():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_comunicacion_2_2.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACI√ìN", 6000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("comlinea.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("segundo")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=131
        mallaantigua_id=205
        mallanueva_id=488

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp= haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10850,10853,10854,10859,10865]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10850,10853,10854]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10850:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[0]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[0]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)

                                        if equivalencia.asignaturamallasalto_id == 10854:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[1]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[1]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)

                                        if equivalencia.asignaturamallasalto_id == 10853:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[2]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[2]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)


                            if equivalencia.asignaturamallasalto_id in [10859,10865]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10859 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10865 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                # if cont_asig_vinculacion_aprobadas != 0:
                #     if cont_asig_vinculacion_aprobadas == 1:
                #         horasfalta = 80
                #     elif cont_asig_vinculacion_aprobadas == 2:
                #         horasfalta = 160
                #     vinculacion = ParticipantesMatrices(status=True,
                #                                         matrizevidencia_id=2,
                #                                         proyecto_id=601,
                #                                         inscripcion=inscripcion,
                #                                         horas=horasfalta,
                #                                         registrohorasdesde=datetime.now().date(),
                #                                         registrohorashasta=datetime.now().date(),
                #                                         estado=1
                #                                         )
                #     vinculacion.save()

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_comunicacion3():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_comunicacion_2_3.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACI√ìN", 6000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("comlinea.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("tercero")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=131
        mallaantigua_id=205
        mallanueva_id=488

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp= haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10850,10853,10854,10859,10865]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10850,10853,10854]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10850:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[0]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[0]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)

                                        if equivalencia.asignaturamallasalto_id == 10854:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[1]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[1]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)

                                        if equivalencia.asignaturamallasalto_id == 10853:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[2]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[2]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)


                            if equivalencia.asignaturamallasalto_id in [10859,10865]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10859 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10865 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                # if cont_asig_vinculacion_aprobadas != 0:
                #     if cont_asig_vinculacion_aprobadas == 1:
                #         horasfalta = 80
                #     elif cont_asig_vinculacion_aprobadas == 2:
                #         horasfalta = 160
                #     vinculacion = ParticipantesMatrices(status=True,
                #                                         matrizevidencia_id=2,
                #                                         proyecto_id=601,
                #                                         inscripcion=inscripcion,
                #                                         horas=horasfalta,
                #                                         registrohorasdesde=datetime.now().date(),
                #                                         registrohorashasta=datetime.now().date(),
                #                                         estado=1
                #                                         )
                #     vinculacion.save()

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_comunicacion4():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_comunicacion_2_4.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACI√ìN", 6000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("comlinea.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("cuarto")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=131
        mallaantigua_id=205
        mallanueva_id=488

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp= haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10850,10853,10854,10859,10865]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10850,10853,10854]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10850:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[0]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[0]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)

                                        if equivalencia.asignaturamallasalto_id == 10854:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[1]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[1]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)

                                        if equivalencia.asignaturamallasalto_id == 10853:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[2]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[2]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)


                            if equivalencia.asignaturamallasalto_id in [10859,10865]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10859 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10865 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                # if cont_asig_vinculacion_aprobadas != 0:
                #     if cont_asig_vinculacion_aprobadas == 1:
                #         horasfalta = 80
                #     elif cont_asig_vinculacion_aprobadas == 2:
                #         horasfalta = 160
                #     vinculacion = ParticipantesMatrices(status=True,
                #                                         matrizevidencia_id=2,
                #                                         proyecto_id=601,
                #                                         inscripcion=inscripcion,
                #                                         horas=horasfalta,
                #                                         registrohorasdesde=datetime.now().date(),
                #                                         registrohorashasta=datetime.now().date(),
                #                                         estado=1
                #                                         )
                #     vinculacion.save()

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_comunicacion5():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_comunicacion_2_5.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACI√ìN", 6000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("comlinea.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("quinto")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=131
        mallaantigua_id=205
        mallanueva_id=488

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp= haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10850,10853,10854,10859,10865]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10850,10853,10854]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10850:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[0]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[0]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)

                                        if equivalencia.asignaturamallasalto_id == 10854:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[1]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[1]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)

                                        if equivalencia.asignaturamallasalto_id == 10853:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[2]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[2]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)


                            if equivalencia.asignaturamallasalto_id in [10859,10865]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10859 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10865 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                # if cont_asig_vinculacion_aprobadas != 0:
                #     if cont_asig_vinculacion_aprobadas == 1:
                #         horasfalta = 80
                #     elif cont_asig_vinculacion_aprobadas == 2:
                #         horasfalta = 160
                #     vinculacion = ParticipantesMatrices(status=True,
                #                                         matrizevidencia_id=2,
                #                                         proyecto_id=601,
                #                                         inscripcion=inscripcion,
                #                                         horas=horasfalta,
                #                                         registrohorasdesde=datetime.now().date(),
                #                                         registrohorashasta=datetime.now().date(),
                #                                         estado=1
                #                                         )
                #     vinculacion.save()

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_comunicacion6():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_comunicacion_2_6.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACI√ìN", 6000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("comlinea.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("sexto")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=131
        mallaantigua_id=205
        mallanueva_id=488

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp= haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10850,10853,10854,10859,10865]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10850,10853,10854]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10850:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[0]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[0]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)

                                        if equivalencia.asignaturamallasalto_id == 10854:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[1]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[1]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)

                                        if equivalencia.asignaturamallasalto_id == 10853:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[2]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[2]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)


                            if equivalencia.asignaturamallasalto_id in [10859,10865]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10859 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10865 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                # if cont_asig_vinculacion_aprobadas != 0:
                #     if cont_asig_vinculacion_aprobadas == 1:
                #         horasfalta = 80
                #     elif cont_asig_vinculacion_aprobadas == 2:
                #         horasfalta = 160
                #     vinculacion = ParticipantesMatrices(status=True,
                #                                         matrizevidencia_id=2,
                #                                         proyecto_id=601,
                #                                         inscripcion=inscripcion,
                #                                         horas=horasfalta,
                #                                         registrohorasdesde=datetime.now().date(),
                #                                         registrohorashasta=datetime.now().date(),
                #                                         estado=1
                #                                         )
                #     vinculacion.save()

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_comunicacion7():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_comunicacion_2_7.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACI√ìN", 6000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("comlinea.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("septimo")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=131
        mallaantigua_id=205
        mallanueva_id=488

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp= haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10850,10853,10854,10859,10865]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10850,10853,10854]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10850:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[0]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[0]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)

                                        if equivalencia.asignaturamallasalto_id == 10854:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[1]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[1]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)

                                        if equivalencia.asignaturamallasalto_id == 10853:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[2]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[2]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)


                            if equivalencia.asignaturamallasalto_id in [10859,10865]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10859 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10865 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                # if cont_asig_vinculacion_aprobadas != 0:
                #     if cont_asig_vinculacion_aprobadas == 1:
                #         horasfalta = 80
                #     elif cont_asig_vinculacion_aprobadas == 2:
                #         horasfalta = 160
                #     vinculacion = ParticipantesMatrices(status=True,
                #                                         matrizevidencia_id=2,
                #                                         proyecto_id=601,
                #                                         inscripcion=inscripcion,
                #                                         horas=horasfalta,
                #                                         registrohorasdesde=datetime.now().date(),
                #                                         registrohorashasta=datetime.now().date(),
                #                                         estado=1
                #                                         )
                #     vinculacion.save()

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_comunicacion8():

    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_comunicacion_2_8.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                   (u"APELLIDOS Y NOMBRES", 6000),
                   (u"OBSERVACI√ìN", 6000)
        ]

        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("comlinea.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("octavo")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=131
        mallaantigua_id=205
        mallanueva_id=488

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp= haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10850,10853,10854,10859,10865]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True



                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)

                            if equivalencia.asignaturamallasalto_id in [10850,10853,10854]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10850:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[0]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[0]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)

                                        if equivalencia.asignaturamallasalto_id == 10854:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[1]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[1]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)

                                        if equivalencia.asignaturamallasalto_id == 10853:
                                            itinerariosanteriores = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id, nivel_id=8).order_by('id')[2]
                                            itinerariosnuevos = ItinerariosMalla.objects.filter(status=True, malla_id=mallanueva_id, nivel_id=8).order_by('id')[2]

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosanteriores).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosanteriores).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosanteriores).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=itinerariosnuevos.horas_practicas,
                                                                                                         nivelmalla=itinerariosnuevos.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=itinerariosnuevos,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosanteriores).update(
                                                itinerario=itinerariosnuevos)


                            if equivalencia.asignaturamallasalto_id in [10859,10865]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10859 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10865 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                # if cont_asig_vinculacion_aprobadas != 0:
                #     if cont_asig_vinculacion_aprobadas == 1:
                #         horasfalta = 80
                #     elif cont_asig_vinculacion_aprobadas == 2:
                #         horasfalta = 160
                #     vinculacion = ParticipantesMatrices(status=True,
                #                                         matrizevidencia_id=2,
                #                                         proyecto_id=601,
                #                                         inscripcion=inscripcion,
                #                                         horas=horasfalta,
                #                                         registrohorasdesde=datetime.now().date(),
                #                                         registrohorashasta=datetime.now().date(),
                #                                         estado=1
                #                                         )
                #     vinculacion.save()

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1



@transaction.atomic()
def homologacion_economia():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_econo_2_1.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("ecolinea.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("primero")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=128
        mallaantigua_id=201
        mallanueva_id=489

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                horasfalta = 0
                fechainicioitinerario = None
                fechafinitinerario = None
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10733, 10742, 10770, 10774]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True

                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                            if equivalencia.asignaturamallasalto_id in [10770, 10774]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10770:
                                            itinerariosexto = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=6)
                                            isextonuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=6)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosexto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosexto).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosexto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isextonuevo.horas_practicas,
                                                                                                         nivelmalla=isextonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isextonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosexto).update(
                                                itinerario=isextonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10774:
                                            itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=7)
                                            iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=7)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioseptimo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioseptimo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioseptimo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iseptimonuevo.horas_practicas,
                                                                                                         nivelmalla=iseptimonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iseptimonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioseptimo).update(
                                                itinerario=iseptimonuevo)

                            if equivalencia.asignaturamallasalto_id in [10733, 10742]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10733 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10742 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()


                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


def homologacion_economia2():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_econo_2_2.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("ecolinea.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("segundo")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=128
        mallaantigua_id=201
        mallanueva_id=489

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                with transaction.atomic():
                    matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                         inscripcion__persona__cedula=identificacion).first()
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallaantigua_id).exists():
                        imantigua = \
                        InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[
                            0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                           malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                                asignaturamalla__malla_id=mallaantigua_id).order_by(
                        'asignaturamallasalto__nivelmalla__orden')
                    cont_asig_vinculacion_aprobadas = 0
                    horasfalta = 0
                    fechainicioitinerario = None
                    fechafinitinerario = None
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                               asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10733, 10742, 10770, 10774]:
                                observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                                homologada = True

                            else:
                                observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():

                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[
                                    0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(
                                    recordacademico=recordnuevo,
                                    creditos=recordnuevo.creditos,
                                    horas=recordnuevo.horas,
                                    homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                                  recordacademicooriginal=recordantiguo)

                                if equivalencia.asignaturamallasalto_id in [10770, 10774]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10770:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=6)
                                                isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallanueva_id,
                                                                                           nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isextonuevo.horas_practicas,
                                                            nivelmalla=isextonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isextonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10774:
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=7)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iseptimonuevo.horas_practicas,
                                                            nivelmalla=iseptimonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iseptimonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioseptimo).update(
                                                    itinerario=iseptimonuevo)

                                if equivalencia.asignaturamallasalto_id in [10733, 10742]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10733 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                            if equivalencia.asignaturamallasalto_id == 10742 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)

                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                    fila += 1

                    time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def homologacion_economia3():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_econo_2_3.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("ecolinea.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("tercero")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=128
        mallaantigua_id=201
        mallanueva_id=489

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                horasfalta = 0
                fechainicioitinerario = None
                fechafinitinerario = None
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10733, 10742, 10770, 10774]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True

                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                            if equivalencia.asignaturamallasalto_id in [10770, 10774]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10770:
                                            itinerariosexto = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=6)
                                            isextonuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=6)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosexto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosexto).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosexto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isextonuevo.horas_practicas,
                                                                                                         nivelmalla=isextonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isextonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosexto).update(
                                                itinerario=isextonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10774:
                                            itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=7)
                                            iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=7)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioseptimo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioseptimo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioseptimo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iseptimonuevo.horas_practicas,
                                                                                                         nivelmalla=iseptimonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iseptimonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioseptimo).update(
                                                itinerario=iseptimonuevo)

                            if equivalencia.asignaturamallasalto_id in [10733, 10742]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10733 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10742 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()


                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1


def homologacion_economia4():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_econo_2_4.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("ecolinea.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("cuarto")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=128
        mallaantigua_id=201
        mallanueva_id=489

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                with transaction.atomic():
                    matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                         inscripcion__persona__cedula=identificacion).first()
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallaantigua_id).exists():
                        imantigua = \
                        InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[
                            0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                           malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                                asignaturamalla__malla_id=mallaantigua_id).order_by(
                        'asignaturamallasalto__nivelmalla__orden')
                    cont_asig_vinculacion_aprobadas = 0
                    horasfalta = 0
                    fechainicioitinerario = None
                    fechafinitinerario = None
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                               asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10733, 10742, 10770, 10774]:
                                observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                                homologada = True

                            else:
                                observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():

                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[
                                    0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(
                                    recordacademico=recordnuevo,
                                    creditos=recordnuevo.creditos,
                                    horas=recordnuevo.horas,
                                    homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                                  recordacademicooriginal=recordantiguo)

                                if equivalencia.asignaturamallasalto_id in [10770, 10774]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10770:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=6)
                                                isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallanueva_id,
                                                                                           nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isextonuevo.horas_practicas,
                                                            nivelmalla=isextonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isextonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10774:
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=7)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iseptimonuevo.horas_practicas,
                                                            nivelmalla=iseptimonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iseptimonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioseptimo).update(
                                                    itinerario=iseptimonuevo)

                                if equivalencia.asignaturamallasalto_id in [10733, 10742]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10733 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                            if equivalencia.asignaturamallasalto_id == 10742 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)

                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                    fila += 1

                    time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def homologacion_economia5():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_econo_2_5.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("ecolinea.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("quinto")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=128
        mallaantigua_id=201
        mallanueva_id=489

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                with transaction.atomic():
                    matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                         inscripcion__persona__cedula=identificacion).first()
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallaantigua_id).exists():
                        imantigua = \
                        InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[
                            0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                           malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                                asignaturamalla__malla_id=mallaantigua_id).order_by(
                        'asignaturamallasalto__nivelmalla__orden')
                    cont_asig_vinculacion_aprobadas = 0
                    horasfalta = 0
                    fechainicioitinerario = None
                    fechafinitinerario = None
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                               asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10733, 10742, 10770, 10774]:
                                observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                                homologada = True

                            else:
                                observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():

                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[
                                    0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(
                                    recordacademico=recordnuevo,
                                    creditos=recordnuevo.creditos,
                                    horas=recordnuevo.horas,
                                    homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                                  recordacademicooriginal=recordantiguo)

                                if equivalencia.asignaturamallasalto_id in [10770, 10774]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10770:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=6)
                                                isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallanueva_id,
                                                                                           nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isextonuevo.horas_practicas,
                                                            nivelmalla=isextonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isextonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10774:
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=7)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iseptimonuevo.horas_practicas,
                                                            nivelmalla=iseptimonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iseptimonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioseptimo).update(
                                                    itinerario=iseptimonuevo)

                                if equivalencia.asignaturamallasalto_id in [10733, 10742]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10733 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                            if equivalencia.asignaturamallasalto_id == 10742 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)

                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                    fila += 1

                    time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def homologacion_economia6():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_econo_2_6.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("ecolinea.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("sexto")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=128
        mallaantigua_id=201
        mallanueva_id=489

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id, inscripcion__persona__cedula=identificacion).first()
                cont += 1
                matricula.pasoayuda = True
                matricula.save()
                print(u"%s - %s" % (matricula, cont))
                inscripcion = matricula.inscripcion
                hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                    imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                    imantigua.status = False
                    imantigua.save()
                    print(u"Desactiva antigua inscripcion -----------------------------")

                if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                    imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                    imnueva.save()
                    print(u"Crea nueva inscripcion -----------------------------")

                equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                cont_asig_vinculacion_aprobadas = 0
                horasfalta = 0
                fechainicioitinerario = None
                fechafinitinerario = None
                for equivalencia in equivalencias:
                    print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                    recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                    if recordantiguo:
                        print(u"anterior - %s" % equivalencia.asignaturamalla)
                        print(u"Record antiguo: %s" % recordantiguo)
                        recordnuevo = None
                        recordantiguo.status = False
                        recordantiguo.save(update_asignaturamalla=False)

                        if equivalencia.asignaturamallasalto_id in [10733, 10742, 10770, 10774]:
                            observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                            homologada = True

                        else:
                            observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                            homologada = False
                        if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                              asignaturamalla=equivalencia.asignaturamallasalto).exists():



                            recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                          matriculas=recordantiguo.matriculas,
                                                          asignaturamalla=equivalencia.asignaturamallasalto,
                                                          asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                          asignaturaold_id=recordantiguo.asignatura.id,
                                                          nota=recordantiguo.nota,
                                                          asistencia=recordantiguo.asistencia,
                                                          sinasistencia=recordantiguo.sinasistencia,
                                                          fecha=recordantiguo.fecha,
                                                          noaplica=recordantiguo.noaplica,
                                                          aprobada=recordantiguo.aprobada,
                                                          convalidacion=recordantiguo.convalidacion,
                                                          pendiente=recordantiguo.pendiente,
                                                          creditos=equivalencia.asignaturamallasalto.creditos,
                                                          horas=equivalencia.asignaturamallasalto.horas,
                                                          valida=recordantiguo.valida,
                                                          validapromedio=recordantiguo.validapromedio,
                                                          observaciones=observaciones,
                                                          homologada=homologada,
                                                          materiaregular=recordantiguo.materiaregular,
                                                          materiacurso=None,
                                                          completonota=recordantiguo.completonota,
                                                          completoasistencia=recordantiguo.completoasistencia,
                                                          fechainicio=recordantiguo.fechainicio,
                                                          fechafin=recordantiguo.fechafin,
                                                          suficiencia=recordantiguo.suficiencia,
                                                          asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                          reverso=False)
                            recordnuevo.save()
                            print(u"Crea nuevo record %s" % recordnuevo)


                        elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                            asignaturamalla=equivalencia.asignaturamallasalto):
                            recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                         asignaturamalla=equivalencia.asignaturamallasalto)[0]
                            recordnuevo.matriculas = recordantiguo.matriculas
                            recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                            recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                            recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                            recordnuevo.nota = recordantiguo.nota
                            recordnuevo.asistencia = recordantiguo.asistencia
                            recordnuevo.sinasistencia = recordantiguo.sinasistencia
                            recordnuevo.fecha = recordantiguo.fecha
                            recordnuevo.noaplica = recordantiguo.noaplica
                            recordnuevo.aprobada = recordantiguo.aprobada
                            recordnuevo.convalidacion = recordantiguo.convalidacion
                            recordnuevo.pendiente = recordantiguo.pendiente
                            recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                            recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                            recordnuevo.valida = recordantiguo.valida
                            recordnuevo.validapromedio = recordantiguo.validapromedio
                            recordnuevo.observaciones = observaciones
                            recordnuevo.homologada = homologada
                            recordnuevo.materiaregular = recordantiguo.materiaregular
                            recordnuevo.materiacurso = None
                            recordnuevo.completonota = recordantiguo.completonota
                            recordnuevo.completoasistencia = recordantiguo.completoasistencia
                            recordnuevo.fechainicio = recordantiguo.fechainicio
                            recordnuevo.fechafin = recordantiguo.fechafin
                            recordnuevo.suficiencia = recordantiguo.suficiencia
                            recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                            recordnuevo.reverso = False
                            recordnuevo.save()

                        if recordnuevo:
                            historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                 recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                       creditos=recordnuevo.creditos,
                                                                                                                       horas=recordnuevo.horas,
                                                                                                                       homologada=recordnuevo.homologada)
                            respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                            if equivalencia.asignaturamallasalto_id in [10770, 10774]:
                                if not practicaspp:
                                    if recordnuevo.aprobada:
                                        profesor = None
                                        if recordnuevo.materiaregular:
                                            profesor = recordnuevo.materiaregular.profesor_principal()
                                        elif recordnuevo.materiacurso:
                                            profesor = recordnuevo.materiaregular.profesor()
                                        if equivalencia.asignaturamallasalto_id == 10770:
                                            itinerariosexto = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=6)
                                            isextonuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=6)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerariosexto).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerariosexto).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerariosexto).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=isextonuevo.horas_practicas,
                                                                                                         nivelmalla=isextonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=isextonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerariosexto).update(
                                                itinerario=isextonuevo)

                                        if equivalencia.asignaturamallasalto_id == 10774:
                                            itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallaantigua_id,
                                                                                           nivel_id=7)
                                            iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                        malla_id=mallanueva_id,
                                                                                        nivel_id=7)

                                            practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           estadosolicitud__in=[
                                                                                                               1, 2, 4,
                                                                                                               5, 6],
                                                                                                           itinerariomalla=itinerarioseptimo).exists()
                                            practicarechazada = False
                                            if not practica:
                                                practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud=3,
                                                    itinerariomalla=itinerarioseptimo).exists()

                                            if not practica or practicarechazada:
                                                if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                           inscripcion=inscripcion,
                                                                                                           actividad__itinerariomalla=itinerarioseptimo).exists():
                                                    nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                         inscripcion=inscripcion,
                                                                                                         fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         numerohora=iseptimonuevo.horas_practicas,
                                                                                                         nivelmalla=iseptimonuevo.nivel,
                                                                                                         tiposolicitud=1,
                                                                                                         estadosolicitud=2,
                                                                                                         tipo=1,
                                                                                                         itinerariomalla=iseptimonuevo,
                                                                                                         supervisor=profesor,
                                                                                                         tutorunemi=profesor,
                                                                                                         fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         tipoinstitucion=1,
                                                                                                         sectoreconomico=6,
                                                                                                         empresaempleadora_id=3,
                                                                                                         culminada=True,
                                                                                                         fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                         lugarpractica_id=2,
                                                                                                         observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                         )
                                                    nuevapractica.save()

                                            ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                          itinerario=itinerarioseptimo).update(
                                                itinerario=iseptimonuevo)

                            if equivalencia.asignaturamallasalto_id in [10733, 10742]:
                                if not horasvinculacion:
                                    if recordnuevo.aprobada:
                                        if equivalencia.asignaturamallasalto_id == 10733 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()

                                        if equivalencia.asignaturamallasalto_id == 10742 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                matrizevidencia_id=2,
                                                                                proyecto_id=601,
                                                                                inscripcion=inscripcion,
                                                                                horas=horasfalta,
                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                estado=1
                                                                                )
                                            vinculacion.save()


                            if not respaldo.exists():
                                respaldorecord = RespaldoRecordAcademico(
                                    recordacademicooriginal=recordantiguo,
                                    recordacademiconuevo=recordnuevo
                                )
                                respaldorecord.save()
                            else:
                                respaldorecord = respaldo[0]
                                respaldorecord.recordacademiconuevo = recordnuevo
                                respaldorecord.save()
                            print(u"Record actualizado %s" % recordnuevo)

                    else:
                        hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                        fila += 1

                practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                hojadestino.write(fila, 3, practicasppf, fuentenormal)
                horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                fila += 1

                time.sleep(1)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def homologacion_economia7():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_econo_2_7.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("ecolinea.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("septimo")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=128
        mallaantigua_id=201
        mallanueva_id=489

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break


                with transaction.atomic():
                    matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                         inscripcion__persona__cedula=identificacion).first()
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallaantigua_id).exists():
                        imantigua = \
                        InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[
                            0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                           malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                                asignaturamalla__malla_id=mallaantigua_id).order_by(
                        'asignaturamallasalto__nivelmalla__orden')
                    cont_asig_vinculacion_aprobadas = 0
                    horasfalta = 0
                    fechainicioitinerario = None
                    fechafinitinerario = None
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                               asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10733, 10742, 10770, 10774]:
                                observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                                homologada = True

                            else:
                                observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():

                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[
                                    0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(
                                    recordacademico=recordnuevo,
                                    creditos=recordnuevo.creditos,
                                    horas=recordnuevo.horas,
                                    homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                                  recordacademicooriginal=recordantiguo)

                                if equivalencia.asignaturamallasalto_id in [10770, 10774]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10770:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=6)
                                                isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallanueva_id,
                                                                                           nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isextonuevo.horas_practicas,
                                                            nivelmalla=isextonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isextonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10774:
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=7)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iseptimonuevo.horas_practicas,
                                                            nivelmalla=iseptimonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iseptimonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioseptimo).update(
                                                    itinerario=iseptimonuevo)

                                if equivalencia.asignaturamallasalto_id in [10733, 10742]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10733 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                            if equivalencia.asignaturamallasalto_id == 10742 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)

                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                    fila += 1

                    time.sleep(1)


            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

@transaction.atomic()
def homologacion_economia8():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_econo_2_8.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("ecolinea.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("octavo")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=128
        mallaantigua_id=201
        mallanueva_id=489

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                identificacion = currentValues[0]

                if not identificacion:
                    break

                with transaction.atomic():
                    matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                         inscripcion__persona__cedula=identificacion).first()
                    cont += 1
                    matricula.pasoayuda = True
                    matricula.save()
                    print(u"%s - %s" % (matricula, cont))
                    inscripcion = matricula.inscripcion
                    hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                    hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                    hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                    practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                    horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                    if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                       malla_id=mallaantigua_id).exists():
                        imantigua = \
                        InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[
                            0]
                        imantigua.status = False
                        imantigua.save()
                        print(u"Desactiva antigua inscripcion -----------------------------")

                    if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                           malla_id=mallanueva_id).exists():
                        imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                        imnueva.save()
                        print(u"Crea nueva inscripcion -----------------------------")

                    equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                                asignaturamalla__malla_id=mallaantigua_id).order_by(
                        'asignaturamallasalto__nivelmalla__orden')
                    cont_asig_vinculacion_aprobadas = 0
                    horasfalta = 0
                    fechainicioitinerario = None
                    fechafinitinerario = None
                    for equivalencia in equivalencias:
                        print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                        recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                               asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                        if recordantiguo:
                            print(u"anterior - %s" % equivalencia.asignaturamalla)
                            print(u"Record antiguo: %s" % recordantiguo)
                            recordnuevo = None
                            recordantiguo.status = False
                            recordantiguo.save(update_asignaturamalla=False)

                            if equivalencia.asignaturamallasalto_id in [10733, 10742, 10770, 10774]:
                                observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                                homologada = True

                            else:
                                observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                                homologada = False
                            if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto).exists():

                                recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                              matriculas=recordantiguo.matriculas,
                                                              asignaturamalla=equivalencia.asignaturamallasalto,
                                                              asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                              asignaturaold_id=recordantiguo.asignatura.id,
                                                              nota=recordantiguo.nota,
                                                              asistencia=recordantiguo.asistencia,
                                                              sinasistencia=recordantiguo.sinasistencia,
                                                              fecha=recordantiguo.fecha,
                                                              noaplica=recordantiguo.noaplica,
                                                              aprobada=recordantiguo.aprobada,
                                                              convalidacion=recordantiguo.convalidacion,
                                                              pendiente=recordantiguo.pendiente,
                                                              creditos=equivalencia.asignaturamallasalto.creditos,
                                                              horas=equivalencia.asignaturamallasalto.horas,
                                                              valida=recordantiguo.valida,
                                                              validapromedio=recordantiguo.validapromedio,
                                                              observaciones=observaciones,
                                                              homologada=homologada,
                                                              materiaregular=recordantiguo.materiaregular,
                                                              materiacurso=None,
                                                              completonota=recordantiguo.completonota,
                                                              completoasistencia=recordantiguo.completoasistencia,
                                                              fechainicio=recordantiguo.fechainicio,
                                                              fechafin=recordantiguo.fechafin,
                                                              suficiencia=recordantiguo.suficiencia,
                                                              asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                              reverso=False)
                                recordnuevo.save()
                                print(u"Crea nuevo record %s" % recordnuevo)


                            elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                asignaturamalla=equivalencia.asignaturamallasalto):
                                recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                             asignaturamalla=equivalencia.asignaturamallasalto)[
                                    0]
                                recordnuevo.matriculas = recordantiguo.matriculas
                                recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                recordnuevo.nota = recordantiguo.nota
                                recordnuevo.asistencia = recordantiguo.asistencia
                                recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                recordnuevo.fecha = recordantiguo.fecha
                                recordnuevo.noaplica = recordantiguo.noaplica
                                recordnuevo.aprobada = recordantiguo.aprobada
                                recordnuevo.convalidacion = recordantiguo.convalidacion
                                recordnuevo.pendiente = recordantiguo.pendiente
                                recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                recordnuevo.valida = recordantiguo.valida
                                recordnuevo.validapromedio = recordantiguo.validapromedio
                                recordnuevo.observaciones = observaciones
                                recordnuevo.homologada = homologada
                                recordnuevo.materiaregular = recordantiguo.materiaregular
                                recordnuevo.materiacurso = None
                                recordnuevo.completonota = recordantiguo.completonota
                                recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                recordnuevo.fechainicio = recordantiguo.fechainicio
                                recordnuevo.fechafin = recordantiguo.fechafin
                                recordnuevo.suficiencia = recordantiguo.suficiencia
                                recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                recordnuevo.reverso = False
                                recordnuevo.save()

                            if recordnuevo:
                                historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                     recordacademico=recordantiguo).update(
                                    recordacademico=recordnuevo,
                                    creditos=recordnuevo.creditos,
                                    horas=recordnuevo.horas,
                                    homologada=recordnuevo.homologada)
                                respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                                  recordacademicooriginal=recordantiguo)

                                if equivalencia.asignaturamallasalto_id in [10770, 10774]:
                                    if not practicaspp:
                                        if recordnuevo.aprobada:
                                            profesor = None
                                            if recordnuevo.materiaregular:
                                                profesor = recordnuevo.materiaregular.profesor_principal()
                                            elif recordnuevo.materiacurso:
                                                profesor = recordnuevo.materiaregular.profesor()
                                            if equivalencia.asignaturamallasalto_id == 10770:
                                                itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallaantigua_id,
                                                                                               nivel_id=6)
                                                isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                           malla_id=mallanueva_id,
                                                                                           nivel_id=6)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerariosexto).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerariosexto).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerariosexto).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=isextonuevo.horas_practicas,
                                                            nivelmalla=isextonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=isextonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerariosexto).update(
                                                    itinerario=isextonuevo)

                                            if equivalencia.asignaturamallasalto_id == 10774:
                                                itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallaantigua_id,
                                                                                                 nivel_id=7)
                                                iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                             malla_id=mallanueva_id,
                                                                                             nivel_id=7)

                                                practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                    status=True,
                                                    inscripcion=inscripcion,
                                                    estadosolicitud__in=[
                                                        1, 2, 4,
                                                        5, 6],
                                                    itinerariomalla=itinerarioseptimo).exists()
                                                practicarechazada = False
                                                if not practica:
                                                    practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud=3,
                                                        itinerariomalla=itinerarioseptimo).exists()

                                                if not practica or practicarechazada:
                                                    if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            actividad__itinerariomalla=itinerarioseptimo).exists():
                                                        nuevapractica = PracticasPreprofesionalesInscripcion(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            numerohora=iseptimonuevo.horas_practicas,
                                                            nivelmalla=iseptimonuevo.nivel,
                                                            tiposolicitud=1,
                                                            estadosolicitud=2,
                                                            tipo=1,
                                                            itinerariomalla=iseptimonuevo,
                                                            supervisor=profesor,
                                                            tutorunemi=profesor,
                                                            fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            tipoinstitucion=1,
                                                            sectoreconomico=6,
                                                            empresaempleadora_id=3,
                                                            culminada=True,
                                                            fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                            lugarpractica_id=2,
                                                            observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                            )
                                                        nuevapractica.save()

                                                ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                    status=True,
                                                    itinerario=itinerarioseptimo).update(
                                                    itinerario=iseptimonuevo)

                                if equivalencia.asignaturamallasalto_id in [10733, 10742]:
                                    if not horasvinculacion:
                                        if recordnuevo.aprobada:
                                            if equivalencia.asignaturamallasalto_id == 10733 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                            if equivalencia.asignaturamallasalto_id == 10742 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                vinculacion = ParticipantesMatrices(status=True,
                                                                                    matrizevidencia_id=2,
                                                                                    proyecto_id=601,
                                                                                    inscripcion=inscripcion,
                                                                                    horas=horasfalta,
                                                                                    registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                    estado=1
                                                                                    )
                                                vinculacion.save()

                                if not respaldo.exists():
                                    respaldorecord = RespaldoRecordAcademico(
                                        recordacademicooriginal=recordantiguo,
                                        recordacademiconuevo=recordnuevo
                                    )
                                    respaldorecord.save()
                                else:
                                    respaldorecord = respaldo[0]
                                    respaldorecord.recordacademiconuevo = recordnuevo
                                    respaldorecord.save()
                                print(u"Record actualizado %s" % recordnuevo)

                        else:
                            hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                            fila += 1

                    practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                    hojadestino.write(fila, 3, practicasppf, fuentenormal)
                    horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                    hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                    fila += 1

                    time.sleep(1)


            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_idiomas_rezagados():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_idiomas_finales.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inscripcion_idiomas.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=129
        mallaantigua_id=198
        mallanueva_id=492
        sin_matricula = []

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                inscripcion = int(currentValues[0])

                if not inscripcion:
                    break

                with transaction.atomic():
                    matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                         inscripcion_id=inscripcion).first()
                    if matricula:
                        cont += 1
                        matricula.pasoayuda = True
                        matricula.save()
                        print(u"%s - %s - %s" % (matricula, cont, inscripcion))
                        inscripcion = matricula.inscripcion
                        hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                        hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                        hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                        practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                        horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                        if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                            imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                            imantigua.status = False
                            imantigua.save()
                            print(u"Desactiva antigua inscripcion -----------------------------")

                        if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                            imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                            imnueva.save()
                            print(u"Crea nueva inscripcion -----------------------------")

                        equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                        cont_asig_vinculacion_aprobadas = 0
                        horasfalta = 0
                        fechainicioitinerario = None
                        fechafinitinerario = None
                        for equivalencia in equivalencias:
                            print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                            recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                            if recordantiguo:
                                print(u"anterior - %s" % equivalencia.asignaturamalla)
                                print(u"Record antiguo: %s" % recordantiguo)
                                recordnuevo = None
                                recordantiguo.status = False
                                recordantiguo.save(update_asignaturamalla=False)

                                if equivalencia.asignaturamallasalto_id in [11018,11021,11020,10990,10991,11005,10993,10997,11007]:
                                    observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                                    homologada = True


                                else:
                                    observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                                    homologada = False
                                if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                      asignaturamalla=equivalencia.asignaturamallasalto).exists():



                                    recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                                  matriculas=recordantiguo.matriculas,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto,
                                                                  asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                                  asignaturaold_id=recordantiguo.asignatura.id,
                                                                  nota=recordantiguo.nota,
                                                                  asistencia=recordantiguo.asistencia,
                                                                  sinasistencia=recordantiguo.sinasistencia,
                                                                  fecha=recordantiguo.fecha,
                                                                  noaplica=recordantiguo.noaplica,
                                                                  aprobada=recordantiguo.aprobada,
                                                                  convalidacion=recordantiguo.convalidacion,
                                                                  pendiente=recordantiguo.pendiente,
                                                                  creditos=equivalencia.asignaturamallasalto.creditos,
                                                                  horas=equivalencia.asignaturamallasalto.horas,
                                                                  valida=recordantiguo.valida,
                                                                  validapromedio=recordantiguo.validapromedio,
                                                                  observaciones=observaciones,
                                                                  homologada=homologada,
                                                                  materiaregular=recordantiguo.materiaregular,
                                                                  materiacurso=None,
                                                                  completonota=recordantiguo.completonota,
                                                                  completoasistencia=recordantiguo.completoasistencia,
                                                                  fechainicio=recordantiguo.fechainicio,
                                                                  fechafin=recordantiguo.fechafin,
                                                                  suficiencia=recordantiguo.suficiencia,
                                                                  asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                                  reverso=False)
                                    recordnuevo.save()
                                    print(u"Crea nuevo record %s" % recordnuevo)


                                elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                    asignaturamalla=equivalencia.asignaturamallasalto):
                                    recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                                 asignaturamalla=equivalencia.asignaturamallasalto)[0]
                                    recordnuevo.matriculas = recordantiguo.matriculas
                                    recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                    recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                    recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                    recordnuevo.nota = recordantiguo.nota
                                    recordnuevo.asistencia = recordantiguo.asistencia
                                    recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                    recordnuevo.fecha = recordantiguo.fecha
                                    recordnuevo.noaplica = recordantiguo.noaplica
                                    recordnuevo.aprobada = recordantiguo.aprobada
                                    recordnuevo.convalidacion = recordantiguo.convalidacion
                                    recordnuevo.pendiente = recordantiguo.pendiente
                                    recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                    recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                    recordnuevo.valida = recordantiguo.valida
                                    recordnuevo.validapromedio = recordantiguo.validapromedio
                                    recordnuevo.observaciones = observaciones
                                    recordnuevo.homologada = homologada
                                    recordnuevo.materiaregular = recordantiguo.materiaregular
                                    recordnuevo.materiacurso = None
                                    recordnuevo.completonota = recordantiguo.completonota
                                    recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                    recordnuevo.fechainicio = recordantiguo.fechainicio
                                    recordnuevo.fechafin = recordantiguo.fechafin
                                    recordnuevo.suficiencia = recordantiguo.suficiencia
                                    recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                    recordnuevo.reverso = False
                                    recordnuevo.save()

                                if recordnuevo:
                                    historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                         recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                               creditos=recordnuevo.creditos,
                                                                                                                               horas=recordnuevo.horas,
                                                                                                                               homologada=recordnuevo.homologada)
                                    respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                                    if equivalencia.asignaturamallasalto_id in [11018,11021,11020,10990,10991,11005,10993,10997,11007]:
                                        if not practicaspp or not horasvinculacion:
                                            if recordnuevo.aprobada:
                                                profesor = None
                                                if recordnuevo.materiaregular:
                                                    profesor = recordnuevo.materiaregular.profesor_principal()
                                                elif recordnuevo.materiacurso:
                                                    profesor = recordnuevo.materiaregular.profesor()
                                                if equivalencia.asignaturamallasalto_id == 11018:

                                                    itinerarioprimero = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=1)
                                                    iprimeronuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=1)


                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   estadosolicitud__in=[
                                                                                                                       1, 2, 4,
                                                                                                                       5, 6],
                                                                                                                   itinerariomalla=itinerarioprimero).exists()
                                                    practicarechazada = False
                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerarioprimero).exists()

                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   actividad__itinerariomalla=itinerarioprimero).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                                 inscripcion=inscripcion,
                                                                                                                 fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 numerohora=iprimeronuevo.horas_practicas,
                                                                                                                 nivelmalla=iprimeronuevo.nivel,
                                                                                                                 tiposolicitud=1,
                                                                                                                 estadosolicitud=2,
                                                                                                                 tipo=1,
                                                                                                                 itinerariomalla=iprimeronuevo,
                                                                                                                 supervisor=profesor,
                                                                                                                 tutorunemi=profesor,
                                                                                                                 fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 tipoinstitucion=1,
                                                                                                                 sectoreconomico=6,
                                                                                                                 empresaempleadora_id=3,
                                                                                                                 culminada=True,
                                                                                                                 fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 lugarpractica_id=2,
                                                                                                                 observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                                 )
                                                            nuevapractica.save()

                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                                  itinerario=itinerarioprimero).update(
                                                        itinerario=iprimeronuevo)

                                                if equivalencia.asignaturamallasalto_id == 11021:
                                                    itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                                   malla_id=mallaantigua_id,
                                                                                                   nivel_id=2)
                                                    isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallanueva_id,
                                                                                                nivel_id=2)

                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   estadosolicitud__in=[
                                                                                                                       1, 2, 4,
                                                                                                                       5, 6],
                                                                                                                   itinerariomalla=itinerariosegundo).exists()
                                                    practicarechazada = False
                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerariosegundo).exists()

                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   actividad__itinerariomalla=itinerariosegundo).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                                 inscripcion=inscripcion,
                                                                                                                 fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 numerohora=isegundonuevo.horas_practicas,
                                                                                                                 nivelmalla=isegundonuevo.nivel,
                                                                                                                 tiposolicitud=1,
                                                                                                                 estadosolicitud=2,
                                                                                                                 tipo=1,
                                                                                                                 itinerariomalla=isegundonuevo,
                                                                                                                 supervisor=profesor,
                                                                                                                 tutorunemi=profesor,
                                                                                                                 fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 tipoinstitucion=1,
                                                                                                                 sectoreconomico=6,
                                                                                                                 empresaempleadora_id=3,
                                                                                                                 culminada=True,
                                                                                                                 fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 lugarpractica_id=2,
                                                                                                                 observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                                 )
                                                            nuevapractica.save()

                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                                  itinerario=itinerariosegundo).update(
                                                        itinerario=isegundonuevo)

                                                if equivalencia.asignaturamallasalto_id == 11020:
                                                    itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                                   malla_id=mallaantigua_id,
                                                                                                   nivel_id=3)
                                                    iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallanueva_id,
                                                                                                nivel_id=3)

                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   estadosolicitud__in=[
                                                                                                                       1, 2, 4,
                                                                                                                       5, 6],
                                                                                                                   itinerariomalla=itinerariotercero).exists()
                                                    practicarechazada = False
                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerariotercero).exists()

                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   actividad__itinerariomalla=itinerariotercero).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                                 inscripcion=inscripcion,
                                                                                                                 fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 numerohora=iterceronuevo.horas_practicas,
                                                                                                                 nivelmalla=iterceronuevo.nivel,
                                                                                                                 tiposolicitud=1,
                                                                                                                 estadosolicitud=2,
                                                                                                                 tipo=1,
                                                                                                                 itinerariomalla=iterceronuevo,
                                                                                                                 supervisor=profesor,
                                                                                                                 tutorunemi=profesor,
                                                                                                                 fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 tipoinstitucion=1,
                                                                                                                 sectoreconomico=6,
                                                                                                                 empresaempleadora_id=3,
                                                                                                                 culminada=True,
                                                                                                                 fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 lugarpractica_id=2,
                                                                                                                 observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                                 )
                                                            nuevapractica.save()

                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                                  itinerario=itinerariotercero).update(
                                                        itinerario=iterceronuevo)

                                                if equivalencia.asignaturamallasalto_id == 10990:
                                                    itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                                   malla_id=mallaantigua_id,
                                                                                                   nivel_id=4)
                                                    icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallanueva_id,
                                                                                                nivel_id=4)

                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   estadosolicitud__in=[
                                                                                                                       1, 2, 4,
                                                                                                                       5, 6],
                                                                                                                   itinerariomalla=itinerariocuarto).exists()
                                                    practicarechazada = False
                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerariocuarto).exists()

                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   actividad__itinerariomalla=itinerariocuarto).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                                 inscripcion=inscripcion,
                                                                                                                 fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 numerohora=icuartonuevo.horas_practicas,
                                                                                                                 nivelmalla=icuartonuevo.nivel,
                                                                                                                 tiposolicitud=1,
                                                                                                                 estadosolicitud=2,
                                                                                                                 tipo=1,
                                                                                                                 itinerariomalla=icuartonuevo,
                                                                                                                 supervisor=profesor,
                                                                                                                 tutorunemi=profesor,
                                                                                                                 fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 tipoinstitucion=1,
                                                                                                                 sectoreconomico=6,
                                                                                                                 empresaempleadora_id=3,
                                                                                                                 culminada=True,
                                                                                                                 fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 lugarpractica_id=2,
                                                                                                                 observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                                 )
                                                            nuevapractica.save()

                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                                  itinerario=itinerariocuarto).update(
                                                        itinerario=icuartonuevo)

                                                if equivalencia.asignaturamallasalto_id == 10991:
                                                    itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                                   malla_id=mallaantigua_id,
                                                                                                   nivel_id=5)
                                                    iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallanueva_id,
                                                                                                nivel_id=5)

                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   estadosolicitud__in=[
                                                                                                                       1, 2, 4,
                                                                                                                       5, 6],
                                                                                                                   itinerariomalla=itinerarioquinto).exists()
                                                    practicarechazada = False
                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerarioquinto).exists()

                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   actividad__itinerariomalla=itinerarioquinto).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                                 inscripcion=inscripcion,
                                                                                                                 fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 numerohora=iquintonuevo.horas_practicas,
                                                                                                                 nivelmalla=iquintonuevo.nivel,
                                                                                                                 tiposolicitud=1,
                                                                                                                 estadosolicitud=2,
                                                                                                                 tipo=1,
                                                                                                                 itinerariomalla=iquintonuevo,
                                                                                                                 supervisor=profesor,
                                                                                                                 tutorunemi=profesor,
                                                                                                                 fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 tipoinstitucion=1,
                                                                                                                 sectoreconomico=6,
                                                                                                                 empresaempleadora_id=3,
                                                                                                                 culminada=True,
                                                                                                                 fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 lugarpractica_id=2,
                                                                                                                 observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                                 )
                                                            nuevapractica.save()

                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                                  itinerario=itinerarioquinto).update(
                                                        itinerario=iquintonuevo)

                                                if equivalencia.asignaturamallasalto_id == 11005:
                                                    itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                                   malla_id=mallaantigua_id,
                                                                                                   nivel_id=6)
                                                    isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallanueva_id,
                                                                                                nivel_id=6)

                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   estadosolicitud__in=[
                                                                                                                       1, 2, 4,
                                                                                                                       5, 6],
                                                                                                                   itinerariomalla=itinerariosexto).exists()
                                                    practicarechazada = False
                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerariosexto).exists()

                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   actividad__itinerariomalla=itinerariosexto).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                                 inscripcion=inscripcion,
                                                                                                                 fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 numerohora=isextonuevo.horas_practicas,
                                                                                                                 nivelmalla=isextonuevo.nivel,
                                                                                                                 tiposolicitud=1,
                                                                                                                 estadosolicitud=2,
                                                                                                                 tipo=1,
                                                                                                                 itinerariomalla=isextonuevo,
                                                                                                                 supervisor=profesor,
                                                                                                                 tutorunemi=profesor,
                                                                                                                 fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 tipoinstitucion=1,
                                                                                                                 sectoreconomico=6,
                                                                                                                 empresaempleadora_id=3,
                                                                                                                 culminada=True,
                                                                                                                 fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 lugarpractica_id=2,
                                                                                                                 observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                                 )
                                                            nuevapractica.save()

                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                                  itinerario=itinerariosexto).update(
                                                        itinerario=isextonuevo)

                                                if equivalencia.asignaturamallasalto_id == 10993:
                                                    ####################################### VINCULACION ###################################################
                                                    if not horasvinculacion:
                                                        if inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                            horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                                matrizevidencia_id=2,
                                                                                                proyecto_id=601,
                                                                                                inscripcion=inscripcion,
                                                                                                horas=horasfalta,
                                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                estado=1
                                                                                                )
                                                            vinculacion.save()
                                                    ######################################################################################################
                                                    itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                                   malla_id=mallaantigua_id,
                                                                                                   nivel_id=7)
                                                    iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallanueva_id,
                                                                                                nivel_id=7)

                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   estadosolicitud__in=[
                                                                                                                       1, 2, 4,
                                                                                                                       5, 6],
                                                                                                                   itinerariomalla=itinerarioseptimo).exists()
                                                    practicarechazada = False
                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerarioseptimo).exists()

                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   actividad__itinerariomalla=itinerarioseptimo).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                                 inscripcion=inscripcion,
                                                                                                                 fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 numerohora=iseptimonuevo.horas_practicas,
                                                                                                                 nivelmalla=iseptimonuevo.nivel,
                                                                                                                 tiposolicitud=1,
                                                                                                                 estadosolicitud=2,
                                                                                                                 tipo=1,
                                                                                                                 itinerariomalla=iseptimonuevo,
                                                                                                                 supervisor=profesor,
                                                                                                                 tutorunemi=profesor,
                                                                                                                 fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 tipoinstitucion=1,
                                                                                                                 sectoreconomico=6,
                                                                                                                 empresaempleadora_id=3,
                                                                                                                 culminada=True,
                                                                                                                 fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 lugarpractica_id=2,
                                                                                                                 observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                                 )
                                                            nuevapractica.save()

                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                                  itinerario=itinerarioseptimo).update(
                                                        itinerario=iseptimonuevo)

                                                if equivalencia.asignaturamallasalto_id == 10997:
                                                    itinerariooctavo = ItinerariosMalla.objects.get(status=True,
                                                                                                   malla_id=mallaantigua_id,
                                                                                                   nivel_id=8)
                                                    ioctavonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallanueva_id,
                                                                                                nivel_id=8)
                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   estadosolicitud__in=[
                                                                                                                       1, 2, 4,
                                                                                                                       5, 6],
                                                                                                                   itinerariomalla=itinerariooctavo).exists()
                                                    practicarechazada = False
                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerariooctavo).exists()

                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   actividad__itinerariomalla=itinerariooctavo).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                                 inscripcion=inscripcion,
                                                                                                                 fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 numerohora=ioctavonuevo.horas_practicas,
                                                                                                                 nivelmalla=ioctavonuevo.nivel,
                                                                                                                 tiposolicitud=1,
                                                                                                                 estadosolicitud=2,
                                                                                                                 tipo=1,
                                                                                                                 itinerariomalla=ioctavonuevo,
                                                                                                                 supervisor=profesor,
                                                                                                                 tutorunemi=profesor,
                                                                                                                 fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 tipoinstitucion=1,
                                                                                                                 sectoreconomico=6,
                                                                                                                 empresaempleadora_id=3,
                                                                                                                 culminada=True,
                                                                                                                 fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 lugarpractica_id=2,
                                                                                                                 observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                                 )
                                                            nuevapractica.save()

                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                                  itinerario=itinerariooctavo).update(
                                                        itinerario=ioctavonuevo)

                                                if equivalencia.asignaturamallasalto_id == 11007:
                                                    ####################################### VINCULACION ###################################################
                                                    if not horasvinculacion:
                                                        if inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                            horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                            vinculacion = ParticipantesMatrices(status=True,
                                                                                                matrizevidencia_id=2,
                                                                                                proyecto_id=601,
                                                                                                inscripcion=inscripcion,
                                                                                                horas=horasfalta,
                                                                                                registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                estado=1
                                                                                                )
                                                            vinculacion.save()
                                                    ######################################################################################################
                                                    itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                                   malla_id=mallaantigua_id,
                                                                                                   nivel_id=9)
                                                    inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallanueva_id,
                                                                                                nivel_id=9)

                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   estadosolicitud__in=[
                                                                                                                       1, 2, 4,
                                                                                                                       5, 6],
                                                                                                                   itinerariomalla=itinerarionoveno).exists()
                                                    practicarechazada = False
                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerarionoveno).exists()

                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   actividad__itinerariomalla=itinerarionoveno).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                                 inscripcion=inscripcion,
                                                                                                                 fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 numerohora=inovenonuevo.horas_practicas,
                                                                                                                 nivelmalla=inovenonuevo.nivel,
                                                                                                                 tiposolicitud=1,
                                                                                                                 estadosolicitud=2,
                                                                                                                 tipo=1,
                                                                                                                 itinerariomalla=inovenonuevo,
                                                                                                                 supervisor=profesor,
                                                                                                                 tutorunemi=profesor,
                                                                                                                 fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 tipoinstitucion=1,
                                                                                                                 sectoreconomico=6,
                                                                                                                 empresaempleadora_id=3,
                                                                                                                 culminada=True,
                                                                                                                 fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 lugarpractica_id=2,
                                                                                                                 observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                                 )
                                                            nuevapractica.save()

                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                                  itinerario=itinerarionoveno).update(
                                                        itinerario=inovenonuevo)


                                    if not respaldo.exists():
                                        respaldorecord = RespaldoRecordAcademico(
                                            recordacademicooriginal=recordantiguo,
                                            recordacademiconuevo=recordnuevo
                                        )
                                        respaldorecord.save()
                                    else:
                                        respaldorecord = respaldo[0]
                                        respaldorecord.recordacademiconuevo = recordnuevo
                                        respaldorecord.save()
                                    print(u"Record actualizado %s" % recordnuevo)

                            else:
                                hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                                fila += 1

                        practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                        hojadestino.write(fila, 3, practicasppf, fuentenormal)
                        horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                        hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)

                        fila += 1

                        time.sleep(1)

                    else:
                        sin_matricula.append(inscripcion)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")
        print(str(sin_matricula))

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_inicial_rezagados():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_inicial_rezagados.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')

        output_folder = os.path.join(os.path.join(SITE_STORAGE, 'media'))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inscripcion_inicial.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("prueba")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id=224
        carrera_id=127
        mallaantigua_id=200
        mallanueva_id=491
        sin_matricula = []

        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                inscripcion = int(currentValues[0])

                if not inscripcion:
                    break
                with transaction.atomic():
                    matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                         inscripcion_id=inscripcion).first()
                    if matricula:
                        cont += 1
                        matricula.pasoayuda = True
                        matricula.save()
                        print(u"%s - %s" % (matricula, cont))
                        inscripcion = matricula.inscripcion
                        hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                        hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                        hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                        practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                        horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                        if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id).exists():
                            imantigua = InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallaantigua_id)[0]
                            imantigua.status = False
                            imantigua.save()
                            print(u"Desactiva antigua inscripcion -----------------------------")

                        if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion, malla_id=mallanueva_id).exists():
                            imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                            imnueva.save()
                            print(u"Crea nueva inscripcion -----------------------------")

                        equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True, asignaturamalla__malla_id=mallaantigua_id).order_by('asignaturamallasalto__nivelmalla__orden')
                        cont_asig_vinculacion_aprobadas = 0
                        horasfalta = 0
                        fechainicioitinerario = None
                        fechafinitinerario = None
                        for equivalencia in equivalencias:
                            print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                            recordantiguo = inscripcion.recordacademico_set.filter(status=True,asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                            if recordantiguo:
                                print(u"anterior - %s" % equivalencia.asignaturamalla)
                                print(u"Record antiguo: %s" % recordantiguo)
                                recordnuevo = None
                                recordantiguo.status = False
                                recordantiguo.save(update_asignaturamalla=False)

                                if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10926,10928]:
                                    observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                                    homologada = True


                                else:
                                    observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                                    homologada = False
                                if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                      asignaturamalla=equivalencia.asignaturamallasalto).exists():



                                    recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                                  matriculas=recordantiguo.matriculas,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto,
                                                                  asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                                  asignaturaold_id=recordantiguo.asignatura.id,
                                                                  nota=recordantiguo.nota,
                                                                  asistencia=recordantiguo.asistencia,
                                                                  sinasistencia=recordantiguo.sinasistencia,
                                                                  fecha=recordantiguo.fecha,
                                                                  noaplica=recordantiguo.noaplica,
                                                                  aprobada=recordantiguo.aprobada,
                                                                  convalidacion=recordantiguo.convalidacion,
                                                                  pendiente=recordantiguo.pendiente,
                                                                  creditos=equivalencia.asignaturamallasalto.creditos,
                                                                  horas=equivalencia.asignaturamallasalto.horas,
                                                                  valida=recordantiguo.valida,
                                                                  validapromedio=recordantiguo.validapromedio,
                                                                  observaciones=observaciones,
                                                                  homologada=homologada,
                                                                  materiaregular=recordantiguo.materiaregular,
                                                                  materiacurso=None,
                                                                  completonota=recordantiguo.completonota,
                                                                  completoasistencia=recordantiguo.completoasistencia,
                                                                  fechainicio=recordantiguo.fechainicio,
                                                                  fechafin=recordantiguo.fechafin,
                                                                  suficiencia=recordantiguo.suficiencia,
                                                                  asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                                  reverso=False)
                                    recordnuevo.save()
                                    print(u"Crea nuevo record %s" % recordnuevo)


                                elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                    asignaturamalla=equivalencia.asignaturamallasalto):
                                    recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                                 asignaturamalla=equivalencia.asignaturamallasalto)[0]
                                    recordnuevo.matriculas = recordantiguo.matriculas
                                    recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                    recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                    recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                    recordnuevo.nota = recordantiguo.nota
                                    recordnuevo.asistencia = recordantiguo.asistencia
                                    recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                    recordnuevo.fecha = recordantiguo.fecha
                                    recordnuevo.noaplica = recordantiguo.noaplica
                                    recordnuevo.aprobada = recordantiguo.aprobada
                                    recordnuevo.convalidacion = recordantiguo.convalidacion
                                    recordnuevo.pendiente = recordantiguo.pendiente
                                    recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                    recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                    recordnuevo.valida = recordantiguo.valida
                                    recordnuevo.validapromedio = recordantiguo.validapromedio
                                    recordnuevo.observaciones = observaciones
                                    recordnuevo.homologada = homologada
                                    recordnuevo.materiaregular = recordantiguo.materiaregular
                                    recordnuevo.materiacurso = None
                                    recordnuevo.completonota = recordantiguo.completonota
                                    recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                    recordnuevo.fechainicio = recordantiguo.fechainicio
                                    recordnuevo.fechafin = recordantiguo.fechafin
                                    recordnuevo.suficiencia = recordantiguo.suficiencia
                                    recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                    recordnuevo.reverso = False
                                    recordnuevo.save()

                                if recordnuevo:
                                    historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                         recordacademico=recordantiguo).update(recordacademico=recordnuevo,
                                                                                                                               creditos=recordnuevo.creditos,
                                                                                                                               horas=recordnuevo.horas,
                                                                                                                               homologada=recordnuevo.homologada)
                                    respaldo = RespaldoRecordAcademico.objects.filter(status=True,recordacademicooriginal=recordantiguo)



                                    if equivalencia.asignaturamallasalto_id in [10831,10856,10880,10894,10899,10907,10910,10928]:
                                        if not practicaspp:
                                            if recordnuevo.aprobada:
                                                profesor = None
                                                if recordnuevo.materiaregular:
                                                    profesor = recordnuevo.materiaregular.profesor_principal()
                                                elif recordnuevo.materiacurso:
                                                    profesor = recordnuevo.materiaregular.profesor()
                                                if equivalencia.asignaturamallasalto_id == 10831:
                                                    itinerarioprimero = ItinerariosMalla.objects.get(status=True, malla_id=mallaantigua_id, nivel_id=1)
                                                    iprimeronuevo = ItinerariosMalla.objects.get(status=True, malla_id=mallanueva_id, nivel_id=1)


                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   estadosolicitud__in=[
                                                                                                                       1, 2, 4,
                                                                                                                       5, 6],
                                                                                                                   itinerariomalla=itinerarioprimero).exists()
                                                    practicarechazada = False
                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                       inscripcion=inscripcion,
                                                                                                                       estadosolicitud=3,
                                                                                                                       itinerariomalla=itinerarioprimero).exists()

                                                    if not practica or practicarechazada :
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   actividad__itinerariomalla=itinerarioprimero).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                                 inscripcion=inscripcion,
                                                                                                                 fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 numerohora=iprimeronuevo.horas_practicas,
                                                                                                                 nivelmalla=iprimeronuevo.nivel,
                                                                                                                 tiposolicitud=1,
                                                                                                                 estadosolicitud=2,
                                                                                                                 tipo=1,
                                                                                                                 itinerariomalla=iprimeronuevo,
                                                                                                                 supervisor=profesor,
                                                                                                                 tutorunemi=profesor,
                                                                                                                 fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 tipoinstitucion=1,
                                                                                                                 sectoreconomico=6,
                                                                                                                 empresaempleadora_id=3,
                                                                                                                 culminada=True,
                                                                                                                 fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 lugarpractica_id=2,
                                                                                                                 observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                                 )
                                                            nuevapractica.save()
                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                                  itinerario=itinerarioprimero).update(
                                                        itinerario=iprimeronuevo)

                                                if equivalencia.asignaturamallasalto_id == 10856:
                                                    itinerariosegundo = ItinerariosMalla.objects.get(status=True,
                                                                                                   malla_id=mallaantigua_id,
                                                                                                   nivel_id=2)
                                                    isegundonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallanueva_id,
                                                                                                nivel_id=2)


                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   estadosolicitud__in=[
                                                                                                                       1, 2, 4,
                                                                                                                       5, 6],
                                                                                                                   itinerariomalla=itinerariosegundo).exists()
                                                    practicarechazada = False
                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerariosegundo).exists()


                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   actividad__itinerariomalla=itinerariosegundo).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                                 inscripcion=inscripcion,
                                                                                                                 fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 numerohora=isegundonuevo.horas_practicas,
                                                                                                                 nivelmalla=isegundonuevo.nivel,
                                                                                                                 tiposolicitud=1,
                                                                                                                 estadosolicitud=2,
                                                                                                                 tipo=1,
                                                                                                                 itinerariomalla=isegundonuevo,
                                                                                                                 supervisor=profesor,
                                                                                                                 tutorunemi=profesor,
                                                                                                                 fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 tipoinstitucion=1,
                                                                                                                 sectoreconomico=6,
                                                                                                                 empresaempleadora_id=3,
                                                                                                                 culminada=True,
                                                                                                                 fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 lugarpractica_id=2,
                                                                                                                 observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                                 )
                                                            nuevapractica.save()
                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                                  itinerario=itinerariosegundo).update(
                                                        itinerario=isegundonuevo)

                                                if equivalencia.asignaturamallasalto_id == 10880:
                                                    itinerariotercero = ItinerariosMalla.objects.get(status=True,
                                                                                                   malla_id=mallaantigua_id,
                                                                                                   nivel_id=3)
                                                    iterceronuevo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallanueva_id,
                                                                                                nivel_id=3)


                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   estadosolicitud__in=[
                                                                                                                       1, 2, 4,
                                                                                                                       5, 6],
                                                                                                                   itinerariomalla=itinerariotercero).exists()
                                                    practicarechazada = False
                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerariotercero).exists()


                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   actividad__itinerariomalla=itinerariotercero).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                                 inscripcion=inscripcion,
                                                                                                                 fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 numerohora=iterceronuevo.horas_practicas,
                                                                                                                 nivelmalla=iterceronuevo.nivel,
                                                                                                                 tiposolicitud=1,
                                                                                                                 estadosolicitud=2,
                                                                                                                 tipo=1,
                                                                                                                 itinerariomalla=iterceronuevo,
                                                                                                                 supervisor=profesor,
                                                                                                                 tutorunemi=profesor,
                                                                                                                 fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 tipoinstitucion=1,
                                                                                                                 sectoreconomico=6,
                                                                                                                 empresaempleadora_id=3,
                                                                                                                 culminada=True,
                                                                                                                 fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 lugarpractica_id=2,
                                                                                                                 observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                                 )
                                                            nuevapractica.save()

                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                                  itinerario=itinerariotercero).update(
                                                        itinerario=iterceronuevo)

                                                if equivalencia.asignaturamallasalto_id == 10894:
                                                    itinerariocuarto = ItinerariosMalla.objects.get(status=True,
                                                                                                   malla_id=mallaantigua_id,
                                                                                                   nivel_id=4)
                                                    icuartonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallanueva_id,
                                                                                                nivel_id=4)


                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   estadosolicitud__in=[
                                                                                                                       1, 2, 4,
                                                                                                                       5, 6],
                                                                                                                   itinerariomalla=itinerariocuarto).exists()
                                                    practicarechazada = False
                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerariocuarto).exists()


                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   actividad__itinerariomalla=itinerariocuarto).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                                 inscripcion=inscripcion,
                                                                                                                 fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 numerohora=icuartonuevo.horas_practicas,
                                                                                                                 nivelmalla=icuartonuevo.nivel,
                                                                                                                 tiposolicitud=1,
                                                                                                                 estadosolicitud=2,
                                                                                                                 tipo=1,
                                                                                                                 itinerariomalla=icuartonuevo,
                                                                                                                 supervisor=profesor,
                                                                                                                 tutorunemi=profesor,
                                                                                                                 fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 tipoinstitucion=1,
                                                                                                                 sectoreconomico=6,
                                                                                                                 empresaempleadora_id=3,
                                                                                                                 culminada=True,
                                                                                                                 fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 lugarpractica_id=2,
                                                                                                                 observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                                 )
                                                            nuevapractica.save()
                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                                  itinerario=itinerariocuarto).update(
                                                        itinerario=icuartonuevo)

                                                if equivalencia.asignaturamallasalto_id == 10899:
                                                    itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                                   malla_id=mallaantigua_id,
                                                                                                   nivel_id=5)
                                                    iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallanueva_id,
                                                                                                nivel_id=5)


                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   estadosolicitud__in=[
                                                                                                                       1, 2, 4,
                                                                                                                       5, 6],
                                                                                                                   itinerariomalla=itinerarioquinto).exists()
                                                    practicarechazada = False
                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerarioquinto).exists()


                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   actividad__itinerariomalla=itinerarioquinto).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                                 inscripcion=inscripcion,
                                                                                                                 fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 numerohora=iquintonuevo.horas_practicas,
                                                                                                                 nivelmalla=iquintonuevo.nivel,
                                                                                                                 tiposolicitud=1,
                                                                                                                 estadosolicitud=2,
                                                                                                                 tipo=1,
                                                                                                                 itinerariomalla=iquintonuevo,
                                                                                                                 supervisor=profesor,
                                                                                                                 tutorunemi=profesor,
                                                                                                                 fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 tipoinstitucion=1,
                                                                                                                 sectoreconomico=6,
                                                                                                                 empresaempleadora_id=3,
                                                                                                                 culminada=True,
                                                                                                                 fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 lugarpractica_id=2,
                                                                                                                 observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                                 )
                                                            nuevapractica.save()

                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                                  itinerario=itinerarioquinto).update(
                                                        itinerario=iquintonuevo)

                                                if equivalencia.asignaturamallasalto_id == 10907:
                                                    itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                                   malla_id=mallaantigua_id,
                                                                                                   nivel_id=6)
                                                    isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallanueva_id,
                                                                                                nivel_id=6)

                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   estadosolicitud__in=[
                                                                                                                       1, 2, 4,
                                                                                                                       5, 6],
                                                                                                                   itinerariomalla=itinerariosexto).exists()
                                                    practicarechazada = False
                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerariosexto).exists()


                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   actividad__itinerariomalla=itinerariosexto).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                                 inscripcion=inscripcion,
                                                                                                                 fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 numerohora=isextonuevo.horas_practicas,
                                                                                                                 nivelmalla=isextonuevo.nivel,
                                                                                                                 tiposolicitud=1,
                                                                                                                 estadosolicitud=2,
                                                                                                                 tipo=1,
                                                                                                                 itinerariomalla=isextonuevo,
                                                                                                                 supervisor=profesor,
                                                                                                                 tutorunemi=profesor,
                                                                                                                 fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 tipoinstitucion=1,
                                                                                                                 sectoreconomico=6,
                                                                                                                 empresaempleadora_id=3,
                                                                                                                 culminada=True,
                                                                                                                 fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 lugarpractica_id=2,
                                                                                                                 observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                                 )
                                                            nuevapractica.save()
                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                                  itinerario=itinerariosexto).update(
                                                        itinerario=isextonuevo)

                                                if equivalencia.asignaturamallasalto_id == 10910:
                                                    itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                                   malla_id=mallaantigua_id,
                                                                                                   nivel_id=7)
                                                    iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallanueva_id,
                                                                                                nivel_id=7)
                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   estadosolicitud__in=[
                                                                                                                       1, 2, 4,
                                                                                                                       5, 6],
                                                                                                                   itinerariomalla=itinerarioseptimo).exists()
                                                    practicarechazada = False
                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerarioseptimo).exists()

                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   actividad__itinerariomalla=itinerarioseptimo).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                                 inscripcion=inscripcion,
                                                                                                                 fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 numerohora=iseptimonuevo.horas_practicas,
                                                                                                                 nivelmalla=iseptimonuevo.nivel,
                                                                                                                 tiposolicitud=1,
                                                                                                                 estadosolicitud=2,
                                                                                                                 tipo=1,
                                                                                                                 itinerariomalla=iseptimonuevo,
                                                                                                                 supervisor=profesor,
                                                                                                                 tutorunemi=profesor,
                                                                                                                 fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 tipoinstitucion=1,
                                                                                                                 sectoreconomico=6,
                                                                                                                 empresaempleadora_id=3,
                                                                                                                 culminada=True,
                                                                                                                 fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 lugarpractica_id=2,
                                                                                                                 observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                                 )
                                                            nuevapractica.save()
                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                                  itinerario=itinerarioseptimo).update(
                                                        itinerario=iseptimonuevo)

                                                if equivalencia.asignaturamallasalto_id == 10928:
                                                    itinerarionoveno = ItinerariosMalla.objects.get(status=True,
                                                                                                   malla_id=mallaantigua_id,
                                                                                                   nivel_id=9)
                                                    inovenonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallanueva_id,
                                                                                                nivel_id=9)
                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   estadosolicitud__in=[
                                                                                                                       1, 2, 4,
                                                                                                                       5, 6],
                                                                                                                   itinerariomalla=itinerarionoveno).exists()
                                                    practicarechazada = False
                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerarionoveno).exists()

                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(status=True,
                                                                                                                   inscripcion=inscripcion,
                                                                                                                   actividad__itinerariomalla=itinerarionoveno).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(status=True,
                                                                                                                 inscripcion=inscripcion,
                                                                                                                 fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 numerohora=inovenonuevo.horas_practicas,
                                                                                                                 nivelmalla=inovenonuevo.nivel,
                                                                                                                 tiposolicitud=1,
                                                                                                                 estadosolicitud=2,
                                                                                                                 tipo=1,
                                                                                                                 itinerariomalla=inovenonuevo,
                                                                                                                 supervisor=profesor,
                                                                                                                 tutorunemi=profesor,
                                                                                                                 fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 tipoinstitucion=1,
                                                                                                                 sectoreconomico=6,
                                                                                                                 empresaempleadora_id=3,
                                                                                                                 culminada=True,
                                                                                                                 fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                                                 lugarpractica_id=2,
                                                                                                                 observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                                                                                 )
                                                            nuevapractica.save()
                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(status=True,
                                                                                                                  itinerario=itinerarionoveno).update(
                                                        itinerario=inovenonuevo)


                                    if equivalencia.asignaturamallasalto_id in [10926]:
                                        if not horasvinculacion:
                                            if recordnuevo.aprobada:
                                                if equivalencia.asignaturamallasalto_id == 10926 and inscripcion.numero_horas_proyectos_vinculacion() < 320:
                                                    horasfalta = 320 - inscripcion.numero_horas_proyectos_vinculacion()
                                                    vinculacion = ParticipantesMatrices(status=True,
                                                                                        matrizevidencia_id=2,
                                                                                        proyecto_id=601,
                                                                                        inscripcion=inscripcion,
                                                                                        horas=horasfalta,
                                                                                        registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                        registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                        estado=1
                                                                                        )
                                                    vinculacion.save()

                                    if not respaldo.exists():
                                        respaldorecord = RespaldoRecordAcademico(
                                            recordacademicooriginal=recordantiguo,
                                            recordacademiconuevo=recordnuevo
                                        )
                                        respaldorecord.save()
                                    else:
                                        respaldorecord = respaldo[0]
                                        respaldorecord.recordacademiconuevo = recordnuevo
                                        respaldorecord.save()
                                    print(u"Record actualizado %s" % recordnuevo)

                            else:
                                hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                                fila += 1

                        practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                        hojadestino.write(fila, 3, practicasppf, fuentenormal)
                        horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                        hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                        fila += 1

                        time.sleep(1)

                    else:
                        sin_matricula.append(inscripcion)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")
        print(str(sin_matricula))

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

def homologacion_turismo_rezagados():
    #verificar que todos los estudiantes tengan la misma malla
    cadena = ''
    linea, excluidos, conexito = 0, 0, 0
    try:
        libre_origen = '/homologacion_turismo_2_rezagados.xls'
        fuentecabecera = easyxf(
            'font: name Verdana, color-index black, bold on, height 150; pattern: pattern solid, fore_colour gray25; alignment: vert distributed, horiz centre; borders: left thin, right thin, top thin, bottom thin')
        fuentenormal = easyxf(
            'font: name Verdana, color-index black, height 150; borders: left thin, right thin, top thin, bottom thin')
        output_folder = MEDIA_ROOT
        output_folder = os.path.join(os.path.join(BASE_DIR))
        # liborigen = xlrd.open_workbook(output_folder + libre_origen)
        libdestino = xlwt.Workbook()
        hojadestino = libdestino.add_sheet('Sheet1')
        fil = 0
        columnas = [(u"CEDULA", 6000),
                    (u"APELLIDOS Y NOMBRES", 6000),
                    (u"OBSERVACI√ìN", 6000),
                    (u"HORAS PRACTICAS", 6000),
                    (u"HORAS VINCULACION", 6000),
                    (u"OBSERVACI√ìN", 6000)
                    ]
        for col_num in range(len(columnas)):
            hojadestino.write(fil, col_num, columnas[col_num][0], fuentecabecera)
            hojadestino.col(col_num).width = columnas[col_num][1]
        fila = 1
        titulacion = 0

        lin = 0
        #miarchivo = openpyxl.load_workbook("CEDULA_COMUNICACION_final.xlsx")
        miarchivo = openpyxl.load_workbook("inscripcion_turismo.xlsx")
        #miarchivo = openpyxl.load_workbook("prueba_2.xlsx")

        ws = miarchivo.get_sheet_by_name("datos")
        worksheet = ws
        c = 0
        cont = 0
        periodo_id = 224
        carrera_id = 134
        mallaantigua_id = 199
        mallanueva_id = 487
        sin_matricula = []
        for row in worksheet.iter_rows(min_row=0):
            if lin >= 0:
                currentValues, cadena = [], ''
                for cell in row:
                    cadena += str(cell.value) + ' '
                    currentValues.append(str(cell.value))
                inscripcion = int(currentValues[0])

                if not inscripcion:
                    break

                with transaction.atomic():
                    matricula = Matricula.objects.filter(status=True, inscripcion__carrera__id=carrera_id,
                                                         inscripcion_id=inscripcion).first()
                    if matricula:
                        cont += 1
                        matricula.pasoayuda = True
                        matricula.save()
                        print(u"%s - %s" % (matricula, cont))
                        inscripcion = matricula.inscripcion
                        hojadestino.write(fila, 0, matricula.inscripcion.persona.identificacion(), fuentenormal)
                        hojadestino.write(fila, 1, matricula.inscripcion.persona.nombre_completo(), fuentenormal)
                        hojadestino.write(fila, 2, matricula.nivel.periodo.nombre, fuentenormal)

                        itinerarios = ItinerariosMalla.objects.filter(status=True, malla_id=mallaantigua_id)

                        practicaspp = haber_cumplido_horas_creditos_practicas_preprofesionales(inscripcion.id)
                        horasvinculacion = haber_cumplido_horas_creditos_vinculacion(inscripcion.id)

                        if InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                           malla_id=mallaantigua_id).exists():
                            imantigua = \
                                InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                                malla_id=mallaantigua_id)[
                                    0]
                            imantigua.status = False
                            imantigua.save()
                            print(u"Desactiva antigua inscripcion -----------------------------")

                        if not InscripcionMalla.objects.filter(status=True, inscripcion=inscripcion,
                                                               malla_id=mallanueva_id).exists():
                            imnueva = InscripcionMalla(inscripcion=inscripcion, malla_id=mallanueva_id)
                            imnueva.save()
                            print(u"Crea nueva inscripcion -----------------------------")

                        equivalencias = TablaEquivalenciaAsignaturas.objects.filter(status=True,
                                                                                    asignaturamalla__malla_id=mallaantigua_id).order_by(
                            'asignaturamallasalto__nivelmalla__orden')

                        for equivalencia in equivalencias:
                            print(u"nueva - %s" % equivalencia.asignaturamallasalto)
                            recordantiguo = inscripcion.recordacademico_set.filter(status=True,
                                                                                   asignaturamalla_id=equivalencia.asignaturamalla_id).first()

                            if recordantiguo:
                                print(u"anterior - %s" % equivalencia.asignaturamalla)
                                print(u"Record antiguo: %s" % recordantiguo)
                                recordnuevo = None
                                recordantiguo.status = False
                                recordantiguo.save(update_asignaturamalla=False)

                                if equivalencia.asignaturamallasalto_id in [10929, 10947, 10959, 10953, 10964]:
                                    observaciones = recordantiguo.observaciones + " Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15"
                                    homologada = True



                                else:
                                    observaciones = recordantiguo.observaciones + " Migraci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO15 Y RESOLUCI√ìN OCS-SO-18-2023-NO14"
                                    homologada = False
                                if not RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                      asignaturamalla=equivalencia.asignaturamallasalto).exists():

                                    recordnuevo = RecordAcademico(inscripcion=inscripcion,
                                                                  matriculas=recordantiguo.matriculas,
                                                                  asignaturamalla=equivalencia.asignaturamallasalto,
                                                                  asignatura=equivalencia.asignaturamallasalto.asignatura,
                                                                  asignaturaold_id=recordantiguo.asignatura.id,
                                                                  nota=recordantiguo.nota,
                                                                  asistencia=recordantiguo.asistencia,
                                                                  sinasistencia=recordantiguo.sinasistencia,
                                                                  fecha=recordantiguo.fecha,
                                                                  noaplica=recordantiguo.noaplica,
                                                                  aprobada=recordantiguo.aprobada,
                                                                  convalidacion=recordantiguo.convalidacion,
                                                                  pendiente=recordantiguo.pendiente,
                                                                  creditos=equivalencia.asignaturamallasalto.creditos,
                                                                  horas=equivalencia.asignaturamallasalto.horas,
                                                                  valida=recordantiguo.valida,
                                                                  validapromedio=recordantiguo.validapromedio,
                                                                  observaciones=observaciones,
                                                                  homologada=homologada,
                                                                  materiaregular=recordantiguo.materiaregular,
                                                                  materiacurso=None,
                                                                  completonota=recordantiguo.completonota,
                                                                  completoasistencia=recordantiguo.completoasistencia,
                                                                  fechainicio=recordantiguo.fechainicio,
                                                                  fechafin=recordantiguo.fechafin,
                                                                  suficiencia=recordantiguo.suficiencia,
                                                                  asignaturamallahistorico_id=recordantiguo.asignaturamalla.id,
                                                                  reverso=False)
                                    recordnuevo.save()
                                    print(u"Crea nuevo record %s" % recordnuevo)


                                elif RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                    asignaturamalla=equivalencia.asignaturamallasalto):
                                    recordnuevo = RecordAcademico.objects.filter(status=True, inscripcion=inscripcion,
                                                                                 asignaturamalla=equivalencia.asignaturamallasalto)[
                                        0]
                                    recordnuevo.matriculas = recordantiguo.matriculas
                                    recordnuevo.asignaturamalla = equivalencia.asignaturamallasalto
                                    recordnuevo.asignatura = equivalencia.asignaturamallasalto.asignatura
                                    recordnuevo.asignaturaold = recordantiguo.asignaturamalla.asignatura
                                    recordnuevo.nota = recordantiguo.nota
                                    recordnuevo.asistencia = recordantiguo.asistencia
                                    recordnuevo.sinasistencia = recordantiguo.sinasistencia
                                    recordnuevo.fecha = recordantiguo.fecha
                                    recordnuevo.noaplica = recordantiguo.noaplica
                                    recordnuevo.aprobada = recordantiguo.aprobada
                                    recordnuevo.convalidacion = recordantiguo.convalidacion
                                    recordnuevo.pendiente = recordantiguo.pendiente
                                    recordnuevo.creditos = equivalencia.asignaturamallasalto.creditos
                                    recordnuevo.horas = equivalencia.asignaturamallasalto.horas
                                    recordnuevo.valida = recordantiguo.valida
                                    recordnuevo.validapromedio = recordantiguo.validapromedio
                                    recordnuevo.observaciones = observaciones
                                    recordnuevo.homologada = homologada
                                    recordnuevo.materiaregular = recordantiguo.materiaregular
                                    recordnuevo.materiacurso = None
                                    recordnuevo.completonota = recordantiguo.completonota
                                    recordnuevo.completoasistencia = recordantiguo.completoasistencia
                                    recordnuevo.fechainicio = recordantiguo.fechainicio
                                    recordnuevo.fechafin = recordantiguo.fechafin
                                    recordnuevo.suficiencia = recordantiguo.suficiencia
                                    recordnuevo.asignaturamallahistorico = recordantiguo.asignaturamalla
                                    recordnuevo.reverso = False
                                    recordnuevo.save()

                                if recordnuevo:
                                    historicos = HistoricoRecordAcademico.objects.filter(status=True,
                                                                                         recordacademico=recordantiguo).update(
                                        recordacademico=recordnuevo,
                                        creditos=recordnuevo.creditos,
                                        horas=recordnuevo.horas,
                                        homologada=recordnuevo.homologada)
                                    respaldo = RespaldoRecordAcademico.objects.filter(status=True,
                                                                                      recordacademicooriginal=recordantiguo)

                                    if equivalencia.asignaturamallasalto_id in [10929, 10947, 10953]:
                                        if not practicaspp:
                                            if recordnuevo.aprobada:
                                                profesor = None
                                                if recordnuevo.materiaregular:
                                                    profesor = recordnuevo.materiaregular.profesor_principal()
                                                elif recordnuevo.materiacurso:
                                                    profesor = recordnuevo.materiaregular.profesor()
                                                if equivalencia.asignaturamallasalto_id == 10929:
                                                    itinerarioquinto = ItinerariosMalla.objects.get(status=True,
                                                                                                    malla_id=mallaantigua_id,
                                                                                                    nivel_id=5)
                                                    iquintonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                                malla_id=mallanueva_id,
                                                                                                nivel_id=5)

                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud__in=[
                                                            1, 2, 4,
                                                            5, 6],
                                                        itinerariomalla=itinerarioquinto).exists()
                                                    practicarechazada = False

                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerarioquinto).exists()

                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                                status=True,
                                                                inscripcion=inscripcion,
                                                                actividad__itinerariomalla=itinerarioquinto).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(
                                                                status=True,
                                                                inscripcion=inscripcion,
                                                                fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                numerohora=iquintonuevo.horas_practicas,
                                                                nivelmalla=iquintonuevo.nivel,
                                                                tiposolicitud=1,
                                                                estadosolicitud=2,
                                                                tipo=1,
                                                                itinerariomalla=iquintonuevo,
                                                                supervisor=profesor,
                                                                tutorunemi=profesor,
                                                                fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                tipoinstitucion=1,
                                                                sectoreconomico=6,
                                                                empresaempleadora_id=3,
                                                                culminada=True,
                                                                fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                lugarpractica_id=2,
                                                                observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                            )
                                                            nuevapractica.save()

                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                        status=True,
                                                        itinerario=itinerarioquinto).update(
                                                        itinerario=iquintonuevo)

                                                if equivalencia.asignaturamallasalto_id == 10947:
                                                    itinerariosexto = ItinerariosMalla.objects.get(status=True,
                                                                                                   malla_id=mallaantigua_id,
                                                                                                   nivel_id=6)
                                                    isextonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                               malla_id=mallanueva_id,
                                                                                               nivel_id=6)

                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud__in=[
                                                            1, 2, 4,
                                                            5, 6],
                                                        itinerariomalla=itinerariosexto).exists()
                                                    practicarechazada = False

                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerariosexto).exists()

                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                                status=True,
                                                                inscripcion=inscripcion,
                                                                actividad__itinerariomalla=itinerariosexto).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(
                                                                status=True,
                                                                inscripcion=inscripcion,
                                                                fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                numerohora=isextonuevo.horas_practicas,
                                                                nivelmalla=isextonuevo.nivel,
                                                                tiposolicitud=1,
                                                                estadosolicitud=2,
                                                                tipo=1,
                                                                itinerariomalla=isextonuevo,
                                                                supervisor=profesor,
                                                                tutorunemi=profesor,
                                                                fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                tipoinstitucion=1,
                                                                sectoreconomico=6,
                                                                empresaempleadora_id=3,
                                                                culminada=True,
                                                                fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                lugarpractica_id=2,
                                                                observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                            )
                                                            nuevapractica.save()

                                                    ItinerariosActividadDetalleDistributivoCarrera.objects.filter(
                                                        status=True,
                                                        itinerario=itinerariosexto).update(
                                                        itinerario=isextonuevo)

                                                if equivalencia.asignaturamallasalto_id == 10953:
                                                    itinerarioseptimo = ItinerariosMalla.objects.get(status=True,
                                                                                                     malla_id=mallaantigua_id,
                                                                                                     nivel_id=7)
                                                    iseptimonuevo = ItinerariosMalla.objects.get(status=True,
                                                                                                 malla_id=mallanueva_id,
                                                                                                 nivel_id=7)

                                                    practica = PracticasPreprofesionalesInscripcion.objects.filter(
                                                        status=True,
                                                        inscripcion=inscripcion,
                                                        estadosolicitud__in=[
                                                            1, 2, 4,
                                                            5, 6],
                                                        itinerariomalla=itinerarioseptimo).exists()
                                                    practicarechazada = False

                                                    if not practica:
                                                        practicarechazada = PracticasPreprofesionalesInscripcion.objects.filter(
                                                            status=True,
                                                            inscripcion=inscripcion,
                                                            estadosolicitud=3,
                                                            itinerariomalla=itinerarioseptimo).exists()

                                                    if not practica or practicarechazada:
                                                        if not PracticasPreprofesionalesInscripcion.objects.filter(
                                                                status=True,
                                                                inscripcion=inscripcion,
                                                                actividad__itinerariomalla=itinerarioseptimo).exists():
                                                            nuevapractica = PracticasPreprofesionalesInscripcion(
                                                                status=True,
                                                                inscripcion=inscripcion,
                                                                fechadesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                fechahasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                numerohora=iseptimonuevo.horas_practicas,
                                                                nivelmalla=iseptimonuevo.nivel,
                                                                tiposolicitud=1,
                                                                estadosolicitud=2,
                                                                tipo=1,
                                                                itinerariomalla=iseptimonuevo,
                                                                supervisor=profesor,
                                                                tutorunemi=profesor,
                                                                fechaasigtutor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                tipoinstitucion=1,
                                                                sectoreconomico=6,
                                                                empresaempleadora_id=3,
                                                                culminada=True,
                                                                fechaasigsupervisor=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                lugarpractica_id=2,
                                                                observacion='Homologaci√≥n con base a RESOLUCI√ìN CGA-SO-9-2023-NO28 Y RESOLUCI√ìN OCS-SO-18-2023-NO15'
                                                            )
                                                            nuevapractica.save()

                                    if equivalencia.asignaturamallasalto_id in [10959, 10964]:
                                        if not horasvinculacion:
                                            if recordnuevo.aprobada:
                                                totalhoras = inscripcion.numero_horas_proyectos_vinculacion()
                                                if totalhoras == 0:
                                                    a = 0
                                                    print('sin horas')
                                                if equivalencia.asignaturamallasalto_id == 10959 and inscripcion.numero_horas_proyectos_vinculacion() < 80:
                                                    horasfalta = 80 - inscripcion.numero_horas_proyectos_vinculacion()
                                                    vinculacion = ParticipantesMatrices(status=True,
                                                                                        matrizevidencia_id=2,
                                                                                        proyecto_id=601,
                                                                                        inscripcion=inscripcion,
                                                                                        horas=horasfalta,
                                                                                        registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                        registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                        estado=1
                                                                                        )
                                                    vinculacion.save()

                                                if equivalencia.asignaturamallasalto_id == 10964 and inscripcion.numero_horas_proyectos_vinculacion() < 160:
                                                    horasfalta = 160 - inscripcion.numero_horas_proyectos_vinculacion()
                                                    vinculacion = ParticipantesMatrices(status=True,
                                                                                        matrizevidencia_id=2,
                                                                                        proyecto_id=601,
                                                                                        inscripcion=inscripcion,
                                                                                        horas=horasfalta,
                                                                                        registrohorasdesde=recordnuevo.materiaregular.nivel.periodo.inicio if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                        registrohorashasta=recordnuevo.materiaregular.nivel.periodo.fin if not recordnuevo.materiaregular == None else datetime.now().date(),
                                                                                        estado=1
                                                                                        )
                                                    vinculacion.save()

                                    if not respaldo.exists():
                                        respaldorecord = RespaldoRecordAcademico(
                                            recordacademicooriginal=recordantiguo,
                                            recordacademiconuevo=recordnuevo
                                        )
                                        respaldorecord.save()
                                    else:
                                        respaldorecord = respaldo[0]
                                        respaldorecord.recordacademiconuevo = recordnuevo
                                        respaldorecord.save()
                                    print(u"Record actualizado %s" % recordnuevo)


                            else:
                                hojadestino.write(fila, 3, "NO ENCONTRO RECORD ANTIGUO %s" % equivalencia.asignaturamalla)
                                fila += 1

                        practicasppf = inscripcion.numero_horas_practicas_pre_profesionales()
                        hojadestino.write(fila, 3, practicasppf, fuentenormal)
                        horasvinculacionf = inscripcion.numero_horas_proyectos_vinculacion()
                        hojadestino.write(fila, 4, horasvinculacionf, fuentenormal)
                        fila += 1

                        time.sleep(1)

                    else:
                        sin_matricula.append(inscripcion)

            lin += 1

        libdestino.save(output_folder + libre_origen)
        print(output_folder + libre_origen)
        print("Proceso finalizado. . .")
        print(str(sin_matricula))

    except Exception as ex:
        transaction.set_rollback(True)
        print('error: %s' % ex)
        hojadestino.write(fila, 3, str(ex))
        fila += 1

print("Funci√≥n varios")
with concurrent.futures.ThreadPoolExecutor(max_workers=8) as executor:
    from settings import DEBUG
    # if DEBUG:
    #     path_anexo = 'reporte_acortezl__examen_admisi√≥n_enero2024.xlsx'
    #future_1 = executor.submit(homologacion_economia)
    future_2 = executor.submit(homologacion_turismo_rezagados)
    # future_3 = executor.submit(homologacion_economia3)
    # future_4 = executor.submit(homologacion_inicial_rezagados)
    # future_5 = executor.submit(homologacion_economia5)
    #future_6 = executor.submit(homologacion_economia6)
    # future_7 = executor.submit(homologacion_economia7)
    # future_8 = executor.submit(homologacion_economia8)




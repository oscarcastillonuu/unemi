/// <reference lib="webworker" />

import { build, files, timestamp } from '$service-worker';

const worker = (self as unknown) as ServiceWorkerGlobalScope;
const FILES = `cache${timestamp}`;

// `build` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const to_cache = build.concat(files);
const staticAssets = new Set(to_cache);

worker.addEventListener('install', (event) => {
	//console.log("install");
	event.waitUntil(
		caches
			.open(FILES)
			.then((cache) => cache.addAll(to_cache))
			.then(() => {
				worker.skipWaiting();
			})
	);
});

worker.addEventListener('activate', (event) => {
	//console.log("activate");
	event.waitUntil(
		caches.keys().then(async (keys) => {
			// delete old caches
			for (const key of keys) {
				if (key !== FILES) await caches.delete(key);
			}

			worker.clients.claim();
		})
	);
});

/**
 * Fetch the asset from the network and store it in the cache.
 * Fall back to the cache if the user is offline.
 */
async function fetchAndCache(request: Request) {
	const cache = await caches.open(`offline${timestamp}`);

	try {
		const response = await fetch(request);
		cache.put(request, response.clone());
		return response;
	} catch (err) {
		const response = await cache.match(request);
		if (response) return response;

		throw err;
	}
}

worker.addEventListener('fetch', (event) => {
	if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

	const url = new URL(event.request.url);

	// don't try to handle e.g. data: URIs
	const isHttp = url.protocol.startsWith('http');
	const isDevServerRequest =
		url.hostname === self.location.hostname && url.port !== self.location.port;
	const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
	const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

	if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
		event.respondWith(
			(async () => {
				// always serve static files and bundler-generated assets from cache.
				// if your application has other URLs with data that will never change,
				// set this variable to true for them and they will only be fetched once.
				const cachedAsset = isStaticAsset && (await caches.match(event.request));

				return cachedAsset || fetchAndCache(event.request);
			})()
		);
	}
	event.waitUntil(async function() {
		// Exit early if we don't have access to the client.
		// Eg, if it's cross-origin.
		if (!event.clientId) return;
	
		// Get the client.
		const client = await clients.get(event.clientId);
		// Exit early if we don't get the client.
		// Eg, if it closed.
		if (!client) return;
	
		// Send a message to the client.
		client.postMessage({
		  msg: "Hey I just got a fetch from you!",
		  url: event.request.url
		});
	
	  }());
});



/*
Definimos un delay ya que en algunos dispositivos la resolución del promise chain
puede demorar y hacer que la notificación no se muestre
*/
const notificationDelay = 500;

const showNotification = (title, options) =>
	new Promise<void>(resolve => {
		setTimeout(() => {
			// Mostramos la notificación
			worker.registration.showNotification(title, options).then(() => resolve());
		}, notificationDelay);
	});

// Listener del evento push
worker.addEventListener('push', async event => {
	const eventInfo = event.data.text();
    const data = JSON.parse(eventInfo);
    const head = data.head;
    const body = data.body;

    const clientes = await clients.matchAll({includeUncontrolled: true, type: 'window'});
    for (const client of clientes) {
        client.postMessage(data);
    }

    const DATANOT = {
        body: body,
        icon: "./pwalogo/512x512.png",
        badge: "./pwalogo/badge.png",
        vibrate: [500, 110, 500, 500, 110, 500],
        data: {url: data.url ? data.url : ''},
        actions: [{action: "open_url", title: "Ver ahora"}],
        requireInteraction: true
    };
	// Finzalizado el evento llamamos a nuestra función de mostrar notificación
	event.waitUntil(showNotification(head, DATANOT));
});

worker.onmessage = async function (event) {
    if (event.data && event.data.type === 'PORT_INITIALIZATION') {
        //port = event.ports[0];
    } else if (event.data && event.data.type) {
        const clientes = await clients.matchAll({includeUncontrolled: true, type: 'window'});
        for (const client of clientes) {
            client.postMessage(event.data.type);
        }
    }
}

// Escuchamos el click en la ventana de notificación
worker.addEventListener('notificationclick', event => {
	//console.log("evento:", event);
	event.notification.close();

	// recuperamos la url que pasamos en el options
	const { url } = event.notification.data;
	if (url) event.waitUntil(clients.openWindow(url));
});